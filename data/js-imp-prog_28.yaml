- en: 23 Control flow statements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 23 控制流语句
- en: 原文：[https://exploringjs.com/impatient-js/ch_control-flow.html](https://exploringjs.com/impatient-js/ch_control-flow.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/impatient-js/ch_control-flow.html](https://exploringjs.com/impatient-js/ch_control-flow.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '23.1 [Controlling loops: `break` and `continue`](ch_control-flow.html#controlling-loops-break-and-continue)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.1 控制循环：`break` 和 `continue`
- en: 23.1.1 [`break`](ch_control-flow.html#break)
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.1.1 [`break`](ch_control-flow.html#break)
- en: '23.1.2 [`break` plus label: leaving any labeled statement](ch_control-flow.html#labels)'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.1.2 [`break` 加标签：离开任何带标签的语句](ch_control-flow.html#labels)
- en: 23.1.3 [`continue`](ch_control-flow.html#continue)
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.1.3 [`continue`](ch_control-flow.html#continue)
- en: 23.2 [Conditions of control flow statements](ch_control-flow.html#conditions-of-control-flow-statements)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.2 [控制流语句的条件](ch_control-flow.html#conditions-of-control-flow-statements)
- en: 23.3 [`if` statements [ES1]](ch_control-flow.html#if)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.3 [`if` 语句 [ES1]](ch_control-flow.html#if)
- en: 23.3.1 [The syntax of `if` statements](ch_control-flow.html#the-syntax-of-if-statements)
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.3.1 [`if` 语句的语法](ch_control-flow.html#the-syntax-of-if-statements)
- en: 23.4 [`switch` statements [ES3]](ch_control-flow.html#switch)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.4 [`switch` 语句 [ES3]](ch_control-flow.html#switch)
- en: 23.4.1 [A first example of a `switch` statement](ch_control-flow.html#a-first-example-of-a-switch-statement)
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.4.1 [`switch` 语句的第一个例子](ch_control-flow.html#a-first-example-of-a-switch-statement)
- en: 23.4.2 [Don’t forget to `return` or `break`!](ch_control-flow.html#dont-forget-to-return-or-break)
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.4.2 [不要忘记 `return` 或 `break`！](ch_control-flow.html#dont-forget-to-return-or-break)
- en: 23.4.3 [Empty case clauses](ch_control-flow.html#empty-case-clauses)
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.4.3 [空的 case 子句](ch_control-flow.html#empty-case-clauses)
- en: 23.4.4 [Checking for illegal values via a `default` clause](ch_control-flow.html#checking-for-illegal-values-via-a-default-clause)
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.4.4 [通过 `default` 子句检查非法值](ch_control-flow.html#checking-for-illegal-values-via-a-default-clause)
- en: 23.5 [`while` loops [ES1]](ch_control-flow.html#while)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.5 [`while` 循环 [ES1]](ch_control-flow.html#while)
- en: 23.5.1 [Examples of `while` loops](ch_control-flow.html#examples-of-while-loops)
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.5.1 [`while` 循环的例子](ch_control-flow.html#examples-of-while-loops)
- en: 23.6 [`do-while` loops [ES3]](ch_control-flow.html#do-while)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.6 [`do-while` 循环 [ES3]](ch_control-flow.html#do-while)
- en: 23.7 [`for` loops [ES1]](ch_control-flow.html#for)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.7 [`for` 循环 [ES1]](ch_control-flow.html#for)
- en: 23.7.1 [Examples of `for` loops](ch_control-flow.html#examples-of-for-loops)
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.7.1 [`for` 循环的例子](ch_control-flow.html#examples-of-for-loops)
- en: 23.8 [`for-of` loops [ES6]](ch_control-flow.html#for-of)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.8 [`for-of` 循环 [ES6]](ch_control-flow.html#for-of)
- en: '23.8.1 [`const`: `for-of` vs. `for`](ch_control-flow.html#const-for-of-vs.-for)'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '23.8.1 [`const`: `for-of` vs. `for`](ch_control-flow.html#const-for-of-vs.-for)'
- en: 23.8.2 [Iterating over iterables](ch_control-flow.html#iterating-over-iterables)
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.8.2 [遍历可迭代对象](ch_control-flow.html#iterating-over-iterables)
- en: 23.8.3 [Iterating over [index, element] pairs of Arrays](ch_control-flow.html#for-of-iterating-index-element)
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.8.3 [遍历数组的[index, element]对](ch_control-flow.html#for-of-iterating-index-element)
- en: 23.9 [`for-await-of` loops [ES2018]](ch_control-flow.html#for-await-of-loops-es2018)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.9 [`for-await-of` 循环 [ES2018]](ch_control-flow.html#for-await-of-loops-es2018)
- en: 23.10 [`for-in` loops (avoid) [ES1]](ch_control-flow.html#for-in)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.10 [`for-in` 循环（避免使用）[ES1]](ch_control-flow.html#for-in)
- en: 23.11 [Recomendations for looping](ch_control-flow.html#recomendations-for-looping)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 23.11 [循环的建议](ch_control-flow.html#recomendations-for-looping)
- en: '* * *'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'This chapter covers the following control flow statements:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下控制流语句：
- en: '`if` statement [ES1]'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if` 语句 [ES1]'
- en: '`switch` statement [ES3]'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`switch` 语句 [ES3]'
- en: '`while` loop [ES1]'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`while` 循环 [ES1]'
- en: '`do-while` loop [ES3]'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do-while` 循环 [ES3]'
- en: '`for` loop [ES1]'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for` 循环 [ES1]'
- en: '`for-of` loop [ES6]'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for-of` 循环 [ES6]'
- en: '`for-await-of` loop [ES2018]'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for-await-of` 循环 [ES2018]'
- en: '`for-in` loop [ES1]'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for-in` 循环 [ES1]'
- en: '23.1 Controlling loops: `break` and `continue`'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 23.1 控制循环：`break` 和 `continue`
- en: The two operators `break` and `continue` can be used to control loops and other
    statements while we are inside them.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 两个操作符 `break` 和 `continue` 可以用于控制循环和其他语句，当我们在其中时。
- en: 23.1.1 `break`
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 23.1.1 `break`
- en: 'There are two versions of `break`: one with an operand and one without an operand.
    The latter version works inside the following statements: `while`, `do-while`,
    `for`, `for-of`, `for-await-of`, `for-in` and `switch`. It immediately leaves
    the current statement:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`break` 有两个版本：一个带操作数，一个不带操作数。后者的版本适用于以下语句：`while`, `do-while`, `for`, `for-of`,
    `for-await-of`, `for-in` 和 `switch`。它会立即离开当前语句：'
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '23.1.2 `break` plus label: leaving any labeled statement'
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 23.1.2 `break` 加标签：离开任何带标签的语句
- en: '`break` with an operand works everywhere. Its operand is a *label*. Labels
    can be put in front of any statement, including blocks. `break my_label` leaves
    the statement whose label is `my_label`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 带操作数的 `break` 可以在任何地方使用。它的操作数是一个*标签*。标签可以放在任何语句前面，包括块。`break my_label` 会离开标签为
    `my_label` 的语句：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the following example, the search can either:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，搜索可以是：
- en: 'Fail: The loop finishes without finding a `result`. That is handled directly
    after the loop (line B).'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失败：循环在没有找到`result`的情况下结束。这直接在循环之后处理（B行）。
- en: 'Succeed: While looping, we find a `result`. Then we use `break` plus label
    (line A) to skip the code that handles failure.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成功：在循环中，我们找到了一个`result`。然后我们使用`break`加标签（A行）来跳过处理失败的代码。
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 23.1.3 `continue`
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 23.1.3 `continue`
- en: '`continue` only works inside `while`, `do-while`, `for`, `for-of`, `for-await-of`,
    and `for-in`. It immediately leaves the current loop iteration and continues with
    the next one – for example:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`continue` 只能在 `while`, `do-while`, `for`, `for-of`, `for-await-of`, 和 `for-in`
    中使用。它会立即离开当前循环迭代，并继续下一个迭代 - 例如：'
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 23.2 Conditions of control flow statements
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 23.2 控制流语句的条件
- en: '`if`, `while`, and `do-while` have conditions that are, in principle, boolean.
    However, a condition only has to be *truthy* (`true` if coerced to boolean) in
    order to be accepted. In other words, the following two control flow statements
    are equivalent:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`, `while` 和 `do-while` 都有原则上是布尔值的条件。但是，条件只需要是*真值*（如果强制转换为布尔值则为`true`）就可以被接受。换句话说，以下两个控制流语句是等价的：'
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is a list of all *falsy* values:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是所有*假值*的列表：
- en: '`undefined`, `null`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`undefined`, `null`'
- en: '`false`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`false`'
- en: '`0`, `NaN`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`, `NaN`'
- en: '`0n`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0n`'
- en: '`''''`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''''`'
- en: All other values are truthy. For more information, see [§15.2 “Falsy and truthy
    values”](ch_booleans.html#falsiness-truthiness).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他值都是真值。更多信息，请参见[§15.2 “Falsy and truthy values”](ch_booleans.html#falsiness-truthiness)。
- en: 23.3 `if` statements [ES1]
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 23.3 `if`语句 [ES1]
- en: 'These are two simple `if` statements: one with just a “then” branch and one
    with both a “then” branch and an “else” branch:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是两个简单的`if`语句：一个只有一个“then”分支，另一个既有“then”分支又有“else”分支：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Instead of the block, `else` can also be followed by another `if` statement:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是块，`else`也可以跟着另一个`if`语句：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can continue this chain with more `else if`s.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用更多的`else if`继续这个链。
- en: 23.3.1 The syntax of `if` statements
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 23.3.1 `if`语句的语法
- en: 'The general syntax of `if` statements is:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句的一般语法是：'
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'So far, the `then_statement` has always been a block, but we can use any statement.
    That statement must be terminated with a semicolon:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，`then_statement`一直是一个块，但我们可以使用任何语句。该语句必须以分号结束：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: That means that `else if` is not its own construct; it’s simply an `if` statement
    whose `else_statement` is another `if` statement.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着`else if`不是自己的结构；它只是一个`else_statement`是另一个`if`语句的`if`语句。
- en: 23.4 `switch` statements [ES3]
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 23.4 `switch`语句 [ES3]
- en: 'A `switch` statement looks as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`switch`语句的外观如下：'
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The body of `switch` consists of zero or more case clauses:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`switch`的主体由零个或多个case子句组成：'
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And, optionally, a default clause:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 并且，可选地，一个默认子句：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A `switch` is executed as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`switch`的执行方式如下：'
- en: It evaluates the switch expression.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它评估switch表达式。
- en: It jumps to the first case clause whose expression has the same result as the
    switch expression.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它跳转到第一个case子句，其表达式与switch表达式的结果相同。
- en: Otherwise, if there is no such clause, it jumps to the default clause.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，如果没有这样的子句，它就会跳转到默认子句。
- en: Otherwise, if there is no default clause, it does nothing.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，如果没有默认子句，它就什么也不做。
- en: 23.4.1 A first example of a `switch` statement
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 23.4.1 `switch`语句的第一个示例
- en: 'Let’s look at an example: The following function converts a number from 1–7
    to the name of a weekday.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子：以下函数将数字从1-7转换为工作日的名称。
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 23.4.2 Don’t forget to `return` or `break`!
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 23.4.2 不要忘记`return`或`break`！
- en: 'At the end of a case clause, execution continues with the next case clause,
    unless we `return` or `break` – for example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在case子句的末尾，执行会继续下一个case子句，除非我们`return`或`break` - 例如：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'That is, our implementation of `dayOfTheWeek()` only worked because we used
    `return`. We can fix `englishToFrench()` by using `break`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，我们的`dayOfTheWeek()`的实现之所以有效，仅仅是因为我们使用了`return`。我们可以通过使用`break`来修复`englishToFrench()`：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 23.4.3 Empty case clauses
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 23.4.3 空case子句
- en: 'The statements of a case clause can be omitted, which effectively gives us
    multiple case expressions per case clause:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: case子句的语句可以被省略，这实际上给了我们每个case子句多个case表达式：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 23.4.4 Checking for illegal values via a `default` clause
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 23.4.4 通过`default`子句检查非法值
- en: 'A `default` clause is jumped to if the `switch` expression has no other match.
    That makes it useful for error checking:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`switch`表达式没有其他匹配项，就会跳转到`default`子句。这使得它对错误检查很有用：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Exercises: `switch`**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png) **练习：`switch`**'
- en: '`exercises/control-flow/number_to_month_test.mjs`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exercises/control-flow/number_to_month_test.mjs`'
- en: 'Bonus: `exercises/control-flow/is_object_via_switch_test.mjs`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 奖励：`exercises/control-flow/is_object_via_switch_test.mjs`
- en: 23.5 `while` loops [ES1]
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 23.5 `while`循环 [ES1]
- en: 'A `while` loop has the following syntax:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环有以下语法：'
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Before each loop iteration, `while` evaluates `condition`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次循环迭代之前，`while`评估`condition`：
- en: If the result is falsy, the loop is finished.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果结果为假，循环就结束了。
- en: If the result is truthy, the `while` body is executed one more time.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果结果为真，`while`体将再执行一次。
- en: 23.5.1 Examples of `while` loops
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 23.5.1 `while`循环的示例
- en: The following code uses a `while` loop. In each loop iteration, it removes the
    first element of `arr` via `.shift()` and logs it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码使用了`while`循环。在每次循环迭代中，它通过`.shift()`移除`arr`的第一个元素并记录它。
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If the condition always evaluates to `true`, then `while` is an infinite loop:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果条件总是评估为`true`，那么`while`就是一个无限循环：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 23.6 `do-while` loops [ES3]
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 23.6 `do-while`循环 [ES3]
- en: The `do-while` loop works much like `while`, but it checks its condition *after*
    each loop iteration, not before.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`do-while`循环的工作方式与`while`很像，但它在每次循环迭代之后检查条件，而不是之前。'
- en: '[PRE20]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`do-while` can also be viewed as a `while` loop that runs at least once.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`do-while`也可以被视为至少运行一次的`while`循环。'
- en: '[`prompt()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)
    is a global function that is available in web browsers. It prompts the user to
    input text and returns it.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[`prompt()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)是一个全局函数，在Web浏览器中可用。它提示用户输入文本并返回它。'
- en: 23.7 `for` loops [ES1]
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 23.7 `for`循环 [ES1]
- en: 'A `for` loop has the following syntax:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环有以下语法：'
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The first line is the *head* of the loop and controls how often the *body*
    (the remainder of the loop) is executed. It has three parts and each of them is
    optional:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行是循环的*head*，控制*body*（循环的其余部分）的执行次数。它有三个部分，每个部分都是可选的：
- en: '`initialization`: sets up variables, etc. for the loop. Variables declared
    here via `let` or `const` only exist inside the loop.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initialization`：为循环设置变量等。此处通过`let`或`const`声明的变量仅在循环内部存在。'
- en: '`condition`: This condition is checked before each loop iteration. If it is
    falsy, the loop stops.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`condition`：在每次循环迭代之前检查此条件。如果它是假的，循环就会停止。'
- en: '`post_iteration`: This code is executed after each loop iteration.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post_iteration`：此代码在每次循环迭代之后执行。'
- en: 'A `for` loop is therefore roughly equivalent to the following `while` loop:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`for`循环大致相当于以下`while`循环：
- en: '[PRE22]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 23.7.1 Examples of `for` loops
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 23.7.1 `for`循环的示例
- en: 'As an example, this is how to count from zero to two via a `for` loop:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是如何通过`for`循环从零数到两的：
- en: '[PRE23]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This is how to log the contents of an Array via a `for` loop:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何通过`for`循环记录数组的内容：
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If we omit all three parts of the head, we get an infinite loop:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们省略头的所有三个部分，我们就得到了一个无限循环：
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 23.8 `for-of` loops [ES6]
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 23.8 `for-of`循环 [ES6]
- en: 'A `for-of` loop iterates over any *iterable* – a data container that supports
    [the *iteration protocol*](ch_sync-iteration.html). Each iterated value is stored
    in a variable, as specified in the head:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`for-of`循环遍历任何*可迭代* - 支持*迭代协议*的数据容器。每个迭代的值都存储在变量中，如头部中指定的那样：'
- en: '[PRE26]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The iteration variable is usually created via a variable declaration:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代变量通常是通过变量声明创建的：
- en: '[PRE27]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'But we can also use a (mutable) variable that already exists:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们也可以使用一个（可变的）已经存在的变量：
- en: '[PRE28]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '23.8.1 `const`: `for-of` vs. `for`'
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 23.8.1 `const`：`for-of` vs. `for`
- en: Note that in `for-of` loops we can use `const`. The iteration variable can still
    be different for each iteration (it just can’t change during the iteration). Think
    of it as a new `const` declaration being executed each time in a fresh scope.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在`for-of`循环中，我们可以使用`const`。迭代变量仍然可以在每次迭代中不同（它只是在迭代期间不能更改）。可以将其视为在新的作用域中每次执行一个新的`const`声明。
- en: In contrast, in `for` loops we must declare variables via `let` or `var` if
    their values change.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，在`for`循环中，如果它们的值发生变化，我们必须通过`let`或`var`声明变量。
- en: 23.8.2 Iterating over iterables
  id: totrans-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 23.8.2 遍历可迭代对象
- en: 'As mentioned before, `for-of` works with any iterable object, not just with
    Arrays – for example, with Sets:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`for-of`适用于任何可迭代对象，而不仅仅是数组 - 例如，与Set一起使用：
- en: '[PRE29]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 23.8.3 Iterating over [index, element] pairs of Arrays
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 23.8.3 遍历数组的[index, element]对
- en: 'Lastly, we can also use `for-of` to iterate over the [index, element] entries
    of Arrays:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还可以使用`for-of`来遍历数组的[index, element]条目：
- en: '[PRE30]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: With `[index, element]`, we are using [*destructuring*](ch_destructuring.html)
    to access Array elements.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`[index, element]`，我们正在使用[*解构*](ch_destructuring.html)来访问数组元素。
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Exercise: `for-of`**'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **练习：`for-of`**'
- en: '`exercises/control-flow/array_to_string_test.mjs`'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`exercises/control-flow/array_to_string_test.mjs`'
- en: 23.9 `for-await-of` loops [ES2018]
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 23.9 `for-await-of`循环[ES2018]
- en: '`for-await-of` is like `for-of`, but it works with asynchronous iterables instead
    of synchronous ones. And it can only be used inside async functions and async
    generators.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`for-await-of`类似于`for-of`，但它适用于异步可迭代对象，而不是同步可迭代对象。它只能在异步函数和异步生成器内部使用。'
- en: '[PRE31]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '`for-await-of` is described in detail [in the chapter on asynchronous iteration](ch_async-iteration.html#for-await-of).'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`for-await-of`在[异步迭代章节](ch_async-iteration.html#for-await-of)中有详细描述。'
- en: 23.10 `for-in` loops (avoid) [ES1]
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 23.10 `for-in`循环（避免）[ES1]
- en: 'The `for-in` loop visits all (own and inherited) enumerable property keys of
    an object. When looping over an Array, it is rarely a good choice:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`for-in`循环访问对象的所有（自己的和继承的）可枚举属性键。在遍历数组时，这很少是一个好选择：'
- en: It visits property keys, not values.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它访问属性键，而不是值。
- en: As property keys, the indices of Array elements are strings, not numbers ([more
    information on how Array elements work](ch_arrays.html#array-indices)).
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为属性键，数组元素的索引是字符串，而不是数字（[有关数组元素工作原理的更多信息](ch_arrays.html#array-indices)）。
- en: It visits all enumerable property keys (both own and inherited ones), not just
    those of Array elements.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它访问所有可枚举的属性键（自己的和继承的），而不仅仅是数组元素的属性键。
- en: 'The following code demonstrates these points:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了这些要点：
- en: '[PRE32]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 23.11 Recomendations for looping
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 23.11 循环建议
- en: If you want to loop over an [asynchronous iterable](ch_async-iteration.html)
    (in ES2018+), you must use `for-await-of`.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果要循环遍历[异步可迭代对象](ch_async-iteration.html)（在ES2018+中），必须使用`for-await-of`。
- en: For looping over a synchronous iterable (in ES6+), you must use `for-of`. Note
    that Arrays are iterables.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要循环同步可迭代对象（在ES6+中），必须使用`for-of`。请注意，数组是可迭代对象。
- en: For looping over an Array in ES5+, you can use [the Array method `.forEach()`](ch_arrays.html#Array.prototype.forEach).
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要循环遍历ES5+中的数组，可以使用[数组方法`.forEach()`](ch_arrays.html#Array.prototype.forEach)。
- en: Before ES5, you can use a plain `for` loop to loop over an Array.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在ES5之前，您可以使用普通的`for`循环来遍历数组。
- en: Don’t use `for-in` to loop over an Array.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要使用`for-in`循环遍历数组。
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz**'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **测验**'
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[测验应用程序](ch_quizzes-exercises.html#quizzes)。
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/16)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/impatient-js/issues/16)'
