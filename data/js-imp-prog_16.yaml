- en: 13 Operators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13 运算符
- en: 原文：[https://exploringjs.com/impatient-js/ch_operators.html](https://exploringjs.com/impatient-js/ch_operators.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/impatient-js/ch_operators.html](https://exploringjs.com/impatient-js/ch_operators.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 13.1 [Making sense of operators](ch_operators.html#making-sense-of-operators)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 13.1 [理解运算符](ch_operators.html#making-sense-of-operators)
- en: 13.1.1 [Operators coerce their operands to appropriate types](ch_operators.html#operators-coerce-their-operands-to-appropriate-types)
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 13.1.1 [运算符将其操作数强制转换为适当的类型](ch_operators.html#operators-coerce-their-operands-to-appropriate-types)
- en: 13.1.2 [Most operators only work with primitive values](ch_operators.html#most-operators-only-work-with-primitive-values)
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 13.1.2 [大多数运算符只能用于原始值](ch_operators.html#most-operators-only-work-with-primitive-values)
- en: 13.2 [The plus operator (`+`)](ch_operators.html#the-plus-operator)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 13.2 [加法运算符 (`+`)](ch_operators.html#the-plus-operator)
- en: 13.3 [Assignment operators](ch_operators.html#assignment-operators)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 13.3 [赋值运算符](ch_operators.html#assignment-operators)
- en: 13.3.1 [The plain assignment operator](ch_operators.html#the-plain-assignment-operator)
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 13.3.1 [普通赋值运算符](ch_operators.html#the-plain-assignment-operator)
- en: 13.3.2 [Compound assignment operators](ch_operators.html#compound-assignment-operators)
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 13.3.2 [复合赋值运算符](ch_operators.html#compound-assignment-operators)
- en: '13.4 [Equality: `==` vs. `===`](ch_operators.html#equality-vs.)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 13.4 [相等：`==` vs. `===`](ch_operators.html#equality-vs.)
- en: 13.4.1 [Loose equality (`==` and `!=`)](ch_operators.html#loose-equality-and)
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 13.4.1 [宽松相等 (`==` 和 `!=`)](ch_operators.html#loose-equality-and)
- en: 13.4.2 [Strict equality (`===` and `!==`)](ch_operators.html#strict-equality)
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 13.4.2 [严格相等 (`===` 和 `!==`)](ch_operators.html#strict-equality)
- en: '13.4.3 [Recommendation: always use strict equality](ch_operators.html#recommendation-always-strict-equality)'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 13.4.3 [建议：始终使用严格相等](ch_operators.html#recommendation-always-strict-equality)
- en: '13.4.4 [Even stricter than `===`: `Object.is()`](ch_operators.html#Object.is)'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 13.4.4 [比 `===` 更严格：`Object.is()`](ch_operators.html#Object.is)
- en: 13.5 [Ordering operators](ch_operators.html#ordering-operators)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 13.5 [排序运算符](ch_operators.html#ordering-operators)
- en: 13.6 [Various other operators](ch_operators.html#various-other-operators)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 13.6 [其他各种运算符](ch_operators.html#various-other-operators)
- en: 13.6.1 [Comma operator](ch_operators.html#comma-operator)
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 13.6.1 [逗号运算符](ch_operators.html#comma-operator)
- en: 13.6.2 [`void` operator](ch_operators.html#void-operator)
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 13.6.2 [`void` 运算符](ch_operators.html#void-operator)
- en: '* * *'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 13.1 Making sense of operators
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 13.1 理解运算符
- en: 'JavaScript’s operators may seem quirky. With the following two rules, they
    are easier to understand:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的运算符可能看起来有些古怪。有了以下两条规则，它们就更容易理解：
- en: Operators coerce their operands to appropriate types
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运算符将其操作数强制转换为适当的类型
- en: Most operators only work with primitive values
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数运算符只能用于原始值
- en: 13.1.1 Operators coerce their operands to appropriate types
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 13.1.1 运算符将其操作数强制转换为适当的类型
- en: If an operator gets operands that don’t have the proper types, it rarely throws
    an exception. Instead, it *coerces* (automatically converts) the operands so that
    it can work with them. Let’s look at two examples.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运算符得到不正确类型的操作数，则很少抛出异常。相反，它会*强制*（自动转换）操作数，以便可以使用它们。让我们看两个例子。
- en: First, the multiplication operator can only work with numbers. Therefore, it
    converts strings to numbers before computing its result.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，乘法运算符只能用于数字。因此，在计算结果之前，它将字符串转换为数字。
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Second, the square brackets operator (`[ ]`) for accessing the properties of
    an object can only handle strings and symbols. All other values are coerced to
    string:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，用于访问对象属性的方括号运算符（`[ ]`）只能处理字符串和符号。所有其他值都被强制转换为字符串：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 13.1.2 Most operators only work with primitive values
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 13.1.2 大多数运算符只能用于原始值
- en: 'As mentioned before, most operators only work with primitive values. If an
    operand is an object, it is usually coerced to a primitive value – for example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，大多数运算符只能用于原始值。如果操作数是对象，则通常会被强制转换为原始值，例如：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Why? The plus operator first coerces its operands to primitive values:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么？加法运算符首先将其操作数强制转换为原始值：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, it concatenates the two strings:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，连接两个字符串：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 13.2 The plus operator (`+`)
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 13.2 加法运算符 (`+`)
- en: 'The plus operator works as follows in JavaScript:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，加法运算符的工作方式如下：
- en: 'First, it converts both operands to primitive values. Then it switches to one
    of two modes:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，它将两个操作数转换为原始值。然后切换到两种模式之一：
- en: 'String mode: If one of the two primitive values is a string, then it converts
    the other one to a string, concatenates both strings, and returns the result.'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串模式：如果两个原始值中有一个是字符串，则将另一个转换为字符串，连接两个字符串，并返回结果。
- en: 'Number mode: Otherwise, It converts both operands to numbers, adds them, and
    returns the result.'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字模式：否则，将两个操作数转换为数字，相加，并返回结果。
- en: 'String mode lets us use `+` to assemble strings:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串模式允许我们使用 `+` 来组装字符串：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Number mode means that if neither operand is a string (or an object that becomes
    a string) then everything is coerced to numbers:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 数字模式意味着如果没有一个操作数是字符串（或者是一个变成字符串的对象），那么一切都会被强制转换为数字：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`Number(true)` is `1`.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`Number(true)` 是 `1`。'
- en: 13.3 Assignment operators
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 13.3 赋值运算符
- en: 13.3.1 The plain assignment operator
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 13.3.1 普通赋值运算符
- en: 'The plain assignment operator is used to change storage locations:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 普通赋值运算符用于更改存储位置：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Initializers in variable declarations can also be viewed as a form of assignment:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 变量声明中的初始化器也可以看作是一种赋值：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 13.3.2 Compound assignment operators
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 13.3.2 复合赋值运算符
- en: 'JavaScript supports the following assignment operators:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript支持以下赋值运算符：
- en: 'Arithmetic assignment operators: `+= -= *= /= %=` [ES1]'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 算术赋值运算符：`+= -= *= /= %=` [ES1]
- en: '`+=` can also be used for string concatenation'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+=` 也可以用于字符串连接'
- en: 'Introduced later: `**=` [ES2016]'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后引入：`**=` [ES2016]
- en: 'Bitwise assignment operators: `&= ^= |=` [ES1]'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按位赋值运算符：`&= ^= |=` [ES1]
- en: 'Bitwise shift assignment operators: `<<= >>= >>>=` [ES1]'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按位移位赋值运算符：`<<= >>= >>>=` [ES1]
- en: 'Logical assignment operators: `||= &&= ??=` [ES2021]'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑赋值运算符：`||= &&= ??=` [ES2021]
- en: 13.3.2.1 Logical assignment operators [ES2021]
  id: totrans-61
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 13.3.2.1 逻辑赋值运算符 [ES2021]
- en: 'Logical assignment operators work differently from other compound assignment
    operators:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑赋值运算符与其他复合赋值运算符的工作方式不同：
- en: '| Assignment operator | Equivalent to | Only assigns if `a` is |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 赋值运算符 | 等同于 | 仅在 `a` 为时赋值 |'
- en: '| --- | --- | --- |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `a &#124;&#124;= b` | `a &#124;&#124; (a = b)` | Falsy |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `a &#124;&#124;= b` | `a &#124;&#124; (a = b)` | 假值 |'
- en: '| `a &&= b` | `a && (a = b)` | Truthy |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `a &&= b` | `a && (a = b)` | 真值 |'
- en: '| `a ??= b` | `a ?? (a = b)` | Nullish |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `a ??= b` | `a ?? (a = b)` | 空值 |'
- en: Why is `a ||= b` equivalent to the following expression?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么 `a ||= b` 等同于以下表达式？
- en: '`a || (a = b)`'
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`a || (a = b)`'
- en: Why not to this expression?
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不使用这个表达式？
- en: '`a = a || b`'
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`a = a || b`'
- en: 'The former expression has the benefit of [short-circuiting](ch_booleans.html#short-circuiting):
    The assignment is only evaluated if `a` evaluates to `false`. Therefore, the assignment
    is only performed if it’s necessary. In contrast, the latter expression always
    performs an assignment.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个表达式的好处在于 [短路](ch_booleans.html#short-circuiting)：只有在 `a` 评估为 `false` 时才会评估赋值。因此，只有在必要时才执行赋值。相反，后一个表达式总是执行赋值。
- en: For more on `??=`, see [§14.4.5 “The nullish coalescing assignment operator
    (`??=`) [ES2021]”](ch_undefined-null.html#nullish-coalescing-assignment-operator).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 `??=` 的更多信息，请参阅 [§14.4.5 “空值合并赋值运算符 (`??=`) [ES2021]”](ch_undefined-null.html#nullish-coalescing-assignment-operator)。
- en: 13.3.2.2 The remaining compound assignment operators
  id: totrans-74
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 13.3.2.2 剩余的复合赋值运算符
- en: 'For operators `op` other than `|| && ??`, the following two ways of assigning
    are equivalent:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于除 `|| && ??` 之外的操作符 `op`，以下两种赋值方式是等效的：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If, for example, `op` is `+`, then we get the operator `+=` that works as follows.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果 `op` 是 `+`，那么我们得到的运算符 `+=` 的工作方式如下。
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '13.4 Equality: `==` vs. `===`'
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 13.4 相等：`==` vs. `===`
- en: 'JavaScript has two kinds of equality operators: loose equality (`==`) and strict
    equality (`===`). The recommendation is to always use the latter.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 有两种类型的相等运算符：宽松相等 (`==`) 和严格相等 (`===`)。建议始终使用后者。
- en: '![](../Images/b666ba365e94edaf0ef510fd7e12c7de.png)  **Other names for `==`
    and `===`**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/b666ba365e94edaf0ef510fd7e12c7de.png)  **`==` 和 `===` 的其他名称**'
- en: '`==` is also called *double equals*. Its official name in the language specification
    is [*abstract equality comparison*](https://tc39.github.io/ecma262/#sec-abstract-equality-comparison).'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`==` 也被称为 *双等号*。它在语言规范中的官方名称是 [*抽象相等比较*](https://tc39.github.io/ecma262/#sec-abstract-equality-comparison)。'
- en: '`===` is also called *triple equals*.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`===` 也被称为 *三等号*。'
- en: 13.4.1 Loose equality (`==` and `!=`)
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 13.4.1 宽松相等 (`==` 和 `!=`)
- en: 'Loose equality is one of JavaScript’s quirks. It often coerces operands. Some
    of those coercions make sense:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 宽松相等是 JavaScript 的怪癖之一。它经常强制操作数。其中一些强制是有意义的：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Others less so:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 其他的不太一样：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Objects are coerced to primitives if (and only if!) the other operand is primitive:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果（且仅当！）另一个操作数是原始值，对象才会被强制为原始值：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If both operands are objects, they are only equal if they are the same object:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个操作数都是对象，则只有当它们是同一个对象时才相等：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Lastly, `==` considers `undefined` and `null` to be equal:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`==` 认为 `undefined` 和 `null` 是相等的：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 13.4.2 Strict equality (`===` and `!==`)
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 13.4.2 严格相等 (`===` 和 `!==`)
- en: 'Strict equality never coerces. Two values are only equal if they have the same
    type. Let’s revisit our previous interaction with the `==` operator and see what
    the `===` operator does:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 严格相等从不强制。只有当它们具有相同的类型时，两个值才相等。让我们重新审视我们与 `==` 运算符的先前交互，并看看 `===` 运算符的作用：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'An object is only equal to another value if that value is the same object:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当对象等于另一个值时，该对象才等于另一个值：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `===` operator does not consider `undefined` and `null` to be equal:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`===` 运算符不认为 `undefined` 和 `null` 是相等的：'
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '13.4.3 Recommendation: always use strict equality'
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 13.4.3 建议：始终使用严格相等
- en: I recommend to always use `===`. It makes your code easier to understand and
    spares you from having to think about the quirks of `==`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议始终使用 `===`。它使您的代码更易于理解，并避免了对 `==` 的怪癖进行思考。
- en: Let’s look at two use cases for `==` and what I recommend to do instead.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `==` 的两个用例以及我建议做的替代方案。
- en: '13.4.3.1 Use case for `==`: comparing with a number or a string'
  id: totrans-105
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 13.4.3.1 `==` 的用例：与数字或字符串比较
- en: '`==` lets you check if a value `x` is a number or that number as a string –
    with a single comparison:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`==` 让你检查一个值 `x` 是否是一个数字或该数字的字符串 - 只需一次比较：'
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'I prefer either of the following two alternatives:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我更喜欢以下两种替代方案之一：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You can also convert `x` to a number when you first encounter it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次遇到 `x` 时，您也可以将其转换为数字。
- en: '13.4.3.2 Use case for `==`: comparing with `undefined` or `null`'
  id: totrans-111
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 13.4.3.2 `==` 的用例：与 `undefined` 或 `null` 比较
- en: 'Another use case for `==` is to check if a value `x` is either `undefined`
    or `null`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`==` 的另一个用例是检查值 `x` 是否为 `undefined` 或 `null`：'
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The problem with this code is that you can’t be sure if someone meant to write
    it that way or if they made a typo and meant `=== null`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的问题在于您无法确定某人是否打算以这种方式编写它，还是是否打错了字，打算使用 `=== null`。
- en: 'I prefer either of the following two alternatives:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我更喜欢以下两种替代方案之一：
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: A downside of the second alternative is that it accepts values other than `undefined`
    and `null`, but it is a well-established pattern in JavaScript (to be explained
    in detail in [§15.3 “Truthiness-based existence checks”](ch_booleans.html#truthiness-existence-checks)).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种替代方案的缺点是它接受除 `undefined` 和 `null` 之外的值，但这是 JavaScript 中一个成熟的模式（将在 [§15.3
    “基于真值的存在性检查”](ch_booleans.html#truthiness-existence-checks) 中详细解释）。
- en: 'The following three conditions are also roughly equivalent:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以下三个条件也大致等效：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '13.4.4 Even stricter than `===`: `Object.is()`'
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 13.4.4 比 `===` 更严格：`Object.is()`
- en: 'Method `Object.is()` compares two values:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object.is()` 方法比较两个值：'
- en: '[PRE24]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'It is even stricter than `===`. For example, it considers `NaN`, [the error
    value for computations involving numbers](ch_numbers.html#nan), to be equal to
    itself:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 它甚至比 `===` 更严格。例如，它认为 `NaN`，[涉及数字的计算的错误值](ch_numbers.html#nan)，等于它自己：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'That is occasionally useful. For example, you can use it to implement an improved
    version of the Array method `.indexOf()`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这偶尔是有用的。例如，您可以使用它来实现 `.indexOf()` 的改进版本：
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`myIndexOf()` finds `NaN` in an Array, while `.indexOf()` doesn’t:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`myIndexOf()` 在数组中查找 `NaN`，而 `.indexOf()` 不会：'
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The result `-1` means that `.indexOf()` couldn’t find its argument in the Array.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 结果 `-1` 表示 `.indexOf()` 在数组中找不到其参数。
- en: 13.5 Ordering operators
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 13.5 排序运算符
- en: 'Table 3: JavaScript’s ordering operators.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 表3：JavaScript 的排序运算符。
- en: '| Operator | name |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 名称 |'
- en: '| --- | --- |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `<` | less than |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `<` | 小于 |'
- en: '| `<=` | Less than or equal |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `<=` | 小于或等于 |'
- en: '| `>` | Greater than |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `>` | 大于 |'
- en: '| `>=` | Greater than or equal |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `>=` | 大于或等于 |'
- en: 'JavaScript’s ordering operators (tbl. [3](#tbl:ordering_operators)) work for
    both numbers and strings:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的排序运算符（表[3](#tbl:ordering_operators)）适用于数字和字符串：
- en: '[PRE28]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`<=` and `>=` are based on strict equality.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`<=` 和 `>=` 基于严格相等。'
- en: '![](../Images/0ac255e56dc93a43365d8502301c8688.png)  **The ordering operators
    don’t work well for human languages**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0ac255e56dc93a43365d8502301c8688.png)  **排序运算符在人类语言中效果不佳**'
- en: The ordering operators don’t work well for comparing text in a human language,
    e.g., when capitalization or accents are involved. The details are explained in
    [§20.6 “Comparing strings”](ch_strings.html#comparing-strings).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 排序运算符在比较人类语言的文本时效果不佳，例如，当涉及大写或重音时。详细信息请参见[§20.6 “比较字符串”](ch_strings.html#comparing-strings)。
- en: 13.6 Various other operators
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 13.6 其他各种运算符
- en: 'The following operators are covered elsewhere in this book:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的其他地方涵盖了以下运算符：
- en: Operators for [booleans](ch_booleans.html), [numbers](ch_numbers.html), [strings](ch_strings.html),
    [objects](ch_objects.html)
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[布尔值](ch_booleans.html)、[数字](ch_numbers.html)、[字符串](ch_strings.html)、[对象](ch_objects.html)的运算符'
- en: '[The nullish coalescing operator (`??`) for default values](ch_undefined-null.html#nullish-coalescing-operator)'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[空值合并运算符 (`??`) 用于默认值](ch_undefined-null.html#nullish-coalescing-operator)'
- en: The next two subsections discuss two operators that are rarely used.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个小节讨论了两个很少使用的运算符。
- en: 13.6.1 Comma operator
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 13.6.1 逗号运算符
- en: 'The comma operator has two operands, evaluates both of them and returns the
    second one:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 逗号运算符有两个操作数，评估它们两个并返回第二个：
- en: '[PRE29]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: For more information on this operator, see [*Speaking JavaScript*](http://speakingjs.com/es5/ch09.html#comma_operator).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此运算符的更多信息，请参见[*Speaking JavaScript*](http://speakingjs.com/es5/ch09.html#comma_operator)。
- en: 13.6.2 `void` operator
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 13.6.2 `void` 运算符
- en: 'The `void` operator evaluates its operand and returns `undefined`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`void` 运算符评估其操作数并返回 `undefined`：'
- en: '[PRE30]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: For more information on this operator, see [*Speaking JavaScript*](http://speakingjs.com/es5/ch09.html#void_operator).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此运算符的更多信息，请参见[*Speaking JavaScript*](http://speakingjs.com/es5/ch09.html#void_operator)。
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz**'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **测验**'
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[测验应用](ch_quizzes-exercises.html#quizzes)。
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/8)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/impatient-js/issues/8)'
