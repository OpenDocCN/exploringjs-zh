- en: 4 New JavaScript features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4 新的JavaScript功能
- en: 原文：[https://exploringjs.com/impatient-js/ch_new-javascript-features.html](https://exploringjs.com/impatient-js/ch_new-javascript-features.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/impatient-js/ch_new-javascript-features.html](https://exploringjs.com/impatient-js/ch_new-javascript-features.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 4.1 [New in ECMAScript 2022](ch_new-javascript-features.html#new-in-es2022)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4.1 ECMAScript 2022中的新功能
- en: 4.2 [New in ECMAScript 2021](ch_new-javascript-features.html#new-in-es2021)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4.2 ECMAScript 2021中的新功能
- en: 4.3 [New in ECMAScript 2020](ch_new-javascript-features.html#new-in-es2020)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4.3 ECMAScript 2020中的新功能
- en: 4.4 [New in ECMAScript 2019](ch_new-javascript-features.html#new-in-es2019)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4.4 ECMAScript 2019中的新功能
- en: 4.5 [New in ECMAScript 2018](ch_new-javascript-features.html#new-in-es2018)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4.5 ECMAScript 2018中的新功能
- en: 4.6 [New in ECMAScript 2017](ch_new-javascript-features.html#new-in-es2017)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4.6 ECMAScript 2017中的新功能
- en: 4.7 [New in ECMAScript 2016](ch_new-javascript-features.html#new-in-es2016)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4.7 ECMAScript 2016中的新功能
- en: 4.8 [Source of this chapter](ch_new-javascript-features.html#source-of-this-chapter)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4.8 本章的来源
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This chapter lists what’s new in ES2016–ES2022 in reverse chronological order.
    It starts after ES2015 (ES6) because that release has too many features to list
    here.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章以逆序列出了ES2016–ES2022中的新功能。它在ES2015（ES6）之后开始，因为该版本具有太多功能无法在此列出。
- en: 4.1 New in ECMAScript 2022
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.1 ECMAScript 2022中的新功能
- en: 'ES2022 will probably become a standard in June 2022\. The following proposals
    have reached stage 4 and are scheduled to be part of that standard:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: ES2022可能会在2022年6月成为标准。以下提案已经达到了第4阶段，并计划成为该标准的一部分：
- en: 'New members of classes:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类的新成员：
- en: 'Properties (public slots) can now be created via:'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在可以通过以下方式创建属性（公共槽）：
- en: '[Instance public fields](ch_classes.html#instance-public-fields)'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[实例公共字段](ch_classes.html#instance-public-fields)'
- en: '[Static public fields](ch_classes.html#static-public-fields)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[静态公共字段](ch_classes.html#static-public-fields)'
- en: '[Private slots](ch_classes.html#private-slots) are new and can be created via:'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[私有槽](ch_classes.html#private-slots)是新的，可以通过以下方式创建：'
- en: Private fields ([instance private fields](ch_classes.html#instance-private-fields)
    and [static private fields](ch_classes.html#static-private-methods-accessors-fields))
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有字段（[实例私有字段](ch_classes.html#instance-private-fields)和[静态私有字段](ch_classes.html#static-private-methods-accessors-fields)）
- en: Private methods and accessors ([non-static](ch_classes.html#private-methods-accessors)
    and [static](ch_classes.html#static-private-methods-accessors-fields))
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有方法和访问器（[非静态](ch_classes.html#private-methods-accessors)和[静态](ch_classes.html#static-private-methods-accessors-fields)）
- en: '[Static initialization blocks](ch_classes.html#class-static-initialization-blocks)'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[静态初始化块](ch_classes.html#class-static-initialization-blocks)'
- en: '[Private slot checks](ch_classes.html#private-slot-checks) (“ergonomic brand
    checks for private fields”): The following expression checks if `obj` has a private
    slot `#privateSlot`:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[私有槽检查](ch_classes.html#private-slot-checks)（“私有字段的人性化品牌检查”）：以下表达式检查`obj`是否具有私有槽`#privateSlot`：'
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Top-level `await` in modules](ch_modules.html#top-level-await): We can now
    use `await` at the top levels of modules and don’t have to enter async functions
    or methods anymore.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[模块中的顶层`await`](ch_modules.html#top-level-await)：我们现在可以在模块的顶层使用`await`，不再需要进入异步函数或方法。'
- en: '[`error.cause`](ch_exception-handling.html#error.cause): `Error` and its subclasses
    now let us specify which error caused the current one:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`error.cause`](ch_exception-handling.html#error.cause)：`Error`及其子类现在让我们指定导致当前错误的错误：'
- en: '[PRE1]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[Method `.at()` of indexable values](ch_arrays.html#Array.prototype.at) lets
    us read an element at a given index (like the bracket operator `[]`) and supports
    negative indices (unlike the bracket operator).'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引值的方法`.at()`（ch_arrays.html#Array.prototype.at）允许我们在给定索引处读取元素（类似于括号运算符`[]`），并支持负索引（与括号运算符不同）。
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following “indexable” types have method `.at()`:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下“可索引”类型具有方法`.at()`：
- en: '`string`'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string`'
- en: '`Array`'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Array`'
- en: 'All Typed Array classes: `Uint8Array` etc.'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有Typed Array类：`Uint8Array`等。
- en: '[RegExp match indices](ch_regexps.html#regexp-match-indices): If we add a flag
    to a regular expression, using it produces match objects that record the start
    and end index of each group capture.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[RegExp匹配索引](ch_regexps.html#regexp-match-indices)：如果我们向正则表达式添加一个标志，使用它会产生记录每个组捕获的开始和结束索引的匹配对象。'
- en: '[`Object.hasOwn(obj, propKey)`](ch_objects.html#Object.hasOwn) provides a safe
    way to check if an object `obj` has an own property with the key `propKey`. In
    contrast to `Object.prototype.hasOwnProperty`, it works with all objects.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Object.hasOwn(obj, propKey)`](ch_objects.html#Object.hasOwn)提供了一种安全的方式来检查对象`obj`是否具有键`propKey`的自有属性。与`Object.prototype.hasOwnProperty`相比，它适用于所有对象。'
- en: '![](../Images/0ac255e56dc93a43365d8502301c8688.png)  **More features may still
    be added to ES2022**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0ac255e56dc93a43365d8502301c8688.png) **ES2022可能还会添加更多功能**'
- en: If that happens, this book will be updated accordingly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发生这种情况，本书将相应地进行更新。
- en: 4.2 New in ECMAScript 2021
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.2 ECMAScript 2021中的新功能
- en: 'The following features were added in ECMAScript 2021:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下功能是在ECMAScript 2021中添加的：
- en: '[`String.prototype.replaceAll()`](ch_regexps.html#replace-replaceAll) lets
    us replace all matches of a regular expression or a string (`.replace()` only
    replaces the first occurrence of a string):'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`String.prototype.replaceAll()`](ch_regexps.html#replace-replaceAll)允许我们替换正则表达式或字符串的所有匹配项（`.replace()`只替换字符串的第一个出现）：'
- en: '[PRE3]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[`Promise.any()` and `AggregateError`](ch_promises.html#Promise.any-AggregateError):
    `Promise.any()` returns a Promise that is fulfilled as soon as the first Promise
    in an iterable of Promises is fulfilled. If there are only rejections, they are
    put into an `AggregateError` which becomes the rejection value.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Promise.any()`和`AggregateError`](ch_promises.html#Promise.any-AggregateError)：`Promise.any()`返回一个Promise，一旦可迭代的Promise中的第一个Promise被满足，它就会被满足。如果只有拒绝，它们将被放入一个`AggregateError`，成为拒绝值。'
- en: We use `Promise.any()` when we are only interested in the first fulfilled Promise
    among several.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们只对多个已完成的Promise中的第一个感兴趣时，我们使用`Promise.any()`。
- en: '[Logical assignment operators](ch_operators.html#logical-assignment-operators):'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[逻辑赋值运算符](ch_operators.html#logical-assignment-operators)：'
- en: '[PRE4]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Underscores (`_`) as separators in:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在以下情况下使用下划线(`_`)作为分隔符：
- en: '[Number literals](ch_numbers.html#numeric-separator-number-literals): `123_456.789_012`'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数字字面量](ch_numbers.html#numeric-separator-number-literals): `123_456.789_012`'
- en: '[Bigint literals](ch_bigints.html#numeric-separator-bigint-literals): `6_000_000_000_000_000_000_000_000n`'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[大整数字面量](ch_bigints.html#numeric-separator-bigint-literals): `6_000_000_000_000_000_000_000_000n`'
- en: 'WeakRefs: This feature is beyond the scope of this book. For more information
    on it, see [its proposal](https://github.com/tc39/proposal-weakrefs).'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'WeakRefs: 这个特性超出了本书的范围。有关更多信息，请参阅[其提案](https://github.com/tc39/proposal-weakrefs)。'
- en: 4.3 New in ECMAScript 2020
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.3 ECMAScript 2020中的新功能
- en: 'The following features were added in ECMAScript 2020:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下功能是在ECMAScript 2020中添加的：
- en: 'New module features:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新模块功能：
- en: '[Dynamic imports via `import()`](ch_modules.html#dynamic-imports): The normal
    `import` statement is static: We can only use it at the top levels of modules
    and its module specifier is a fixed string. `import()` changes that. It can be
    used anywhere (including conditional statements) and we can compute its argument.'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`import()`动态导入：普通的`import`语句是静态的：我们只能在模块的顶层使用它，其模块说明符是一个固定的字符串。`import()`改变了这一点。它可以在任何地方使用（包括条件语句），并且我们可以计算其参数。
- en: '[`import.meta`](ch_modules.html#import.meta) contains metadata for the current
    module. Its first widely supported property is `import.meta.url` which contains
    a string with the URL of the current module’s file.'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`import.meta`](ch_modules.html#import.meta)包含当前模块的元数据。它的第一个广泛支持的属性是`import.meta.url`，其中包含当前模块文件的URL字符串。'
- en: '[Namespace re-exporting](ch_modules.html#module-exports): The following expression
    imports all exports of module `''mod''` in a namespace object `ns` and exports
    that object.'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[命名空间重新导出](ch_modules.html#module-exports): 以下表达式将模块`''mod''`的所有导出导入到命名空间对象`ns`中，并导出该对象。'
- en: '[PRE5]'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[Optional chaining for property accesses and method calls](ch_objects.html#optional-chaining).
    One example of optional chaining is:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选链式调用用于属性访问和方法调用。一个可选链式调用的例子是：
- en: '[PRE6]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This expression evaluates to `undefined` if `value` is either `undefined` or
    `null`. Otherwise, it evaluates to `value.prop`. This feature is especially useful
    in chains of property reads when some of the properties may be missing.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`value`是`undefined`或`null`，则该表达式的值为`undefined`。否则，它的值为`value.prop`。这个特性在属性链中的一些属性可能缺失时特别有用。
- en: '[Nullish coalescing operator (`??`)](ch_undefined-null.html#nullish-coalescing-operator):'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[空值合并运算符(`??`)](ch_undefined-null.html#nullish-coalescing-operator):'
- en: '[PRE7]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This expression is `defaultValue` if `value` is either `undefined` or `null`
    and `value` otherwise. This operator lets us use a default value whenever something
    is missing.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`value`是`undefined`或`null`，则该表达式为`defaultValue`，否则为`value`。这个运算符让我们在某些东西缺失时使用默认值。
- en: Previously the Logical Or operator (`||`) was used in this case but it has downsides
    here because it returns the default value whenever the left-hand side is falsy
    (which isn’t always correct).
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以前在这种情况下使用逻辑或运算符(`||`)，但它在这里有缺点，因为每当左侧为假值时它就返回默认值（这并不总是正确的）。
- en: '[Bigints – arbitrary-precision integers](ch_bigints.html): Bigints are a new
    primitive type. It supports integer numbers that can be arbitrarily large (storage
    for them grows as necessary).'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[大整数 - 任意精度整数](ch_bigints.html): 大整数是一种新的原始类型。它支持可以任意大的整数（存储空间会根据需要增长）。'
- en: '[`String.prototype.matchAll()`](ch_regexps.html#String.prototype.matchAll):
    This method throws if flag `/g` isn’t set and returns an iterable with all match
    objects for a given string.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`String.prototype.matchAll()`](ch_regexps.html#String.prototype.matchAll):
    如果标志`/g`未设置，则此方法会抛出异常，并返回给定字符串的所有匹配对象的可迭代对象。'
- en: '[`Promise.allSettled()`](ch_promises.html#Promise.allSettled) receives an iterable
    of Promises. It returns a Promise that is fulfilled once all the input Promises
    are settled. The fulfillment value is an Array with one object per input Promise
    – either one of:'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Promise.allSettled()`](ch_promises.html#Promise.allSettled)接收一个Promise的可迭代对象。它返回一个Promise，一旦所有输入的Promise都被解决，就会被满足。满足值是一个数组，每个输入Promise对应一个对象，要么是：'
- en: '`{ status: ''fulfilled'', value: «fulfillment value» }`'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{ status: ''fulfilled'', value: «fulfillment value» }`'
- en: '`{ status: ''rejected'', reason: «rejection value» }`'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{ status: ''rejected'', reason: «rejection value» }`'
- en: '[`globalThis`](ch_variables-assignment.html#globalThis) provides a way to access
    the global object that works both on browsers and server-side platforms such as
    Node.js and Deno.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`globalThis`](ch_variables-assignment.html#globalThis)提供了一种访问全局对象的方式，可以在浏览器和Node.js、Deno等服务器端平台上使用。'
- en: '`for-in` mechanics: This feature is beyond the scope of this book. For more
    information on it, see [its proposal](https://github.com/tc39/proposal-for-in-order).'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for-in`机制：这个特性超出了本书的范围。有关更多信息，请参阅[其提案](https://github.com/tc39/proposal-for-in-order)。'
- en: 4.4 New in ECMAScript 2019
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.4 ECMAScript 2019中的新功能
- en: 'The following features were added in ECMAScript 2019:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下功能是在ECMAScript 2019中添加的：
- en: 'Array method [`.flatMap()`](ch_arrays.html#Array.prototype.flatMap) works like
    `.map()` but lets the callback return Arrays of zero or more values instead of
    single values. The returned Arrays are then concatenated and become the result
    of `.flatMap()`. Use cases include:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组方法[`.flatMap()`](ch_arrays.html#Array.prototype.flatMap)类似于`.map()`，但让回调函数返回零个或多个值的数组，而不是单个值。然后返回的数组被连接在一起，成为`.flatMap()`的结果。使用案例包括：
- en: Filtering and mapping at the same time
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时进行过滤和映射
- en: Mapping single input values to multiple output values
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将单个输入值映射到多个输出值
- en: Array method [`.flat()`](ch_arrays.html#Array.prototype.flat) converts nested
    Arrays into flat Arrays. Optionally, we can tell it at which depth of nesting
    it should stop flattening.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组方法[`.flat()`](ch_arrays.html#Array.prototype.flat)将嵌套的数组转换为扁平数组。可选地，我们可以告诉它在哪个嵌套深度停止扁平化。
- en: '[`Object.fromEntries()`](ch_objects.html#Object.fromEntries) creates an object
    from an iterable over *entries*. Each entry is a two-element Array with a property
    key and a property value.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Object.fromEntries()`](ch_objects.html#Object.fromEntries)从*entries*的可迭代对象中创建一个对象。每个条目都是一个包含属性键和属性值的两元素数组。'
- en: 'String methods: [`.trimStart()`](ch_strings.html#String.prototype.trimStart)
    and [`.trimEnd()`](ch_strings.html#String.prototype.trimEnd) work like `.trim()`
    but remove whitespace only at the start or only at the end of a string.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串方法：[`.trimStart()`](ch_strings.html#String.prototype.trimStart)和[`.trimEnd()`](ch_strings.html#String.prototype.trimEnd)的工作方式类似于`.trim()`，但仅删除字符串的开头或结尾处的空格。
- en: '[Optional `catch` binding](ch_exception-handling.html#omitting-catch-binding):
    We can now omit the parameter of a `catch` clause if we don’t use it.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[可选的`catch`绑定](ch_exception-handling.html#omitting-catch-binding)：如果我们不使用`catch`子句的参数，现在可以省略它。'
- en: '[`Symbol.prototype.description`](ch_symbols.html#symbol-descriptions) is a
    getter for reading the description of a symbol. Previously, the description was
    included in the result of `.toString()` but couldn’t be accessed individually.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Symbol.prototype.description`](ch_symbols.html#symbol-descriptions)是用于读取符号描述的getter。以前，描述包含在`.toString()`的结果中，但无法单独访问。'
- en: 'These new ES2019 features are beyond the scope of this book:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些新的ES2019功能超出了本书的范围：
- en: 'JSON superset: See [2ality blog post](https://2ality.com/2019/01/json-superset.html).'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON超集：参见[2ality博客文章](https://2ality.com/2019/01/json-superset.html)。
- en: 'Well-formed `JSON.stringify()`: See [2ality blog post](https://2ality.com/2019/01/well-formed-stringify.html).'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式良好的`JSON.stringify()`：参见[2ality博客文章](https://2ality.com/2019/01/well-formed-stringify.html)。
- en: '`Function.prototype.toString()` revision: See [2ality blog post](https://2ality.com/2016/08/function-prototype-tostring.html).'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Function.prototype.toString()`修订：参见[2ality博客文章](https://2ality.com/2016/08/function-prototype-tostring.html)。'
- en: 4.5 New in ECMAScript 2018
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.5 ECMAScript 2018中的新功能
- en: 'The following features were added in ECMAScript 2018:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下功能是在ECMAScript 2018中添加的：
- en: '[Asynchronous iteration](ch_async-iteration.html) is the asynchronous version
    of synchronous iteration. It is based on Promises:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[异步迭代](ch_async-iteration.html)是同步迭代的异步版本。它基于Promises：'
- en: With synchronous iterables, we can immediately access each item. With asynchronous
    iterables, we have to `await` before we can access an item.
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用同步可迭代对象，我们可以立即访问每个项目。使用异步可迭代对象，我们必须在访问项目之前进行`await`。
- en: With synchronous iterables, we use `for-of` loops. With asynchronous iterables,
    we use `for-await-of` loops.
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用同步可迭代对象，我们使用`for-of`循环。使用异步可迭代对象，我们使用`for-await-of`循环。
- en: '[Spreading into object literals](ch_objects.html#spreading-into-object-literals):
    By using spreading (`...`) inside an object literal, we can copy the properties
    of another object into the current one. One use case is to create a shallow copy
    of an object `obj`:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[扩展到对象文字中](ch_objects.html#spreading-into-object-literals)：通过在对象文字中使用扩展（`...`），我们可以将另一个对象的属性复制到当前对象中。一个用例是创建对象`obj`的浅拷贝：'
- en: '[PRE8]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Rest properties (destructuring)](ch_destructuring.html#rest-properties): When
    object-destructuring a value, we can now use rest syntax (`...`) to get all previously
    unmentioned properties in an object.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[剩余属性（解构）](ch_destructuring.html#rest-properties)：在对象解构值时，我们现在可以使用剩余语法（`...`）来获取对象中所有未提及的属性。'
- en: '[PRE9]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[`Promise.prototype.finally()`](ch_promises.html#Promise.prototype.finally)
    is related to the `finally` clause of a try-catch-finally statement – similarly
    to how the Promise method `.then()` is related to the `try` clause and `.catch()`
    is related to the `catch` clause.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Promise.prototype.finally()`](ch_promises.html#Promise.prototype.finally)与try-catch-finally语句的`finally`子句相关联，类似于Promise方法`.then()`与`try`子句相关联，`.catch()`与`catch`子句相关联。'
- en: 'On other words: The callback of `.finally()` is executed regardless of whether
    a Promise is fulfilled or rejected.'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 换句话说：`.finally()`的回调无论Promise是被兑现还是被拒绝都会执行。
- en: 'New Regular expression features:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的正则表达式功能：
- en: '[`RegExp` named capture groups](ch_regexps.html#named-capture-groups): In addition
    to accessing groups by number, we can now name them and access them by name:'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`RegExp`命名捕获组](ch_regexps.html#named-capture-groups)：除了通过编号访问组外，我们现在可以对它们进行命名并通过名称访问它们：'
- en: '[PRE10]'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[`RegExp` lookbehind assertions](ch_regexps.html#regexp-lookbehind-assertions)
    complement lookahead assertions:'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`RegExp`后瞻断言](ch_regexps.html#regexp-lookbehind-assertions)补充了前瞻断言：'
- en: 'Positive lookbehind: `(?<=X)` matches if the current location is preceded by
    `''X''`.'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正向后瞻：`(?<=X)`匹配当前位置是否由`'X'`前导。
- en: 'Negative lookbehind: `(?<!X)` matches if the current location is not preceded
    by `''(?<!X)''`.'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负向后瞻：`(?<!X)`匹配当前位置是否不是由`'(?<!X)'`前导。
- en: '[`s` (`dotAll`) flag for regular expressions](ch_regexps.html#regexp-dotAll-flag).
    If this flag is active, the dot matches line terminators (by default, it doesn’t).'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[正则表达式的`s`（`dotAll`）标志](ch_regexps.html#regexp-dotAll-flag)。如果此标志激活，则点匹配行终止符（默认情况下不匹配）。'
- en: '[`RegExp` Unicode property escapes](ch_regexps.html#unicode-property-escapes)
    give us more power when matching sets of Unicode code points – for example:'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`RegExp` Unicode属性转义](ch_regexps.html#unicode-property-escapes)在匹配一组Unicode代码点时给我们更多的权力，例如：'
- en: '[PRE11]'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[Template literal revision](ch_template-literals.html#template-strings-cooked-vs-raw)
    allows text with backslashes in tagged templates that is illegal in string literals
    – for example:'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[模板文字修订](ch_template-literals.html#template-strings-cooked-vs-raw)允许在标记模板中使用带反斜杠的文本，这在字符串文字中是非法的，例如：'
- en: '[PRE12]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 4.6 New in ECMAScript 2017
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.6 ECMAScript 2017中的新功能
- en: 'The following features were added in ECMAScript 2017:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下功能是在ECMAScript 2017中添加的：
- en: '[Async functions (`async/await`)](ch_async-functions.html) let us use synchronous-looking
    syntax to write asynchronous code.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步函数（`async/await`）让我们使用看起来同步的语法来编写异步代码。
- en: '[`Object.values()`](ch_objects.html#Object.values) returns an Array with the
    values of all enumerable string-keyed properties of a given object.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Object.values()`](ch_objects.html#Object.values)返回一个包含给定对象的所有可枚举字符串键属性的值的数组。'
- en: '[`Object.entries()`](ch_objects.html#Object.entries) returns an Array with
    the key-value pairs of all enumerable string-keyed properties of a given object.
    Each pair is encoded as a two-element Array.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Object.entries()`](ch_objects.html#Object.entries)返回一个包含给定对象的所有可枚举字符串键属性的键值对的数组。每对都被编码为一个两元素数组。'
- en: 'String padding: The string methods [`.padStart()`](ch_strings.html#String.prototype.padStart)
    and [`.padEnd()`](ch_strings.html#String.prototype.padEnd) insert padding text
    until the receivers are long enough:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串填充：字符串方法 [`.padStart()`](ch_strings.html#String.prototype.padStart) 和 [`.padEnd()`](ch_strings.html#String.prototype.padEnd)
    插入填充文本，直到接收者足够长：
- en: '[PRE13]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[Trailing commas in function parameter lists and calls](ch_callables.html#trailing-commas-parameters):
    Trailing commas have been allowed in Arrays literals since ES3 and in Object literals
    since ES5\. They are now also allowed in function calls and method calls.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数参数列表和调用中的尾随逗号（ch_callables.html#trailing-commas-parameters）：自 ES3 起，数组文字中允许尾随逗号，自
    ES5 起，对象文字中也允许。现在也允许在函数调用和方法调用中使用。
- en: 'The following two features are beyond the scope of this book:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下两个特性超出了本书的范围：
- en: '`Object.getOwnPropertyDescriptors()` (see [“Deep JavaScript”](https://exploringjs.com/deep-js/ch_property-attributes-intro.html#Object.getOwnPropertyDescriptors))'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object.getOwnPropertyDescriptors()`（参见 [“深入理解 JavaScript”](https://exploringjs.com/deep-js/ch_property-attributes-intro.html#Object.getOwnPropertyDescriptors)）'
- en: Shared memory and atomics (see [proposal](https://github.com/tc39/ecmascript_sharedmem))
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享内存和原子操作（参见 [提案](https://github.com/tc39/ecmascript_sharedmem)）
- en: 4.7 New in ECMAScript 2016
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.7 ECMAScript 2016 新特性
- en: 'The following features were added in ECMAScript 2016:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下特性是在 ECMAScript 2016 中添加的：
- en: '[`Array.prototype.includes()`](ch_arrays.html#Array.prototype.includes) checks
    if an Array contains a given value.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Array.prototype.includes()`](ch_arrays.html#Array.prototype.includes) 检查数组是否包含给定值。'
- en: '[Exponentiation operator (`**`)](ch_numbers.html#binary-arithmetic-operators):'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[指数运算符 (`**`)](ch_numbers.html#binary-arithmetic-operators):'
- en: '[PRE14]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 4.8 Source of this chapter
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.8 本章来源
- en: ECMAScript feature lists were taken from [the TC39 page on finished proposals](https://github.com/tc39/proposals/blob/master/finished-proposals.md).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 特性列表来自 [TC39 关于已完成提案的页面](https://github.com/tc39/proposals/blob/master/finished-proposals.md)。
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/52)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/impatient-js/issues/52)'
