- en: '32 Typed Arrays: handling binary data (advanced)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 32 Typed Arrays：处理二进制数据（高级）
- en: 原文：[https://exploringjs.com/impatient-js/ch_typed-arrays.html](https://exploringjs.com/impatient-js/ch_typed-arrays.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/impatient-js/ch_typed-arrays.html](https://exploringjs.com/impatient-js/ch_typed-arrays.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 32.1 [The basics of the API](ch_typed-arrays.html#the-basics-of-the-api)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.1 API的基础](ch_typed-arrays.html#the-basics-of-the-api)
- en: 32.1.1 [Use cases for Typed Arrays](ch_typed-arrays.html#use-cases-for-typed-arrays)
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.1.1 Typed Arrays的用例](ch_typed-arrays.html#use-cases-for-typed-arrays)
- en: '32.1.2 [The core classes: `ArrayBuffer`, Typed Arrays, `DataView`](ch_typed-arrays.html#the-core-classes-arraybuffer-typed-arrays-dataview)'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.1.2 核心类：`ArrayBuffer`、Typed Arrays、`DataView`](ch_typed-arrays.html#the-core-classes-arraybuffer-typed-arrays-dataview)
- en: 32.1.3 [Using Typed Arrays](ch_typed-arrays.html#using-typed-arrays)
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.1.3 使用Typed Arrays](ch_typed-arrays.html#using-typed-arrays)
- en: 32.1.4 [Using DataViews](ch_typed-arrays.html#using-dataviews)
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.1.4 使用DataViews](ch_typed-arrays.html#using-dataviews)
- en: 32.2 [Element types](ch_typed-arrays.html#element-types)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.2 元素类型](ch_typed-arrays.html#element-types)
- en: 32.2.1 [Handling overflow and underflow](ch_typed-arrays.html#handling-overflow-underflow)
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.2.1 处理溢出和下溢](ch_typed-arrays.html#handling-overflow-underflow)
- en: 32.2.2 [Endianness](ch_typed-arrays.html#endianness)
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.2.2 字节顺序](ch_typed-arrays.html#endianness)
- en: 32.3 [More information on Typed Arrays](ch_typed-arrays.html#more-information-on-typed-arrays)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.3 Typed Arrays的更多信息](ch_typed-arrays.html#more-information-on-typed-arrays)
- en: 32.3.1 [The static method `«ElementType»Array.from()`](ch_typed-arrays.html#the-static-method-elementtypearray.from)
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.3.1 [`«ElementType»Array.from()`的静态方法](ch_typed-arrays.html#the-static-method-elementtypearray.from)
- en: 32.3.2 [Typed Arrays are iterable](ch_typed-arrays.html#typed-arrays-are-iterable)
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.3.2 Typed Arrays是可迭代的](ch_typed-arrays.html#typed-arrays-are-iterable)
- en: 32.3.3 [Typed Arrays vs. normal Arrays](ch_typed-arrays.html#typed-arrays-vs.-normal-arrays)
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.3.3 Typed Arrays vs. normal Arrays](ch_typed-arrays.html#typed-arrays-vs.-normal-arrays)
- en: 32.3.4 [Converting Typed Arrays to and from normal Arrays](ch_typed-arrays.html#converting-typed-arrays-to-and-from-normal-arrays)
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.3.4 转换Typed Arrays为普通数组](ch_typed-arrays.html#converting-typed-arrays-to-and-from-normal-arrays)
- en: 32.3.5 [Concatenating Typed Arrays](ch_typed-arrays.html#concatenating-typed-arrays)
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.3.5 连接Typed Arrays](ch_typed-arrays.html#concatenating-typed-arrays)
- en: '32.4 [Quick references: indices vs. offsets](ch_typed-arrays.html#typed-arrays-indices-offsets)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.4 索引与偏移的快速参考](ch_typed-arrays.html#typed-arrays-indices-offsets)
- en: '32.5 [Quick reference: ArrayBuffers](ch_typed-arrays.html#quick-reference-arraybuffers)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.5 ArrayBuffer的快速参考](ch_typed-arrays.html#quick-reference-arraybuffers)
- en: 32.5.1 [`new ArrayBuffer()`](ch_typed-arrays.html#new-arraybuffer)
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.5.1 `new ArrayBuffer()`](ch_typed-arrays.html#new-arraybuffer)
- en: 32.5.2 [Static methods of `ArrayBuffer`](ch_typed-arrays.html#static-methods-of-arraybuffer)
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.5.2 `ArrayBuffer`的静态方法](ch_typed-arrays.html#static-methods-of-arraybuffer)
- en: 32.5.3 [Properties of `ArrayBuffer.prototype`](ch_typed-arrays.html#properties-of-arraybuffer.prototype)
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.5.3 `ArrayBuffer.prototype`的属性](ch_typed-arrays.html#properties-of-arraybuffer.prototype)
- en: '32.6 [Quick reference: Typed Arrays](ch_typed-arrays.html#quick-reference-typed-arrays)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.6 Typed Arrays的快速参考](ch_typed-arrays.html#quick-reference-typed-arrays)
- en: 32.6.1 [Static methods of `TypedArray<T>`](ch_typed-arrays.html#static-methods-of-typedarrayt)
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.6.1 `TypedArray<T>`的静态方法](ch_typed-arrays.html#static-methods-of-typedarrayt)
- en: 32.6.2 [Properties of `TypedArray<T>.prototype`](ch_typed-arrays.html#properties-of-typedarrayt.prototype)
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.6.2 [`TypedArray<T>.prototype`的属性](ch_typed-arrays.html#properties-of-typedarrayt.prototype)
- en: 32.6.3 [`new «ElementType»Array()`](ch_typed-arrays.html#new-elementtypearray)
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.6.3 `new «ElementType»Array()`](ch_typed-arrays.html#new-elementtypearray)
- en: 32.6.4 [Static properties of `«ElementType»Array`](ch_typed-arrays.html#static-properties-of-elementtypearray)
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.6.4 [«ElementType»Array的静态属性](ch_typed-arrays.html#static-properties-of-elementtypearray)
- en: 32.6.5 [Properties of `«ElementType»Array.prototype`](ch_typed-arrays.html#properties-of-elementtypearray.prototype)
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.6.5 [`«ElementType»Array.prototype`的属性](ch_typed-arrays.html#properties-of-elementtypearray.prototype)
- en: '32.7 [Quick reference: DataViews](ch_typed-arrays.html#quick-reference-dataviews)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.7 DataView的快速参考](ch_typed-arrays.html#quick-reference-dataviews)
- en: 32.7.1 [`new DataView()`](ch_typed-arrays.html#new-dataview)
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.7.1 `new DataView()`](ch_typed-arrays.html#new-dataview)
- en: 32.7.2 [Properties of `DataView.prototype`](ch_typed-arrays.html#properties-of-dataview.prototype)
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32.7.2 [`DataView.prototype`的属性](ch_typed-arrays.html#properties-of-dataview.prototype)
- en: '* * *'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 32.1 The basics of the API
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32.1 API的基础
- en: 'Much data on the web is text: JSON files, HTML files, CSS files, JavaScript
    code, etc. JavaScript handles such data well via its built-in strings.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 网络上的许多数据都是文本：JSON文件、HTML文件、CSS文件、JavaScript代码等。JavaScript通过其内置的字符串很好地处理这些数据。
- en: However, before 2011, it did not handle binary data well. [The Typed Array Specification
    1.0](https://www.khronos.org/registry/typedarray/specs/1.0/) was introduced on
    February 8, 2011 and provides tools for working with binary data. With ECMAScript
    6, Typed Arrays were added to the core language and gained methods that were previously
    only available for normal Arrays (`.map()`, `.filter()`, etc.).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在2011年之前，它并不擅长处理二进制数据。[Typed Array Specification 1.0](https://www.khronos.org/registry/typedarray/specs/1.0/)于2011年2月8日推出，提供了处理二进制数据的工具。随着ECMAScript
    6，Typed Arrays被添加到核心语言，并获得了以前仅适用于普通数组的方法（`.map()`、`.filter()`等）。
- en: 32.1.1 Use cases for Typed Arrays
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.1.1 Typed Arrays的用例
- en: 'The main uses cases for Typed Arrays, are:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Typed Arrays的主要用例包括：
- en: 'Processing binary data: managing image data, manipulating binary files, handling
    binary network protocols, etc.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理二进制数据：管理图像数据、操作二进制文件、处理二进制网络协议等。
- en: 'Interacting with native APIs: Native APIs often receive and return data in
    a binary format, which you could neither store nor manipulate well in pre-ES6
    JavaScript. That meant that whenever you were communicating with such an API,
    data had to be converted from JavaScript to binary and back for every call. Typed
    Arrays eliminate this bottleneck. One example of communicating with native APIs
    is WebGL, for which Typed Arrays were initially created. Section [“History of
    Typed Arrays”](http://www.html5rocks.com/en/tutorials/webgl/typed_arrays/#toc-history)
    of the article [“Typed Arrays: Binary Data in the Browser”](http://www.html5rocks.com/en/tutorials/webgl/typed_arrays/#toc-history)
    (by Ilmari Heikkinen for HTML5 Rocks) has more information.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与本机API交互：本机API通常以二进制格式接收和返回数据，在ES6之前的JavaScript中无法很好地存储或操作这些数据。这意味着每当您与此类API通信时，数据都必须在JavaScript和二进制之间进行转换。类型化数组消除了这一瓶颈。与本机API通信的一个例子是WebGL，最初为其创建了类型化数组。文章[“类型化数组的历史”](http://www.html5rocks.com/en/tutorials/webgl/typed_arrays/#toc-history)（由Ilmari
    Heikkinen为HTML5 Rocks撰写）的部分[“类型化数组：浏览器中的二进制数据”](http://www.html5rocks.com/en/tutorials/webgl/typed_arrays/#toc-history)有更多信息。
- en: '32.1.2 The core classes: `ArrayBuffer`, Typed Arrays, `DataView`'
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.1.2 核心类：`ArrayBuffer`，类型化数组，`DataView`
- en: 'The Typed Array API stores binary data in instances of `ArrayBuffer`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 类型化数组API将二进制数据存储在`ArrayBuffer`的实例中：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'An ArrayBuffer itself is a black box: if you want to access its data, you must
    wrap it in another object – a *view object*. Two kinds of view objects are available:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: ArrayBuffer本身是一个黑匣子：如果您想访问其数据，必须将其包装在另一个对象中 - *视图对象*。有两种类型的视图对象可用：
- en: 'Typed Arrays: let you access the data as an indexed sequence of elements that
    all have the same type. Examples include:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型化数组：让您将数据作为具有相同类型的索引序列的元素访问。示例包括：
- en: '`Uint8Array`: Elements are unsigned 8-bit integers. *Unsigned* means that their
    ranges start at zero.'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Uint8Array`：元素为无符号8位整数。*无符号*表示它们的范围从零开始。'
- en: '`Int16Array`: Elements are signed 16-bit integers. *Signed* means that they
    have a sign and can be negative, zero, or positive.'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Int16Array`：元素为有符号16位整数。*有符号*表示它们具有符号，可以是负数，零或正数。'
- en: '`Float32Array`: Elements are 32-bit floating point numbers.'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Float32Array`：元素为32位浮点数。'
- en: 'DataViews: let you interpret the data as various types (`Uint8`, `Int16`, `Float32`,
    etc.) that you can read and write at any byte offset.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DataViews：让您将数据解释为各种类型（`Uint8`，`Int16`，`Float32`等），您可以在任何字节偏移处读取和写入。
- en: Fig. [20](#fig:typed_arrays_class_diagram) shows a class diagram of the API.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图[20](#fig:typed_arrays_class_diagram)显示了API的类图。
- en: '![Figure 20: The classes of the Typed Array API.](../Images/1598186f99439610a5dfe0e2c08f1a33.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图20：类型化数组API的类。](../Images/1598186f99439610a5dfe0e2c08f1a33.png)'
- en: 'Figure 20: The classes of the Typed Array API.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图20：类型化数组API的类。
- en: 32.1.3 Using Typed Arrays
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.1.3 使用类型化数组
- en: 'Typed Arrays are used much like normal Arrays with a few notable differences:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 类型化数组与普通数组的使用方式基本相同，但有一些显著的区别：
- en: Typed Arrays store their data in ArrayBuffers.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型化数组将它们的数据存储在ArrayBuffers中。
- en: All elements are initialized with zeros.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有元素都初始化为零。
- en: All elements have the same type. Writing values to a Typed Array coerces them
    to that type. Reading values produces normal numbers or bigints.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有元素具有相同的类型。将值写入类型化数组会将它们强制转换为该类型。读取值会产生普通数字或大整数。
- en: The length of a Typed Array is immutable; it can’t be changed.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型化数组的长度是不可变的；它不能被更改。
- en: Typed Arrays can’t have holes.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型化数组不能有空洞。
- en: 32.1.3.1 Creating Typed Arrays
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 32.1.3.1 创建类型化数组
- en: 'The following code shows three different ways of creating the same Typed Array:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了创建相同类型化数组的三种不同方式：
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 32.1.3.2 The wrapped ArrayBuffer
  id: totrans-61
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 32.1.3.2 包装的ArrayBuffer
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 32.1.3.3 Getting and setting elements
  id: totrans-63
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 32.1.3.3 获取和设置元素
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 32.1.4 Using DataViews
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.1.4 使用DataViews
- en: 'This is how DataViews are used:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是DataViews的使用方式：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 32.2 Element types
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32.2 元素类型
- en: 'Table 20: Element types supported by the Typed Array API.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 表20：类型化数组API支持的元素类型。
- en: '| Element | Typed Array | Bytes | Description |  |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 元素 | 类型化数组 | 字节 | 描述 |  |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| `Int8` | `Int8Array` | 1 | 8-bit signed integer | ES6 |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `Int8` | `Int8Array` | 1 | 8位有符号整数 | ES6 |'
- en: '| `Uint8` | `Uint8Array` | 1 | 8-bit unsigned integer | ES6 |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `Uint8` | `Uint8Array` | 1 | 8位无符号整数 | ES6 |'
- en: '| `Uint8C` | `Uint8ClampedArray` | 1 | 8-bit unsigned integer | ES6 |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `Uint8C` | `Uint8ClampedArray` | 1 | 8位无符号整数 | ES6 |'
- en: '|  |  |  | (clamped conversion) | ES6 |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '|  |  |  | （夹紧转换） | ES6 |'
- en: '| `Int16` | `Int16Array` | 2 | 16-bit signed integer | ES6 |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `Int16` | `Int16Array` | 2 | 16位有符号整数 | ES6 |'
- en: '| `Uint16` | `Uint16Array` | 2 | 16-bit unsigned integer | ES6 |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `Uint16` | `Uint16Array` | 2 | 16位无符号整数 | ES6 |'
- en: '| `Int32` | `Int32Array` | 4 | 32-bit signed integer | ES6 |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `Int32` | `Int32Array` | 4 | 32位有符号整数 | ES6 |'
- en: '| `Uint32` | `Uint32Array` | 4 | 32-bit unsigned integer | ES6 |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `Uint32` | `Uint32Array` | 4 | 32位无符号整数 | ES6 |'
- en: '| `BigInt64` | `BigInt64Array` | 8 | 64-bit signed integer | ES2020 |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `BigInt64` | `BigInt64Array` | 8 | 64位有符号整数 | ES2020 |'
- en: '| `BigUint64` | `BigUint64Array` | 8 | 64-bit unsigned integer | ES2020 |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `BigUint64` | `BigUint64Array` | 8 | 64位无符号整数 | ES2020 |'
- en: '| `Float32` | `Float32Array` | 4 | 32-bit floating point | ES6 |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `Float32` | `Float32Array` | 4 | 32位浮点 | ES6 |'
- en: '| `Float64` | `Float64Array` | 8 | 64-bit floating point | ES6 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `Float64` | `Float64Array` | 8 | 64位浮点 | ES6 |'
- en: 'Tbl. [20](#tbl:typed-array-element-types) lists the available element types.
    These types (e.g., `Int32`) show up in two locations:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Tbl. [20](#tbl:typed-array-element-types)列出了可用的元素类型。这些类型（例如`Int32`）出现在两个位置：
- en: In Typed Arrays, they specify the types of the elements. For example, all elements
    of a `Int32Array` have the type `Int32`. The element type is the only aspect of
    Typed Arrays that differs.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在类型化数组中，它们指定元素的类型。例如，`Int32Array`的所有元素都具有类型`Int32`。元素类型是类型化数组唯一不同的方面。
- en: In DataViews, they are the lenses through which they access their ArrayBuffers
    when you use methods such as `.getInt32()` and `.setInt32()`.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在DataViews中，它们是访问其ArrayBuffers的透镜，当您使用`.getInt32()`和`.setInt32()`等方法时。
- en: 'The element type `Uint8C` is special: it is not supported by `DataView` and
    only exists to enable `Uint8ClampedArray`. This Typed Array is used by the `canvas`
    element (where it replaces `CanvasPixelArray`) and should otherwise be avoided.
    The only difference between `Uint8C` and `Uint8` is how overflow and underflow
    are handled (as explained in the next subsection).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 元素类型 `Uint8C` 是特殊的：它不受 `DataView` 支持，只存在于启用 `Uint8ClampedArray`。这种类型化数组被 `canvas`
    元素使用（它替换了 `CanvasPixelArray`）并且应该尽量避免使用。`Uint8C` 和 `Uint8` 之间唯一的区别是如何处理溢出和下溢（如下一小节中所解释的）。
- en: 'Typed Arrays and Array Buffers use numbers and bigints to import and export
    values:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 类型化数组和数组缓冲区使用数字和大整数来导入和导出值：
- en: The types `BigInt64` and `BigUint64` are handled via bigints. For example, setters
    accept bigints and getters return bigints.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BigInt64` 和 `BigUint64` 类型通过大整数处理。例如，setter 接受大整数，getter 返回大整数。'
- en: All other element types are handled via numbers.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有其他元素类型都通过数字处理。
- en: 32.2.1 Handling overflow and underflow
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.2.1 处理溢出和下溢
- en: 'Normally, when a value is out of the range of the element type, modulo arithmetic
    is used to convert it to a value within range. For signed and unsigned integers
    that means that:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当一个值超出了元素类型的范围时，会使用模算术将其转换为范围内的值。对于有符号和无符号整数来说，这意味着：
- en: The highest value plus one is converted to the lowest value (0 for unsigned
    integers).
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最高值加一会转换为最低值（对于无符号整数为0）。
- en: The lowest value minus one is converted to the highest value.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低值减一会转换为最高值。
- en: 'The following function helps illustrate how conversion works:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数有助于说明转换的工作原理：
- en: '[PRE5]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Modulo conversion for unsigned 8-bit integers:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号8位整数的模转换：
- en: '[PRE6]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Modulo conversion for signed 8-bit integers:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号8位整数的模转换：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Clamped conversion is different:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 夹紧转换是不同的：
- en: All underflowing values are converted to the lowest value.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有下溢的值都转换为最低值。
- en: All overflowing values are converted to the highest value.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有溢出的值都转换为最高值。
- en: '[PRE8]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 32.2.2 Endianness
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.2.2 字节顺序
- en: 'Whenever a type (such as `Uint16`) is stored as a sequence of multiple bytes,
    *endianness* matters:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 每当一个类型（如 `Uint16`）被存储为多个字节的序列时，*字节顺序* 都很重要：
- en: 'Big endian: the most significant byte comes first. For example, the `Uint16`
    value 0x4321 is stored as two bytes – first 0x43, then 0x21\.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大端：最重要的字节先出现。例如，`Uint16` 值 0x4321 存储为两个字节 - 首先是 0x43，然后是 0x21。
- en: 'Little endian: the least significant byte comes first. For example, the `Uint16`
    value 0x4321 is stored as two bytes – first 0x21, then 0x43\.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小端：最不重要的字节先出现。例如，`Uint16` 值 0x4321 存储为两个字节 - 首先是 0x21，然后是 0x43。
- en: Endianness tends to be fixed per CPU architecture and consistent across native
    APIs. Typed Arrays are used to communicate with those APIs, which is why their
    endianness follows the endianness of the platform and can’t be changed.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 字节顺序往往固定在每个 CPU 架构上，并且在本机 API 中保持一致。类型化数组用于与这些 API 进行通信，这就是为什么它们的字节顺序遵循平台的字节顺序并且不能更改的原因。
- en: On the other hand, the endianness of protocols and binary files varies, but
    is fixed per format, across platforms. Therefore, we must be able to access data
    with either endianness. DataViews serve this use case and let you specify endianness
    when you get or set a value.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，协议和二进制文件的字节顺序是变化的，但在格式上是固定的，跨平台一致。因此，我们必须能够访问任一字节顺序的数据。DataView 用于这种情况，并且让您在获取或设置值时指定字节顺序。
- en: '[Quoting Wikipedia on Endianness](https://en.wikipedia.org/wiki/Endianness):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[引用维基百科关于字节顺序的内容](https://en.wikipedia.org/wiki/Endianness)：'
- en: Big-endian representation is the most common convention in data networking;
    fields in the protocols of the Internet protocol suite, such as IPv4, IPv6, TCP,
    and UDP, are transmitted in big-endian order. For this reason, big-endian byte
    order is also referred to as network byte order.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大端表示法是数据网络中最常见的约定；互联网协议套件的协议字段，如IPv4、IPv6、TCP和UDP，以大端顺序传输。因此，大端字节顺序也被称为网络字节顺序。
- en: Little-endian storage is popular for microprocessors in part due to significant
    historical influence on microprocessor designs by Intel Corporation.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小端存储在微处理器中很受欢迎，部分原因是因特尔公司对微处理器设计的重大历史影响。
- en: Other orderings are also possible. Those are generically called *middle-endian*
    or *mixed-endian*.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他可能的排序方式。这些通常被称为 *中端* 或 *混合端*。
- en: 32.3 More information on Typed Arrays
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32.3 有关类型化数组的更多信息
- en: In this section, `«ElementType»Array` stands for `Int8Array`, `Uint8Array`,
    etc. `ElementType` is `Int8`, `Uint8`, etc.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，`«ElementType»Array` 代表 `Int8Array`、`Uint8Array` 等。`ElementType` 是 `Int8`、`Uint8`
    等。
- en: 32.3.1 The static method `«ElementType»Array.from()`
  id: totrans-117
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.3.1 静态方法 `«ElementType»Array.from()`
- en: 'This method has the type signature:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的类型签名是：
- en: '[PRE9]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`.from()` converts `source` into an instance of `this` (a Typed Array).'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`.from()` 将 `source` 转换为 `this` 的实例（类型化数组）。'
- en: 'For example, normal Arrays are iterable and can be converted with this method:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，普通数组是可迭代的，并且可以使用这种方法进行转换：
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Typed Arrays are also iterable:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 类型化数组也是可迭代的：
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`source` can also be [an *Array-like object*](ch_arrays.html#array-like-objects):'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`source` 也可以是[一个 *类数组对象*](ch_arrays.html#array-like-objects)：'
- en: '[PRE12]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The optional `mapfn` lets you transform the elements of `source` before they
    become elements of the result. Why perform the two steps *mapping* and *conversion*
    in one go? Compared to mapping separately via `.map()`, there are two advantages:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的 `mapfn` 允许您在它们成为结果的元素之前转换 `source` 的元素。为什么要一次完成两个步骤 *映射* 和 *转换*？与通过 `.map()`
    分别进行映射相比，有两个优势：
- en: No intermediate Array or Typed Array is needed.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不需要中间数组或类型化数组。
- en: When converting between Typed Arrays with different precisions, less can go
    wrong.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在不同精度的类型化数组之间进行转换时，出错的可能性较小。
- en: Read on for an explanation of the second advantage.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 继续阅读有关第二个优势的解释。
- en: '32.3.1.1 Pitfall: mapping while converting between Typed Array types'
  id: totrans-131
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 32.3.1.1 陷阱：在类型化数组类型之间进行映射转换时
- en: The static method `.from()` can optionally both map and convert between Typed
    Array types. Less can go wrong if you use that method.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 静态方法 `.from()` 可以选择同时在类型化数组类型之间进行映射和转换。如果使用该方法，出错的可能性较小。
- en: To see why that is, let us first convert a Typed Array to a Typed Array with
    a higher precision. If we use `.from()` to map, the result is automatically correct.
    Otherwise, you must first convert and then map.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解这一点，让我们首先将一个具有更高精度的Typed Array转换为一个具有更高精度的Typed Array。如果我们使用`.from()`进行映射，结果会自动正确。否则，您必须先转换，然后再映射。
- en: '[PRE13]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If we go from a Typed Array to a Typed Array with a lower precision, mapping
    via `.from()` produces the correct result. Otherwise, we must first map and then
    convert.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从具有较低精度的Typed Array转换为具有较低精度的Typed Array，通过`.from()`进行映射会产生正确的结果。否则，我们必须先映射，然后再转换。
- en: '[PRE14]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The problem is that if we map via `.map()`, then input type and output type
    are the same. In contrast, `.from()` goes from an arbitrary input type to an output
    type that you specify via its receiver.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，如果我们通过`.map()`进行映射，那么输入类型和输出类型是相同的。相反，`.from()`从任意输入类型转换为您通过其接收器指定的输出类型。
- en: 32.3.2 Typed Arrays are iterable
  id: totrans-138
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.3.2 Typed Arrays是可迭代的
- en: 'Typed Arrays are [iterable](ch_sync-iteration.html). That means that you can
    use the `for-of` loop and other iteration-based mechanisms:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Typed Arrays是可迭代的。这意味着你可以使用`for-of`循环和其他基于迭代的机制：
- en: '[PRE15]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: ArrayBuffers and DataViews are not iterable.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: ArrayBuffers和DataViews不可迭代。
- en: 32.3.3 Typed Arrays vs. normal Arrays
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.3.3 Typed Arrays vs. 普通数组
- en: 'Typed Arrays are much like normal Arrays: they have a `.length`, elements can
    be accessed via the bracket operator `[]`, and they have most of the standard
    Array methods. They differ from normal Arrays in the following ways:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Typed Arrays与普通数组非常相似：它们具有`.length`，可以通过方括号操作符`[]`访问元素，并且具有大多数标准数组方法。它们与普通数组的不同之处在于：
- en: 'Typed Arrays have buffers. The elements of a Typed Array `ta` are not stored
    in `ta`, they are stored in an associated ArrayBuffer that can be accessed via
    `ta.buffer`:'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Typed Arrays有缓冲区。Typed Array `ta`的元素不存储在`ta`中，而是存储在一个关联的ArrayBuffer中，可以通过`ta.buffer`访问：
- en: '[PRE16]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Typed Arrays are initialized with zeros:'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Typed Arrays初始化为零：
- en: '`new Array(4)` creates a normal Array without any elements. It only has four
    *holes* (indices less than the `.length` that have no associated elements).'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new Array(4)`创建一个没有任何元素的普通数组。它只有四个*空洞*（索引小于`.length`且没有关联元素）。'
- en: '`new Uint8Array(4)` creates a Typed Array whose four elements are all 0.'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new Uint8Array(4)`创建一个所有元素都为0的Typed Array。'
- en: '[PRE17]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'All of the elements of a Typed Array have the same type:'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有Typed Array的元素都具有相同的类型：
- en: Setting elements converts values to that type.
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置元素会将值转换为该类型。
- en: '[PRE18]'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Getting elements returns numbers or bigints.
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取元素返回数字或大整数。
- en: '[PRE19]'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `.length` of a Typed Array is derived from its ArrayBuffer and never changes
    (unless you switch to a different ArrayBuffer).
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Typed Array的`.length`是从其ArrayBuffer派生的，永远不会改变（除非切换到不同的ArrayBuffer）。
- en: Normal Arrays can have holes; Typed Arrays can’t.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 普通数组可以有空洞；Typed Arrays不能。
- en: 32.3.4 Converting Typed Arrays to and from normal Arrays
  id: totrans-157
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.3.4 将Typed Arrays转换为普通数组
- en: 'To convert a normal Array to a Typed Array, you pass it to a Typed Array constructor
    (which accepts Array-like objects and Typed Arrays) or to `«ElementType»Array.from()`
    (which accepts iterables and Array-like objects). For example:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要将普通数组转换为Typed Array，可以将其传递给Typed Array构造函数（接受类似数组的对象和Typed Arrays）或`«ElementType»Array.from()`（接受可迭代对象和类似数组的对象）。例如：
- en: '[PRE20]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To convert a Typed Array to a normal Array, you can use `Array.from()` or spreading
    (because Typed Arrays are iterable):'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要将Typed Array转换为普通数组，可以使用`Array.from()`或扩展（因为Typed Arrays是可迭代的）：
- en: '[PRE21]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 32.3.5 Concatenating Typed Arrays
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.3.5 连接Typed Arrays
- en: 'Typed Arrays don’t have a method `.concat()`, like normal Arrays do. The workaround
    is to use their overloaded method `.set()`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Typed Arrays没有`.concat()`方法，像普通数组一样。解决方法是使用它们的重载方法`.set()`：
- en: '[PRE22]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: It copies the existing `typedArray` or `arrayLike` into the receiver, at index
    `offset`. `TypedArray` is a fictitious abstract superclass of all concrete Typed
    Array classes.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 它将现有的`typedArray`或`arrayLike`复制到接收器中，索引为`offset`。`TypedArray`是所有具体Typed Array类的虚构抽象超类。
- en: 'The following function uses that method to copy zero or more Typed Arrays (or
    Array-like objects) into an instance of `resultConstructor`:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数使用该方法将零个或多个Typed Arrays（或类似数组的对象）复制到`resultConstructor`的实例中：
- en: '[PRE23]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '32.4 Quick references: indices vs. offsets'
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32.4 快速参考：索引 vs. 偏移
- en: 'In preparation for the quick references on ArrayBuffers, Typed Arrays, and
    DataViews, we need learn the differences between indices and offsets:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备ArrayBuffers、Typed Arrays和DataViews的快速参考，我们需要了解索引和偏移之间的区别：
- en: 'Indices for the bracket operator `[ ]`: You can only use non-negative indices
    (starting at 0).'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方括号操作符`[]`的索引：只能使用非负索引（从0开始）。
- en: 'In normal Arrays, writing to negative indices creates properties:'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在普通数组中，写入负索引会创建属性：
- en: '[PRE24]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In Typed Arrays, writing to negative indices is ignored:'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Typed Arrays中，写入负索引会被忽略：
- en: '[PRE25]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Indices for methods of ArrayBuffers, Typed Arrays, and DataViews: Every index
    can be negative. If it is, it is added to the length of the entity to produce
    the actual index. Therefore, `-1` refers to the last element, `-2` to the second-last,
    etc. Methods of normal Arrays work the same way.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ArrayBuffers、Typed Arrays和DataViews的方法的索引：每个索引都可以是负数。如果是负数，则将其添加到实体的长度以产生实际索引。因此，`-1`指的是最后一个元素，`-2`指的是倒数第二个元素，依此类推。普通数组的方法工作方式相同。
- en: '[PRE26]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Offsets passed to methods of Typed Arrays and DataViews: must be non-negative
    – for example:'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传递给Typed Arrays和DataViews方法的偏移量必须是非负的-例如：
- en: '[PRE27]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Whether a parameter is an index or an offset can only be determined by looking
    at documentation; there is no simple rule.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 参数是索引还是偏移量只能通过查看文档来确定；没有简单的规则。
- en: '32.5 Quick reference: ArrayBuffers'
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32.5 快速参考：ArrayBuffers
- en: ArrayBuffers store binary data, which is meant to be accessed via Typed Arrays
    and DataViews.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: ArrayBuffers存储二进制数据，可以通过Typed Arrays和DataViews访问。
- en: 32.5.1 `new ArrayBuffer()`
  id: totrans-182
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.5.1 `new ArrayBuffer()`
- en: 'The type signature of the constructor is:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数的类型签名是：
- en: '[PRE28]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Invoking this constructor via `new` creates an instance whose capacity is `length`
    bytes. Each of those bytes is initially 0.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`new`调用此构造函数会创建一个容量为`length`字节的实例。这些字节最初都是0。
- en: You can’t change the length of an ArrayBuffer; you can only create a new one
    with a different length.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 您无法更改ArrayBuffer的长度；您只能创建一个具有不同长度的新ArrayBuffer。
- en: 32.5.2 Static methods of `ArrayBuffer`
  id: totrans-187
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.5.2 `ArrayBuffer`的静态方法
- en: '`ArrayBuffer.isView(arg: any)`'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ArrayBuffer.isView(arg: any)`'
- en: Returns `true` if `arg` is an object and a *view* for an ArrayBuffer (i.e.,
    if it is a Typed Array or a DataView).
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`arg`是一个对象并且是ArrayBuffer的*视图*（即，如果它是Typed Array或DataView），则返回`true`。
- en: 32.5.3 Properties of `ArrayBuffer.prototype`
  id: totrans-190
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.5.3 `ArrayBuffer.prototype`的属性
- en: '`get .byteLength(): number`'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get .byteLength(): number`'
- en: Returns the capacity of this ArrayBuffer in bytes.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回此ArrayBuffer的容量（以字节为单位）。
- en: '`.slice(startIndex: number, endIndex=this.byteLength)`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.slice(startIndex: number, endIndex=this.byteLength)`'
- en: 'Creates a new ArrayBuffer that contains the bytes of this ArrayBuffer whose
    indices are greater than or equal to `startIndex` and less than `endIndex`. `start`
    and `endIndex` can be negative (see [§32.4 “Quick references: indices vs. offsets”](ch_typed-arrays.html#typed-arrays-indices-offsets)).'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个新的ArrayBuffer，其中包含此ArrayBuffer的字节，其索引大于或等于`startIndex`且小于`endIndex`。`start`和`endIndex`可以是负数（参见[§32.4“快速参考：索引
    vs. 偏移量”](ch_typed-arrays.html#typed-arrays-indices-offsets)）。
- en: '32.6 Quick reference: Typed Arrays'
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32.6 快速参考：Typed Arrays
- en: 'The properties of the various Typed Array objects are introduced in two steps:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 各种Typed Array对象的属性分两步介绍：
- en: '`TypedArray`: First, we look at the abstract superclass of all Typed Array
    classes (which was shown in the class diagram [at the beginning of this chapter](#fig:typed_arrays_class_diagram)).
    I’m calling that superclass `TypedArray`, but it is not directly accessible from
    JavaScript. `TypedArray.prototype` houses all methods of Typed Arrays.'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`TypedArray`：首先，我们看一下所有Typed Array类的抽象超类（在本章开头的类图中显示）。我称这个超类为`TypedArray`，但它无法直接从JavaScript访问。`TypedArray.prototype`包含所有Typed
    Arrays的方法。'
- en: '`«ElementType»Array`: The concrete Typed Array classes are called `Uint8Array`,
    `Int16Array`, `Float32Array`, etc. These are the classes that you use via `new`,
    `.of`, and `.from()`.'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`«ElementType»Array`：具体的Typed Array类称为`Uint8Array`，`Int16Array`，`Float32Array`等。这些是您通过`new`，`.of`和`.from()`使用的类。'
- en: 32.6.1 Static methods of `TypedArray<T>`
  id: totrans-199
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.6.1 `TypedArray<T>`的静态方法
- en: Both static `TypedArray` methods are inherited by its subclasses (`Uint8Array`,
    etc.). `TypedArray` is abstract. Therefore, you always use these methods via the
    subclasses, which are concrete and can have direct instances.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 两个静态`TypedArray`方法都被其子类（`Uint8Array`等）继承。`TypedArray`是抽象的。因此，您总是通过子类使用这些方法，子类是具体的，可以直接实例化。
- en: '`.from<S>(source: Iterable<S>|ArrayLike<S>, mapfn?: S => T, thisArg?: any)
    : instanceof this`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.from<S>(source: Iterable<S>|ArrayLike<S>, mapfn?: S => T, thisArg?: any)
    : instanceof this`'
- en: Converts an iterable (including Arrays and Typed Arrays) or [an Array-like object](ch_arrays.html#array-like-objects)
    to an instance of `this` (`instanceof this` is my invention to express that fact).
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将可迭代对象（包括数组和Typed Arrays）或[类似数组的对象](ch_arrays.html#array-like-objects)转换为`this`的实例（`instanceof
    this`是我发明的，用于表达这个事实）。
- en: '[PRE29]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The optional `mapfn` lets you transform the elements of `source` before they
    become elements of the result.
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的`mapfn`允许您在它们成为结果的元素之前转换`source`的元素。
- en: '[PRE30]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '`.of(...items: bigint[]): instanceof this` (`BigInt64Array`, `BigUint64Array`)'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.of(...items: bigint[]): instanceof this`（`BigInt64Array`，`BigUint64Array`）'
- en: '`.of(...items: number[]): instanceof this` (all other Typed Arrays)'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.of(...items: number[]): instanceof this`（所有其他Typed Arrays）'
- en: Creates a new instance of `this` whose elements are `items` (coerced to the
    element type).
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个新的`this`实例，其元素为`items`（强制转换为元素类型）。
- en: '[PRE31]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 32.6.2 Properties of `TypedArray<T>.prototype`
  id: totrans-210
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.6.2 `TypedArray<T>.prototype`的属性
- en: 'Indices accepted by Typed Array methods can be negative (they work like traditional
    Array methods that way). Offsets must be non-negative. For details, see [§32.4
    “Quick references: indices vs. offsets”](ch_typed-arrays.html#typed-arrays-indices-offsets).'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Typed Array方法接受的索引可以是负数（它们的工作方式类似于传统的数组方法）。偏移量必须是非负的。详情请参见[§32.4“快速参考：索引 vs. 偏移量”](ch_typed-arrays.html#typed-arrays-indices-offsets)。
- en: 32.6.2.1 Properties specific to Typed Arrays
  id: totrans-212
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 32.6.2.1 特定于Typed Arrays的属性
- en: 'The following properties are specific to Typed Arrays; normal Arrays don’t
    have them:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 以下属性特定于Typed Arrays；普通数组没有这些属性：
- en: '`get .buffer(): ArrayBuffer`'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get .buffer(): ArrayBuffer`'
- en: Returns the buffer backing this Typed Array.
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回支持此Typed Array的缓冲区。
- en: '`get .length(): number`'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get .length(): number`'
- en: Returns the length in elements of this Typed Array’s buffer.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回此Typed Array缓冲区中的元素长度。
- en: '`get .byteLength(): number`'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get .byteLength(): number`'
- en: Returns the size in bytes of this Typed Array’s buffer.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回此Typed Array缓冲区的字节大小。
- en: '`get .byteOffset(): number`'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get .byteOffset(): number`'
- en: Returns the offset where this Typed Array “starts” inside its ArrayBuffer.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回此Typed Array在其ArrayBuffer内“开始”的偏移量。
- en: '`.set(typedArray: TypedArray, offset=0): void`'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.set(typedArray: TypedArray, offset=0): void`'
- en: '`.set(arrayLike: ArrayLike<bigint>, offset=0): void` (`BigInt64Array`, `BigUint64Array`)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.set(arrayLike: ArrayLike<bigint>, offset=0): void`（`BigInt64Array`，`BigUint64Array`）'
- en: '`.set(arrayLike: ArrayLike<number>, offset=0): void` (all other Typed Arrays)'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.set(arrayLike: ArrayLike<number>, offset=0): void`（所有其他Typed Arrays）'
- en: Copies all elements of the first parameter to this Typed Array. The element
    at index 0 of the parameter is written to index `offset` of this Typed Array (etc.).
    For more information on Array-like objects, consult [§31.5 “Array-like objects”](ch_arrays.html#array-like-objects).
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将第一个参数的所有元素复制到此Typed Array。参数的索引0的元素写入此Typed Array的索引`offset`（依此类推）。有关类似数组的更多信息，请参阅[§31.5“类似数组”](ch_arrays.html#array-like-objects)。
- en: '`.subarray(startIndex=0, endIndex=this.length): TypedArray<T>`'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.subarray(startIndex=0, endIndex=this.length): TypedArray<T>`'
- en: Returns a new Typed Array that has the same buffer as this Typed Array, but
    a (generally) smaller range. If `startIndex` is non-negative then the first element
    of the resulting Typed Array is `this[startIndex]`, the second `this[startIndex+1]`
    (etc.). If `startIndex` in negative, it is converted appropriately.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回一个新的Typed Array，其缓冲区与此Typed Array相同，但范围（通常）更小。如果`startIndex`是非负数，则结果Typed
    Array的第一个元素是`this[startIndex]`，第二个是`this[startIndex+1]`（依此类推）。如果`startIndex`为负数，则会进行适当转换。
- en: 32.6.2.2 Array methods
  id: totrans-228
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 32.6.2.2 数组方法
- en: 'The following methods are basically the same as the methods of normal Arrays:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法基本上与普通数组的方法相同：
- en: '`.at(index: number): T | undefined` ^([R, ES2022])'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.at(index: number): T | undefined` ^([R, ES2022])'
- en: '`.copyWithin(target: number, start: number, end=this.length): this` ^([W, ES6])'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.copyWithin(target: number, start: number, end=this.length): this` ^([W, ES6])'
- en: '`.entries(): Iterable<[number, T]>` ^([R, ES6])'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.entries(): Iterable<[number, T]>` ^([R, ES6])'
- en: '`.every(callback: (value: T, index: number, array: TypedArray<T>) => boolean,
    thisArg?: any): boolean` ^([R, ES6])'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.every(callback: (value: T, index: number, array: TypedArray<T>) => boolean,
    thisArg?: any): boolean` ^([R, ES6])'
- en: '`.fill(value: T, start=0, end=this.length): this` ^([W, ES6])'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.fill(value: T, start=0, end=this.length): this` ^([W, ES6])'
- en: '`.filter(callback: (value: T, index: number, array: TypedArray<T>) => any,
    thisArg?: any): T[]` ^([R, ES6])'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.filter(callback: (value: T, index: number, array: TypedArray<T>) => any,
    thisArg?: any): T[]` ^([R, ES6])'
- en: '`.find(predicate: (value: T, index: number, obj: T[]) => boolean, thisArg?:
    any): T | undefined` ^([R, ES6])'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.find(predicate: (value: T, index: number, obj: T[]) => boolean, thisArg?:
    any): T | undefined` ^([R, ES6])'
- en: '`.findIndex(predicate: (value: T, index: number, obj: T[]) => boolean, thisArg?:
    any): number` ^([R, ES6])'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.findIndex(predicate: (value: T, index: number, obj: T[]) => boolean, thisArg?:
    any): number` ^([R, ES6])'
- en: '`.forEach(callback: (value: T, index: number, array: TypedArray<T>) => void,
    thisArg?: any): void` ^([R, ES6])'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.forEach(callback: (value: T, index: number, array: TypedArray<T>) => void,
    thisArg?: any): void` ^([R, ES6])'
- en: '`.includes(searchElement: T, fromIndex=0): boolean` ^([R, ES2016])'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.includes(searchElement: T, fromIndex=0): boolean` ^([R, ES2016])'
- en: '`.indexOf(searchElement: T, fromIndex=0): number` ^([R, ES6])'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.indexOf(searchElement: T, fromIndex=0): number` ^([R, ES6])'
- en: '`.join(separator = '',''): string` ^([R, ES6])'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.join(separator = '',''): string` ^([R, ES6])'
- en: '`.keys(): Iterable<number>` ^([R, ES6])'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.keys(): Iterable<number>` ^([R, ES6])'
- en: '`.lastIndexOf(searchElement: T, fromIndex=this.length-1): number` ^([R, ES6])'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.lastIndexOf(searchElement: T, fromIndex=this.length-1): number` ^([R, ES6])'
- en: '`.map<U>(mapFunc: (value: T, index: number, array: TypedArray<T>) => U, thisArg?:
    any): U[]` ^([R, ES6])'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.map<U>(mapFunc: (value: T, index: number, array: TypedArray<T>) => U, thisArg?:
    any): U[]` ^([R, ES6])'
- en: '`.reduce<U>(callback: (accumulator: U, element: T, index: number, array: T[])
    => U, init?: U): U` ^([R, ES6])'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.reduce<U>(callback: (accumulator: U, element: T, index: number, array: T[])
    => U, init?: U): U` ^([R, ES6])'
- en: '`.reduceRight<U>(callback: (accumulator: U, element: T, index: number, array:
    T[]) => U, init?: U): U` ^([R, ES6])'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.reduceRight<U>(callback: (accumulator: U, element: T, index: number, array:
    T[]) => U, init?: U): U` ^([R, ES6])'
- en: '`.reverse(): this` ^([W, ES6])'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.reverse(): this` ^([W, ES6])'
- en: '`.slice(start=0, end=this.length): T[]` ^([R, ES6])'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.slice(start=0, end=this.length): T[]` ^([R, ES6])'
- en: '`.some(callback: (value: T, index: number, array: TypedArray<T>) => boolean,
    thisArg?: any): boolean` ^([R, ES6])'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.some(callback: (value: T, index: number, array: TypedArray<T>) => boolean,
    thisArg?: any): boolean` ^([R, ES6])'
- en: '`.sort(compareFunc?: (a: T, b: T) => number): this` ^([W, ES6])'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.sort(compareFunc?: (a: T, b: T) => number): this` ^([W, ES6])'
- en: '`.toString(): string` ^([R, ES6])'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.toString(): string` ^([R, ES6])'
- en: '`.values(): Iterable<T>` ^([R, ES6])'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.values(): Iterable<T>` ^([R, ES6])'
- en: For details on how these methods work, see [§31.13.3 “Methods of `Array.prototype`”](ch_arrays.html#quickref-array-prototype).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 有关这些方法的工作原理的详细信息，请参阅[§31.13.3“Array.prototype的方法”](ch_arrays.html#quickref-array-prototype)。
- en: 32.6.3 `new «ElementType»Array()`
  id: totrans-254
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.6.3 `new «ElementType»Array()`
- en: 'Each Typed Array constructor has a name that follows the pattern `«ElementType»Array`,
    where `«ElementType»` is one of the element types in the table at the beginning.
    That means that there are 11 constructors for Typed Arrays:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类型化数组构造函数都有一个遵循`«ElementType»Array`模式的名称，其中`«ElementType»`是表格中的元素类型之一。这意味着类型化数组有11个构造函数：
- en: '`Float32Array`, `Float64Array`'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Float32Array`, `Float64Array`'
- en: '`Int8Array`, `Int16Array`, `Int32Array`, `BigInt64Array`'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Int8Array`, `Int16Array`, `Int32Array`, `BigInt64Array`'
- en: '`Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`, `BigUint64Array`'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`, `BigUint64Array`'
- en: 'Each constructor has four *overloaded* versions – it behaves differently depending
    on how many arguments it receives and what their types are:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 每个构造函数都有四个*重载*版本-它的行为取决于它接收的参数数量以及它们的类型：
- en: '`new «ElementType»Array(buffer: ArrayBuffer, byteOffset=0, length=0)`'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new «ElementType»Array(buffer: ArrayBuffer, byteOffset=0, length=0)`'
- en: Creates a new `«ElementType»Array` whose buffer is `buffer`. It starts accessing
    the buffer at the given `byteOffset` and will have the given `length`. Note that
    `length` counts elements of the Typed Array (with 1–8 bytes each), not bytes.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个新的`«ElementType»Array`，其缓冲区为`buffer`。它从给定的`byteOffset`开始访问缓冲区，并具有给定的`length`。请注意，`length`计算类型化数组的元素（每个元素1-8个字节），而不是字节。
- en: '`new «ElementType»Array(length=0)`'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new «ElementType»Array(length=0)`'
- en: 'Creates a new `«ElementType»Array` with the given `length` and the appropriate
    buffer. The buffer’s size in bytes is:'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个具有给定`length`和适当缓冲区的新`«ElementType»Array`。缓冲区的大小以字节为单位：
- en: '[PRE32]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '`new «ElementType»Array(source: TypedArray)`'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new «ElementType»Array(source: TypedArray)`'
- en: Creates a new instance of `«ElementType»Array` whose elements have the same
    values as the elements of `source`, but coerced to `ElementType`.
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个`«ElementType»Array`的新实例，其元素具有与`source`的元素相同的值，但被强制转换为`ElementType`。
- en: '`new «ElementType»Array(source: ArrayLike<bigint>)` (`BigInt64Array`, `BigUint64Array`)'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new «ElementType»Array(source: ArrayLike<bigint>)` (`BigInt64Array`, `BigUint64Array`)'
- en: '`new «ElementType»Array(source: ArrayLike<number>)` (all other Typed Arrays)'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new «ElementType»Array(source: ArrayLike<number>)`（所有其他类型化数组）'
- en: Creates a new instance of `«ElementType»Array` whose elements have the same
    values as the elements of `source`, but coerced to `ElementType`. For more information
    on Array-like objects, consult [§31.5 “Array-like objects”](ch_arrays.html#array-like-objects).
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个新的`«ElementType»Array`的实例，其元素具有与`source`的元素相同的值，但被强制转换为`ElementType`。有关类似数组的对象的更多信息，请参阅[§31.5“类似数组的对象”](ch_arrays.html#array-like-objects)。
- en: 32.6.4 Static properties of `«ElementType»Array`
  id: totrans-270
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.6.4 `«ElementType»Array`的静态属性
- en: '`«ElementType»Array.BYTES_PER_ELEMENT: number`'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`«ElementType»Array.BYTES_PER_ELEMENT: number`'
- en: 'Counts how many bytes are needed to store a single element:'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 计算存储单个元素所需的字节数：
- en: '[PRE33]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 32.6.5 Properties of `«ElementType»Array.prototype`
  id: totrans-274
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.6.5 `«ElementType»Array.prototype`的属性
- en: '`.BYTES_PER_ELEMENT: number`'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.BYTES_PER_ELEMENT: number`'
- en: The same as `«ElementType»Array.BYTES_PER_ELEMENT`.
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与`«ElementType»Array.BYTES_PER_ELEMENT`相同。
- en: '32.7 Quick reference: DataViews'
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32.7 快速参考：DataViews
- en: 32.7.1 `new DataView()`
  id: totrans-278
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.7.1 `new DataView()`
- en: '`new DataView(buffer: ArrayBuffer, byteOffset=0, byteLength=buffer.byteLength-byteOffset)`'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new DataView(buffer: ArrayBuffer, byteOffset=0, byteLength=buffer.byteLength-byteOffset)`'
- en: Creates a new DataView whose data is stored in the ArrayBuffer `buffer`. By
    default, the new DataView can access all of `buffer`. The last two parameters
    allow you to change that.
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个新的DataView，其数据存储在ArrayBuffer`buffer`中。默认情况下，新的DataView可以访问整个`buffer`。最后两个参数允许您更改这一点。
- en: 32.7.2 Properties of `DataView.prototype`
  id: totrans-281
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 32.7.2 `DataView.prototype`的属性
- en: 'In the remainder of this section, `«ElementType»` refers to either:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的其余部分，`«ElementType»`指的是：
- en: '`Int8`, `Int16`, `Int32`, `BigInt64`'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Int8`, `Int16`, `Int32`, `BigInt64`'
- en: '`Uint8`, `Uint16`, `Uint32`, `BigUint64`'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Uint8`, `Uint16`, `Uint32`, `BigUint64`'
- en: '`Float32`, `Float64`'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Float32`, `Float64`'
- en: 'These are the properties of `DataView.prototype`:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是`DataView.prototype`的属性：
- en: '`get .buffer(): ArrayBuffer`'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get .buffer(): ArrayBuffer`'
- en: Returns the ArrayBuffer of this DataView.
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回此DataView的ArrayBuffer。
- en: '`get .byteLength(): number`'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get .byteLength(): number`'
- en: Returns how many bytes can be accessed by this DataView.
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回此DataView可以访问多少字节。
- en: '`get .byteOffset(): number`'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get .byteOffset(): number`'
- en: Returns at which offset this DataView starts accessing the bytes in its buffer.
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回此DataView开始访问其缓冲区中的字节的偏移量。
- en: '`.get«ElementType»(byteOffset: number, littleEndian=false): bigint` (`BigInt64`,
    `BigUint64`)'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.get«ElementType»(byteOffset: number, littleEndian=false): bigint` (`BigInt64`,
    `BigUint64`)'
- en: '`.get«ElementType»(byteOffset: number, littleEndian=false): number` (all other
    element types)'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`.get«ElementType»(byteOffset: number, littleEndian=false): number`（所有其他元素类型）'
- en: Reads a value from the buffer of this DataView.
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从此DataView的缓冲区中读取值。
- en: '`.set«ElementType»(byteOffset: number, value: bigint, littleEndian=false):
    void` (`BigInt64`, `BigUint64`)'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.set«ElementType»(byteOffset: number, value: bigint, littleEndian=false):
    void`（`BigInt64`，`BigUint64`）'
- en: '`.set«ElementType»(byteOffset: number, value: number, littleEndian=false):
    void` (all other element types)'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`.set«ElementType»(byteOffset: number, value: number, littleEndian=false):
    void`（所有其他元素类型）'
- en: Writes `value` to the buffer of this DataView.
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`value`写入此DataView的缓冲区。
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/45)'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/impatient-js/issues/45)'
