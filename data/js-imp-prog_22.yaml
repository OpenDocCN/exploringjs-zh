- en: 18 Bigints – arbitrary-precision integers [ES2020] (advanced)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 18 大整数 - 任意精度整数 [ES2020]（高级）
- en: 原文：[https://exploringjs.com/impatient-js/ch_bigints.html](https://exploringjs.com/impatient-js/ch_bigints.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/impatient-js/ch_bigints.html](https://exploringjs.com/impatient-js/ch_bigints.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 18.1 [Why bigints?](ch_bigints.html#why-bigints)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.1 [为什么bigints？](ch_bigints.html#why-bigints)
- en: 18.2 [Bigints](ch_bigints.html#bigints)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.2 [Bigints](ch_bigints.html#bigints)
- en: 18.2.1 [Going beyond 53 bits for integers](ch_bigints.html#going-beyond-53-bits-for-integers)
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.2.1 [超越53位整数](ch_bigints.html#going-beyond-53-bits-for-integers)
- en: '18.2.2 [Example: using bigints](ch_bigints.html#example-using-bigints)'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.2.2 [示例：使用bigints](ch_bigints.html#example-using-bigints)
- en: 18.3 [Bigint literals](ch_bigints.html#bigint-literals)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.3 [大整数文字](ch_bigints.html#bigint-literals)
- en: 18.3.1 [Underscores (`_`) as separators in bigint literals [ES2021]](ch_bigints.html#numeric-separator-bigint-literals)
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.3.1 [大整数文字中的下划线（`_`）作为分隔符[ES2021]](ch_bigints.html#numeric-separator-bigint-literals)
- en: 18.4 [Reusing number operators for bigints (overloading)](ch_bigints.html#reusing-number-operators-for-bigints-overloading)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.4 [重用bigints的数字运算符（重载）](ch_bigints.html#reusing-number-operators-for-bigints-overloading)
- en: 18.4.1 [Arithmetic operators](ch_bigints.html#arithmetic-operators-1)
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.4.1 [算术运算符](ch_bigints.html#arithmetic-operators-1)
- en: 18.4.2 [Ordering operators](ch_bigints.html#ordering-operators-1)
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.4.2 [排序运算符](ch_bigints.html#ordering-operators-1)
- en: 18.4.3 [Bitwise operators](ch_bigints.html#bitwise-operators-1)
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.4.3 [位运算符](ch_bigints.html#bitwise-operators-1)
- en: 18.4.4 [Loose equality (`==`) and inequality (`!=`)](ch_bigints.html#loose-equality-and-inequality)
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.4.4 [松散相等（`==`）和不等（`!=`）](ch_bigints.html#loose-equality-and-inequality)
- en: 18.4.5 [Strict equality (`===`) and inequality (`!==`)](ch_bigints.html#strict-equality-and-inequality)
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.4.5 [严格相等（`===`）和不等（`!==`）](ch_bigints.html#strict-equality-and-inequality)
- en: 18.5 [The wrapper constructor `BigInt`](ch_bigints.html#the-wrapper-constructor-bigint)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.5 [包装构造函数`BigInt`](ch_bigints.html#the-wrapper-constructor-bigint)
- en: 18.5.1 [`BigInt` as a constructor and as a function](ch_bigints.html#bigint-as-a-constructor-and-as-a-function)
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.5.1 [`BigInt`作为构造函数和作为函数](ch_bigints.html#bigint-as-a-constructor-and-as-a-function)
- en: 18.5.2 [`BigInt.prototype.*` methods](ch_bigints.html#bigint.prototype.-methods)
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.5.2 [`BigInt.prototype.*` 方法](ch_bigints.html#bigint.prototype.-methods)
- en: 18.5.3 [`BigInt.*` methods](ch_bigints.html#bigint.-methods)
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.5.3 [`BigInt.*` 方法](ch_bigints.html#bigint.-methods)
- en: 18.5.4 [Casting and 64-bit integers](ch_bigints.html#casting-and-64-bit-integers)
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.5.4 [强制转换和64位整数](ch_bigints.html#casting-and-64-bit-integers)
- en: 18.6 [Coercing bigints to other primitive types](ch_bigints.html#coercing-bigints-to-other-primitive-types)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.6 [将bigints强制转换为其他原始类型](ch_bigints.html#coercing-bigints-to-other-primitive-types)
- en: 18.7 [TypedArrays and DataView operations for 64-bit values](ch_bigints.html#typedarrays-and-dataview-operations-for-64-bit-values)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.7 [64位值的TypedArrays和DataView操作](ch_bigints.html#typedarrays-and-dataview-operations-for-64-bit-values)
- en: 18.8 [Bigints and JSON](ch_bigints.html#bigints-and-json)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.8 [Bigints和JSON](ch_bigints.html#bigints-and-json)
- en: 18.8.1 [Stringifying bigints](ch_bigints.html#stringifying-bigints)
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.8.1 [将bigints转换为字符串](ch_bigints.html#stringifying-bigints)
- en: 18.8.2 [Parsing bigints](ch_bigints.html#parsing-bigints)
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.8.2 [解析大整数](ch_bigints.html#parsing-bigints)
- en: '18.9 [FAQ: Bigints](ch_bigints.html#faq-bigints)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.9 [常见问题：Bigints](ch_bigints.html#faq-bigints)
- en: 18.9.1 [How do I decide when to use numbers and when to use bigints?](ch_bigints.html#how-do-i-decide-when-to-use-numbers-and-when-to-use-bigints)
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.9.1 [我如何决定何时使用数字，何时使用bigints？](ch_bigints.html#how-do-i-decide-when-to-use-numbers-and-when-to-use-bigints)
- en: 18.9.2 [Why not just increase the precision of numbers in the same manner as
    is done for bigints?](ch_bigints.html#why-not-just-increase-the-precision-of-numbers-in-the-same-manner-as-is-done-for-bigints)
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 18.9.2 [为什么不像bigints一样增加数字的精度？](ch_bigints.html#why-not-just-increase-the-precision-of-numbers-in-the-same-manner-as-is-done-for-bigints)
- en: '* * *'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In this chapter, we take a look at *bigints*, JavaScript’s integers whose storage
    space grows and shrinks as needed.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看一下*bigints*，JavaScript的整数，其存储空间会根据需要增长和缩小。
- en: 18.1 Why bigints?
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 18.1 为什么bigints？
- en: 'Before ECMAScript 2020, JavaScript handled integers as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在ECMAScript 2020之前，JavaScript处理整数如下：
- en: 'There only was a single type for floating point numbers and integers: 64-bit
    floating point numbers (IEEE 754 double precision).'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点数和整数只有一个类型：64位浮点数（IEEE 754双精度）。
- en: 'Under the hood, most JavaScript engines transparently supported integers: If
    a number has no decimal digits and is within a certain range, it can internally
    be stored as a genuine integer. This representation is called *small integer*
    and usually fits into 32 bits. For example, the range of small integers on the
    64-bit version of the V8 engine is from −2^(31) to 2^(31)−1 ([source](https://medium.com/fhinkel/v8-internals-how-small-is-a-small-integer-e0badc18b6da)).'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在幕后，大多数JavaScript引擎透明地支持整数：如果一个数字没有小数位并且在某个范围内，它可以在内部存储为真正的整数。这种表示称为*小整数*，通常适合32位。例如，在V8引擎的64位版本上，小整数的范围是从-2^(31)到2^(31)-1（来源）。
- en: JavaScript numbers could also represent integers beyond the small integer range,
    as floating point numbers. Here, the safe range is plus/minus 53 bits. For more
    information on this topic, see [§16.9.3 “Safe integers”](ch_numbers.html#safe-integers).
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript数字也可以表示超出小整数范围的整数，作为浮点数。在这里，安全范围是加/减53位。有关此主题的更多信息，请参见[§16.9.3“安全整数”](ch_numbers.html#safe-integers)。
- en: 'Sometimes, we need more than signed 53 bits – for example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要超过有符号的53位 - 例如：
- en: Twitter uses 64-bit integers as IDs for tweets ([source](https://dev.twitter.com/overview/api/twitter-ids-json-and-snowflake)).
    In JavaScript, these IDs had to be stored in strings.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twitter使用64位整数作为推文的ID（来源）。在JavaScript中，这些ID必须存储为字符串。
- en: Financial technology uses so-called *big integers* (integers with arbitrary
    precision) to represent amounts of money. Internally, the amounts are multiplied
    so that the decimal numbers disappear. For example, USD amounts are multiplied
    by 100 so that the cents disappear.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融技术使用所谓的*大整数*（具有任意精度的整数）来表示货币金额。在内部，金额被乘以一个数，以便十进制数消失。例如，美元金额被乘以100，以便消失掉美分。
- en: 18.2 Bigints
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 18.2 Bigints
- en: '*Bigint* is a new primitive data type for integers. Bigints don’t have a fixed
    storage size in bits; their sizes adapt to the integers they represent:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*Bigint*是一个新的整数原始数据类型。大整数的存储大小没有固定的位数；它们的大小会根据它们所表示的整数而调整：'
- en: Small integers are represented with fewer bits than large integers.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小整数的位数比大整数少。
- en: There is no negative lower limit or positive upper limit for the integers that
    can be represented.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以表示的整数没有负的下限或正的上限。
- en: 'A bigint literal is a sequence of one or more digits, suffixed with an `n`
    – for example:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 大整数文字是一个由一个或多个数字组成的序列，后面跟着一个 `n` - 例如：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Operators such as `-` and `*` are overloaded and work with bigints:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如 `-` 和 `*` 这样的运算符被重载并且可以与大整数一起使用：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Bigints are primitive values. `typeof` returns a new result for them:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 大整数是原始值。`typeof` 为它们返回一个新的结果：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 18.2.1 Going beyond 53 bits for integers
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 18.2.1 超过53位的整数
- en: 'JavaScript numbers are internally represented as a fraction multiplied by an
    exponent (see [§16.8 “Background: floating point precision”](ch_numbers.html#background-floating-point-precision)
    for details). As a consequence, if we go beyond the highest [*safe integer*](ch_numbers.html#safe-integers)
    2^(53)−1, there are still *some* integers that can be represented, but with gaps
    between them:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript数字在内部表示为一个乘以指数的分数（有关详细信息，请参见[§16.8“背景：浮点精度”](ch_numbers.html#background-floating-point-precision)）。因此，如果我们超过了最高的[*安全整数*](ch_numbers.html#safe-integers)
    2^(53)−1，仍然有*一些*整数可以表示，但它们之间存在间隙：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Bigints enable us to go beyond 53 bits:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 大整数使我们能够超过53位：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '18.2.2 Example: using bigints'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 18.2.2 示例：使用大整数
- en: 'This is what using bigints looks like (code based on an example in the proposal):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是使用大整数的样子（基于提案中的一个例子）：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 18.3 Bigint literals
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 18.3 大整数文字
- en: 'Like number literals, bigint literals support several bases:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 与数字文字一样，大整数文字支持几种基数：
- en: 'Decimal: `123n`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 十进制：`123n`
- en: 'Hexadecimal: `0xFFn`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 十六进制：`0xFFn`
- en: 'Binary: `0b1101n`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制：`0b1101n`
- en: 'Octal: `0o777n`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 八进制：`0o777n`
- en: 'Negative bigints are produced by prefixing the unary minus operator: `-0123n`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 负大整数是通过在数字前加上一元减号操作符来产生的：`-0123n`
- en: 18.3.1 Underscores (`_`) as separators in bigint literals [ES2021]
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 18.3.1 大整数文字中的下划线（`_`）作为分隔符 [ES2021]
- en: '[Just like in number literals](ch_numbers.html#numeric-separator-number-literals),
    we can use underscores (`_`) as separators in bigint literals:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[就像在数字文字中一样](ch_numbers.html#numeric-separator-number-literals)，我们可以在大整数文字中使用下划线（`_`）作为分隔符：'
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Bigints are often used to represent money in the financial technical sector.
    Separators can help here, too:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 大整数经常用于在金融技术领域表示货币。分隔符在这里也有帮助：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As with number literals, two restrictions apply:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 与数字文字一样，有两个限制：
- en: We can only put an underscore between two digits.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们只能在两个数字之间放一个下划线。
- en: We can use at most one underscore in a row.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们最多可以连续使用一个下划线。
- en: 18.4 Reusing number operators for bigints (overloading)
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 18.4 重用大整数的数字运算符（重载）
- en: 'With most operators, we are not allowed to mix bigints and numbers. If we do,
    exceptions are thrown:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数运算符，我们不允许混合使用大整数和数字。如果这样做，就会抛出异常：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The reason for this rule is that there is no general way of coercing a number
    and a bigint to a common type: numbers can’t represent bigints beyond 53 bits,
    bigints can’t represent fractions. Therefore, the exceptions warn us about typos
    that may lead to unexpected results.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个规则的原因是没有一般的方法来强制一个数字和一个大整数转换为一个公共类型：数字无法表示超过53位的大整数，大整数无法表示分数。因此，这些异常警告我们可能导致意外结果的拼写错误。
- en: For example, should the result of the following expression be `9007199254740993n`
    or `9007199254740992`?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下表达式的结果应该是 `9007199254740993n` 还是 `9007199254740992`？
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It is also not clear what the result of the following expression should be:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表达式的结果也不清楚：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 18.4.1 Arithmetic operators
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 18.4.1 算术运算符
- en: 'Binary `+`, binary `-`, `*`, `**` work as expected:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制 `+`，二进制 `-`，`*`，`**` 的工作方式与预期相同：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'It is OK to mix bigints and strings:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 混合使用大整数和字符串是可以的：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`/`, `%` round towards zero (like `Math.trunc()`):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`/`，`%` 向零舍入（就像 `Math.trunc()`）：'
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Unary `-` works as expected:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一元 `-` 的工作方式与预期相同：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Unary `+` is not supported for bigints because much code relies on it coercing
    its operand to number:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 大整数不支持一元 `+`，因为很多代码依赖于它将其操作数强制转换为数字：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 18.4.2 Ordering operators
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 18.4.2 排序运算符
- en: 'Ordering operators `<`, `>`, `>=`, `<=` work as expected:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 排序运算符 `<`，`>`，`>=`，`<=` 的工作方式与预期相同：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Comparing bigints and numbers does not pose any risks. Therefore, we can mix
    bigints and numbers:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 比较大整数和数字不会带来任何风险。因此，我们可以混合使用大整数和数字：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 18.4.3 Bitwise operators
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 18.4.3 按位运算符
- en: 18.4.3.1 Bitwise operators for numbers
  id: totrans-96
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 18.4.3.1 数字的按位运算符
- en: 'Bitwise operators interpret numbers as 32-bit integers. These integers are
    either unsigned or signed. If they are signed, the negative of an integer is its
    *two’s complement* (adding an integer to its two’s complement – while ignoring
    overflow – produces zero):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 按位运算符将数字解释为32位整数。这些整数可以是无符号的，也可以是有符号的。如果它们是有符号的，那么一个整数的负数是它的*二进制补码*（将一个整数加上它的二进制补码
    - 忽略溢出 - 会得到零）：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Due to these integers having a fixed size, their highest bits indicate their
    signs:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些整数具有固定的大小，它们的最高位表示它们的符号：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 18.4.3.2 Bitwise operators for bigints
  id: totrans-101
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 18.4.3.2 大整数的按位运算符
- en: 'For bigints, bitwise operators interpret a negative sign as an infinite two’s
    complement – for example:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大整数，按位运算符将负号解释为无限的二进制补码 - 例如：
- en: '`-1` is `···111111` (ones extend infinitely to the left)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-1` 是 `···111111`（1无限扩展到左边）'
- en: '`-2` is `···111110`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-2` 是 `···111110`'
- en: '`-3` is `···111101`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-3` 是 `···111101`'
- en: '`-4` is `···111100`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-4` 是 `···111100`'
- en: That is, a negative sign is more of an external flag and not represented as
    an actual bit.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，负号更像是一个外部标志，而不是实际表示为一个位。
- en: 18.4.3.3 Bitwise Not (`~`)
  id: totrans-108
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 18.4.3.3 按位取反（`~`）
- en: 'Bitwise Not (`~`) inverts all bits:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 按位取反（`~`）反转所有位：
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 18.4.3.4 Binary bitwise operators (`&`, `|`, `^`)
  id: totrans-111
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 18.4.3.4 二进制按位运算符（`&`，`|`，`^`）
- en: 'Applying binary bitwise operators to bigints works analogously to applying
    them to numbers:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 将二进制按位运算符应用于大整数的工作方式类似于将它们应用于数字：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 18.4.3.5 Bitwise signed shift operators (`<<` and `>>`)
  id: totrans-114
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 18.4.3.5 按位有符号移位运算符（`<<` 和 `>>`）
- en: 'The signed shift operators for bigints preserve the sign of a number:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: bigint 的有符号移位运算符保留数字的符号：
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Recall that `-1n` is a sequence of ones that extends infinitely to the left.
    That’s why shifting it left doesn’t change it:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，`-1n` 是一个向左无限延伸的一系列数字。这就是为什么将其向左移动不会改变它的原因：
- en: '[PRE23]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 18.4.3.6 Bitwise unsigned right shift operator (`>>>`)
  id: totrans-119
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 18.4.3.6 位无符号右移运算符 (`>>>`)
- en: 'There is no unsigned right shift operator for bigints:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: bigint 没有无符号右移运算符：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Why? The idea behind unsigned right shifting is that a zero is shifted in “from
    the left”. In other words, the assumption is that there is a finite amount of
    binary digits.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么？无符号右移的想法是从“左边”移入一个零。换句话说，假设是有限数量的二进制数字。
- en: However, with bigints, there is no “left”, their binary digits extend infinitely.
    This is especially important with negative numbers.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于 bigint，没有“左”，它们的二进制数字无限延伸。这在处理负数时尤为重要。
- en: Signed right shift works even with an infinite number of digits because the
    highest digit is preserved. Therefore, it can be adapted to bigints.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号右移即使在有无限位数的情况下也可以工作，因为最高位数字被保留。因此，它可以适应 bigint。
- en: 18.4.4 Loose equality (`==`) and inequality (`!=`)
  id: totrans-125
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 18.4.4 宽松相等 (`==`) 和不等 (`!=`)
- en: 'Loose equality (`==`) and inequality (`!=`) coerce values:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 宽松相等 (`==`) 和不等 (`!=`) 强制转换值：
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 18.4.5 Strict equality (`===`) and inequality (`!==`)
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 18.4.5 严格相等 (`===`) 和不等 (`!==`)
- en: 'Strict equality (`===`) and inequality (`!==`) only consider values to be equal
    if they have the same type:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 严格相等 (`===`) 和不等 (`!==`) 只有在它们具有相同类型时才被认为是相等的：
- en: '[PRE26]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 18.5 The wrapper constructor `BigInt`
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 18.5 包装构造函数 `BigInt`
- en: Analogously to numbers, bigints have the associated wrapper constructor `BigInt`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于数字，bigint 有关联的包装构造函数 `BigInt`。
- en: 18.5.1 `BigInt` as a constructor and as a function
  id: totrans-133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 18.5.1 `BigInt` 作为构造函数和作为函数
- en: '`new BigInt()`: throws a `TypeError`.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new BigInt()`: 抛出 `TypeError`。'
- en: '`BigInt(x)` converts arbitrary values `x` to bigint. This works similarly to
    `Number()`, with several differences which are summarized in tbl. [13](#tbl:converting-values-to-bigints)
    and explained in more detail in the following subsections.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BigInt(x)` 将任意值 `x` 转换为 bigint。这类似于 `Number()`，但有几个不同之处，这些不同之处在 tbl. [13](#tbl:converting-values-to-bigints)
    中总结，并在以下小节中详细解释。'
- en: 'Table 13: Converting values to bigints.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 表 13：将值转换为 bigint。
- en: '| `x` | `BigInt(x)` |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `x` | `BigInt(x)` |'
- en: '| --- | --- |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `undefined` | Throws `TypeError` |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `undefined` | 抛出 `TypeError` |'
- en: '| `null` | Throws `TypeError` |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `null` | 抛出 `TypeError` |'
- en: '| boolean | `false` `→` `0n`, `true` `→` `1n` |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 布尔值 | `false` `→` `0n`, `true` `→` `1n` |'
- en: '| number | Example: `123` `→` `123n` |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| 数字 | 例子：`123` `→` `123n` |'
- en: '|  | Non-integer `→` throws `RangeError` |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '|  | 非整数 `→` 抛出 `RangeError` |'
- en: '| bigint | `x` (no change) |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| bigint | `x` (不变) |'
- en: '| string | Example: `''123''` `→` `123n` |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| 字符串 | 例子：`''123''` `→` `123n` |'
- en: '|  | Unparsable `→` throws `SyntaxError` |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '|  | 无法解析的 `→` 抛出 `SyntaxError` |'
- en: '| symbol | Throws `TypeError` |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 符号 | 抛出 `TypeError` |'
- en: '| object | Configurable (e.g. via `.valueOf()`) |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 对象 | 可配置的（例如通过 `.valueOf()`） |'
- en: 18.5.1.1 Converting `undefined` and `null`
  id: totrans-149
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 18.5.1.1 转换 `undefined` 和 `null`
- en: 'A `TypeError` is thrown if `x` is either `undefined` or `null`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `x` 是 `undefined` 或 `null`，则抛出 `TypeError`：
- en: '[PRE27]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 18.5.1.2 Converting strings
  id: totrans-152
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 18.5.1.2 转换字符串
- en: 'If a string does not represent an integer, `BigInt()` throws a `SyntaxError`
    (whereas `Number()` returns the error value `NaN`):'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个字符串不表示整数，`BigInt()` 抛出 `SyntaxError`（而 `Number()` 返回错误值 `NaN`）：
- en: '[PRE28]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The suffix `''n''` is not allowed:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 后缀 `'n'` 是不允许的：
- en: '[PRE29]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'All bases of bigint literals are allowed:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: bigint 文字的所有基数都是允许的：
- en: '[PRE30]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 18.5.1.3 Non-integer numbers produce exceptions
  id: totrans-159
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 18.5.1.3 非整数数字会产生异常
- en: '[PRE31]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 18.5.1.4 Converting objects
  id: totrans-161
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 18.5.1.4 转换对象
- en: 'How objects are converted to bigints can be configured – for example, by overriding
    `.valueOf()`:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如何将对象转换为 bigint 可以进行配置 - 例如，通过覆盖 `.valueOf()`：
- en: '[PRE32]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 18.5.2 `BigInt.prototype.*` methods
  id: totrans-164
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 18.5.2 `BigInt.prototype.*` 方法
- en: '`BigInt.prototype` holds the methods “inherited” by primitive bigints:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`BigInt.prototype` 包含了原始 bigint “继承”的方法：'
- en: '`BigInt.prototype.toLocaleString(locales?, options?)`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BigInt.prototype.toLocaleString(locales?, options?)`'
- en: '`BigInt.prototype.toString(radix?)`'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BigInt.prototype.toString(radix?)`'
- en: '`BigInt.prototype.valueOf()`'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BigInt.prototype.valueOf()`'
- en: 18.5.3 `BigInt.*` methods
  id: totrans-169
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 18.5.3 `BigInt.*` 方法
- en: '`BigInt.asIntN(width, theInt)`'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BigInt.asIntN(width, theInt)`'
- en: Casts `theInt` to `width` bits (signed). This influences how the value is represented
    internally.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 `theInt` 转换为 `width` 位（有符号）。这会影响值在内部的表示方式。
- en: '`BigInt.asUintN(width, theInt)`'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BigInt.asUintN(width, theInt)`'
- en: Casts `theInt` to `width` bits (unsigned).
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 `theInt` 转换为 `width` 位（无符号）。
- en: 18.5.4 Casting and 64-bit integers
  id: totrans-174
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 18.5.4 强制转换和 64 位整数
- en: 'Casting allows us to create integer values with a specific number of bits.
    If we want to restrict ourselves to just 64-bit integers, we have to always cast:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 强制转换允许我们创建具有特定位数的整数值。如果我们想要限制自己只使用 64 位整数，我们必须始终进行强制转换：
- en: '[PRE33]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 18.6 Coercing bigints to other primitive types
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 18.6 将 bigint 强制转换为其他原始类型
- en: 'This table show what happens if we convert bigints to other primitive types:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表格展示了如果我们将 bigint 转换为其他原始类型会发生什么：
- en: '| Convert to | Explicit conversion | Coercion (implicit conversion) |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| 转换为 | 显式转换 | 强制转换（隐式转换） |'
- en: '| --- | --- | --- |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| boolean | `Boolean(0n)` `→` `false` | `!0n` `→` `true` |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| 布尔值 | `Boolean(0n)` `→` `false` | `!0n` `→` `true` |'
- en: '|  | `Boolean(int)` `→` `true` | `!int` `→` `false` |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '|  | `Boolean(int)` `→` `true` | `!int` `→` `false` |'
- en: '| number | `Number(7n)` `→` `7` (example) | `+int` `→` `TypeError` (1) |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 数字 | `Number(7n)` `→` `7` (例子) | `+int` `→` `TypeError` (1) |'
- en: '| string | `String(7n)` `→` `''7''` (example) | `''''+7n` `→` `''7''` (example)
    |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| 字符串 | `String(7n)` `→` `''7''` (例子) | `''''+7n` `→` `''7''` (例子) |'
- en: 'Footnote:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 注释：
- en: (1) Unary `+` is not supported for bigints, because much code relies on it coercing
    its operand to number.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (1) 由于很多代码依赖于它将其操作数强制转换为数字，因此 bigint 不支持一元 `+`。
- en: 18.7 TypedArrays and DataView operations for 64-bit values
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 18.7 64 位值的 TypedArrays 和 DataView 操作
- en: 'Thanks to bigints, Typed Arrays and DataViews can support 64-bit values:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 bigint，Typed Arrays 和 DataViews 可以支持 64 位值。
- en: 'Typed Array constructors:'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型化数组构造函数：
- en: '`BigInt64Array`'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BigInt64Array`'
- en: '`BigUint64Array`'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BigUint64Array`'
- en: 'DataView methods:'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DataView 方法：
- en: '`DataView.prototype.getBigInt64()`'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataView.prototype.getBigInt64()`'
- en: '`DataView.prototype.setBigInt64()`'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataView.prototype.setBigInt64()`'
- en: '`DataView.prototype.getBigUint64()`'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataView.prototype.getBigUint64()`'
- en: '`DataView.prototype.setBigUint64()`'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataView.prototype.setBigUint64()`'
- en: 18.8 Bigints and JSON
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 18.8 Bigints和JSON
- en: The JSON standard is fixed and won’t change. The upside is that old JSON parsing
    code will never be outdated. The downside is that JSON can’t be extended to contain
    bigints.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: JSON标准是固定的，不会改变。好处是旧的JSON解析代码永远不会过时。坏处是JSON无法扩展以包含bigint。
- en: 'Stringifying bigints throws exceptions:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 序列化bigint会抛出异常：
- en: '[PRE34]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 18.8.1 Stringifying bigints
  id: totrans-201
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 18.8.1 序列化bigint
- en: 'Therefore, our best option is to store bigints in strings:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们最好的选择是将bigint存储为字符串：
- en: '[PRE35]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 18.8.2 Parsing bigints
  id: totrans-204
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 18.8.2 解析bigint
- en: The following code shows how to parse strings such as the one that we have produced
    in the previous example.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了如何解析诸如我们在前面示例中生成的字符串。
- en: '[PRE36]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '18.9 FAQ: Bigints'
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 18.9 常见问题：Bigints
- en: 18.9.1 How do I decide when to use numbers and when to use bigints?
  id: totrans-208
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 18.9.1 我如何决定何时使用数字，何时使用bigint？
- en: 'My recommendations:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我的建议：
- en: 'Use numbers for up to 53 bits and for Array indices. Rationale: They already
    appear everywhere and are handled efficiently by most engines (especially if they
    fit into 31 bits). Appearances include:'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于最多53位和数组索引，请使用数字。原因是：它们已经随处可见，并且大多数引擎都可以高效处理它们（特别是如果它们适合31位）。出现的情况包括：
- en: '`Array.prototype.forEach()`'
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Array.prototype.forEach()`'
- en: '`Array.prototype.entries()`'
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Array.prototype.entries()`'
- en: 'Use bigints for large numeric values: If your fraction-less values don’t fit
    into 53 bits, you have no choice but to move to bigints.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于大数值，请使用bigint：如果您的无小数数值不适合53位，那么您别无选择，只能转为bigint。
- en: All existing web APIs return and accept only numbers and will only upgrade to
    bigint on a case-by-case basis.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现有的web API只返回和接受数字，并且只会在特定情况下升级为bigint。
- en: 18.9.2 Why not just increase the precision of numbers in the same manner as
    is done for bigints?
  id: totrans-215
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 18.9.2 为什么不像bigint一样增加数字的精度？
- en: One could conceivably split `number` into `integer` and `double`, but that would
    add many new complexities to the language (several integer-only operators etc.).
    I’ve sketched the consequences in [a Gist](https://gist.github.com/rauschma/13d48d1c49615ce2396ce7c9e45d4cd1).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 可以想象将`number`分成`integer`和`double`，但这将给语言增加许多新的复杂性（几个仅限整数的运算符等）。我在[a Gist](https://gist.github.com/rauschma/13d48d1c49615ce2396ce7c9e45d4cd1)中勾勒了后果。
- en: '* * *'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Acknowledgements:**'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '**致谢：**'
- en: Thanks to Daniel Ehrenberg for reviewing an earlier version of this content.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 感谢Daniel Ehrenberg对此内容的早期版本进行审查。
- en: Thanks to Dan Callahan for reviewing an earlier version of this content.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 感谢Dan Callahan对此内容的早期版本进行审查。
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/50)'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/impatient-js/issues/50)'
