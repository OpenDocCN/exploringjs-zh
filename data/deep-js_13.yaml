- en: '9 Property attributes: an introduction'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9 属性属性：介绍
- en: 原文：[https://exploringjs.com/deep-js/ch_property-attributes-intro.html](https://exploringjs.com/deep-js/ch_property-attributes-intro.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/deep-js/ch_property-attributes-intro.html](https://exploringjs.com/deep-js/ch_property-attributes-intro.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 9.1 [The structure of objects](ch_property-attributes-intro.html#the-structure-of-objects)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.1 [对象的结构](ch_property-attributes-intro.html#the-structure-of-objects)
- en: 9.1.1 [Internal slots](ch_property-attributes-intro.html#internal-slots)
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.1.1 [内部插槽](ch_property-attributes-intro.html#internal-slots)
- en: 9.1.2 [Property keys](ch_property-attributes-intro.html#property-keys)
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.1.2 [属性键](ch_property-attributes-intro.html#property-keys)
- en: 9.1.3 [Property attributes](ch_property-attributes-intro.html#property-attributes)
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.1.3 [属性属性](ch_property-attributes-intro.html#property-attributes)
- en: 9.2 [Property descriptors](ch_property-attributes-intro.html#property-descriptors)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.2 [属性描述符](ch_property-attributes-intro.html#property-descriptors)
- en: 9.3 [Retrieving descriptors for properties](ch_property-attributes-intro.html#retrieving-descriptors-for-properties)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.3 [检索属性的描述符](ch_property-attributes-intro.html#retrieving-descriptors-for-properties)
- en: '9.3.1 [`Object.getOwnPropertyDescriptor()`: retrieving a descriptor for a single
    property](ch_property-attributes-intro.html#object.getownpropertydescriptor-retrieving-a-descriptor-for-a-single-property)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '9.3.1 [`Object.getOwnPropertyDescriptor()`: 检索单个属性的描述符](ch_property-attributes-intro.html#object.getownpropertydescriptor-retrieving-a-descriptor-for-a-single-property)'
- en: '9.3.2 [`Object.getOwnPropertyDescriptors()`: retrieving descriptors for all
    properties of an object](ch_property-attributes-intro.html#object.getownpropertydescriptors-retrieving-descriptors-for-all-properties-of-an-object)'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '9.3.2 [`Object.getOwnPropertyDescriptors()`: 检索对象所有属性的描述符](ch_property-attributes-intro.html#object.getownpropertydescriptors-retrieving-descriptors-for-all-properties-of-an-object)'
- en: 9.4 [Defining properties via descriptors](ch_property-attributes-intro.html#defining-properties-via-descriptors)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.4 [通过描述符定义属性](ch_property-attributes-intro.html#defining-properties-via-descriptors)
- en: '9.4.1 [`Object.defineProperty()`: defining single properties via descriptors](ch_property-attributes-intro.html#object.defineproperty-defining-single-properties-via-descriptors)'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '9.4.1 [`Object.defineProperty()`: 通过描述符定义单个属性](ch_property-attributes-intro.html#object.defineproperty-defining-single-properties-via-descriptors)'
- en: '9.4.2 [`Object.defineProperties()`: defining multiple properties via descriptors](ch_property-attributes-intro.html#object.defineproperties-defining-multiple-properties-via-descriptors)'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '9.4.2 [`Object.defineProperties()`: 通过描述符定义多个属性](ch_property-attributes-intro.html#object.defineproperties-defining-multiple-properties-via-descriptors)'
- en: '9.5 [`Object.create()`: Creating objects via descriptors](ch_property-attributes-intro.html#object.create-creating-objects-via-descriptors)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '9.5 [`Object.create()`: 通过描述符创建对象](ch_property-attributes-intro.html#object.create-creating-objects-via-descriptors)'
- en: 9.6 [Use cases for `Object.getOwnPropertyDescriptors()`](ch_property-attributes-intro.html#use-cases-for-object.getownpropertydescriptors)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.6 [`Object.getOwnPropertyDescriptors()`的用例](ch_property-attributes-intro.html#use-cases-for-object.getownpropertydescriptors)
- en: '9.6.1 [Use case: copying properties into an object](ch_property-attributes-intro.html#use-case-copying-properties-into-an-object)'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.6.1 [用例：将属性复制到对象中](ch_property-attributes-intro.html#use-case-copying-properties-into-an-object)
- en: '9.6.2 [Use case for `Object.getOwnPropertyDescriptors()`: cloning objects](ch_property-attributes-intro.html#use-case-for-object.getownpropertydescriptors-cloning-objects)'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.6.2 [`Object.getOwnPropertyDescriptors()`的用例：克隆对象](ch_property-attributes-intro.html#use-case-for-object.getownpropertydescriptors-cloning-objects)
- en: 9.7 [Omitting descriptor properties](ch_property-attributes-intro.html#omitting-descriptor-properties)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.7 [省略描述符属性](ch_property-attributes-intro.html#omitting-descriptor-properties)
- en: 9.7.1 [Omitting descriptor properties when creating properties](ch_property-attributes-intro.html#omitting-descriptor-properties-when-creating-properties)
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.7.1 [在创建属性时省略描述符属性](ch_property-attributes-intro.html#omitting-descriptor-properties-when-creating-properties)
- en: 9.7.2 [Omitting descriptor properties when changing properties](ch_property-attributes-intro.html#omitting-descriptor-properties-when-changing-properties)
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.7.2 [在更改属性时省略描述符属性](ch_property-attributes-intro.html#omitting-descriptor-properties-when-changing-properties)
- en: 9.8 [What property attributes do built-in constructs use?](ch_property-attributes-intro.html#what-property-attributes-do-built-in-constructs-use)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.8 [内置构造使用什么属性属性？](ch_property-attributes-intro.html#what-property-attributes-do-built-in-constructs-use)
- en: 9.8.1 [Own properties created via assignment](ch_property-attributes-intro.html#own-properties-created-via-assignment)
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.8.1 [通过赋值创建的自有属性](ch_property-attributes-intro.html#own-properties-created-via-assignment)
- en: 9.8.2 [Own properties created via object literals](ch_property-attributes-intro.html#own-properties-created-via-object-literals)
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.8.2 [通过对象字面量创建的自有属性](ch_property-attributes-intro.html#own-properties-created-via-object-literals)
- en: 9.8.3 [The own property `.length` of Arrays](ch_property-attributes-intro.html#the-own-property-.length-of-arrays)
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.8.3 [数组的自有属性`.length`](ch_property-attributes-intro.html#the-own-property-.length-of-arrays)
- en: 9.8.4 [Prototype properties of built-in classes](ch_property-attributes-intro.html#prototype-properties-of-built-in-classes)
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.8.4 [内置类的原型属性](ch_property-attributes-intro.html#prototype-properties-of-built-in-classes)
- en: 9.8.5 [Prototype properties and instance properties of user-defined classes](ch_property-attributes-intro.html#prototype-properties-and-instance-properties-of-user-defined-classes)
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.8.5 [用户定义类的原型属性和实例属性](ch_property-attributes-intro.html#prototype-properties-and-instance-properties-of-user-defined-classes)
- en: '9.9 [API: property descriptors](ch_property-attributes-intro.html#api-property-descriptors)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.9 [API：属性描述符](ch_property-attributes-intro.html#api-property-descriptors)
- en: 9.10 [Further reading](ch_property-attributes-intro.html#further-reading-1)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.10 [进一步阅读](ch_property-attributes-intro.html#further-reading-1)
- en: '* * *'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In this chapter, we take a closer look at how the ECMAScript specification sees
    JavaScript objects. In particular, properties are not atomic in the spec, but
    composed of multiple *attributes* (think fields in a record). Even the value of
    a data property is stored in an attribute!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们更详细地了解了ECMAScript规范如何看待JavaScript对象。特别是，在规范中，属性不是原子的，而是由多个*属性*（类似记录中的字段）组成。甚至数据属性的值也存储在属性中！
- en: 9.1 The structure of objects
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9.1 对象的结构
- en: '[In the ECMAScript specification](https://tc39.es/ecma262/#sec-object-type),
    an object consists of:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[在ECMAScript规范中](https://tc39.es/ecma262/#sec-object-type)，对象由以下组成：'
- en: '*Internal slots*, which are storage locations that are not accessible from
    JavaScript, only from operations in the specification.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*内部槽*是存储位置，无法从JavaScript访问，只能从规范中的操作访问。'
- en: A collection of *properties*. Each property associates a *key* with *attributes*
    (think fields in a record).
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*属性*的集合。每个属性将*键*与*属性*（类似于记录中的字段）关联起来。'
- en: 9.1.1 Internal slots
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 9.1.1 内部槽
- en: '[The specification](https://tc39.es/ecma262/#sec-object-internal-methods-and-internal-slots)
    describes internal slots as follows. I added bullet points and emphasized one
    part:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[规范](https://tc39.es/ecma262/#sec-object-internal-methods-and-internal-slots)描述了内部槽如下。我添加了项目符号并强调了一部分：'
- en: Internal slots correspond to internal state that is associated with objects
    and used by various ECMAScript specification algorithms.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部槽对应于与对象关联并由各种ECMAScript规范算法使用的内部状态。
- en: Internal slots are not object properties and they are not inherited.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部槽不是对象属性，也不会被继承。
- en: 'Depending upon the specific internal slot specification, such state may consist
    of:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据特定的内部槽规范，这种状态可能包括：
- en: values of any ECMAScript language type or
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何ECMAScript语言类型的值或
- en: of specific ECMAScript specification type values.
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定ECMAScript规范类型值。
- en: Unless explicitly specified otherwise, internal slots are allocated as part
    of the process of creating an object and may not be dynamically added to an object.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非另有明确规定，否则内部槽将作为创建对象的过程的一部分分配，并且可能不会动态添加到对象中。
- en: Unless specified otherwise, the initial value of an internal slot is the value
    `undefined`.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非另有规定，内部槽的初始值为`undefined`。
- en: Various algorithms within this specification create objects that have internal
    slots. However, **the ECMAScript language provides no direct way to associate
    internal slots with an object**.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本规范中的各种算法创建具有内部槽的对象。然而，**ECMAScript语言没有直接的方法将内部槽与对象关联起来**。
- en: Internal methods and internal slots are identified within this specification
    using names enclosed in double square brackets `[[ ]]`.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本规范中，内部方法和内部槽使用双方括号`[[ ]]`括起来的名称进行标识。
- en: 'There are two kinds of internal slots:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的内部槽：
- en: Method slots for manipulating objects (getting properties, setting properties,
    etc.)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于操作对象的方法槽（获取属性，设置属性等）。
- en: Data slots that store values.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储值的数据槽。
- en: 'Ordinary objects have the following data slots:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 普通对象具有以下数据槽：
- en: '`.[[Prototype]]: null | object`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.[[Prototype]]: null | object`'
- en: Stores the prototype of an object.
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储对象的原型。
- en: Can be accessed indirectly via `Object.getPrototypeOf()` and `Object.setPrototypeOf()`.
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以通过`Object.getPrototypeOf()`和`Object.setPrototypeOf()`间接访问。
- en: '`.[[Extensible]]: boolean`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.[[Extensible]]: boolean`'
- en: Indicates if it is possible to add properties to an object.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指示是否可以向对象添加属性。
- en: Can be set to `false` via `Object.preventExtensions()`.
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以通过`Object.preventExtensions()`设置为`false`。
- en: '`.[[PrivateFieldValues]]: EntryList`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.[[PrivateFieldValues]]: EntryList`'
- en: Is used to manage [private class fields](https://2ality.com/2019/07/private-class-fields.html).
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于管理[私有类字段](https://2ality.com/2019/07/private-class-fields.html)。
- en: 9.1.2 Property keys
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 9.1.2 属性键
- en: 'The key of a property is either:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 属性的键可以是：
- en: A string
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字符串
- en: A symbol
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个符号
- en: 9.1.3 Property attributes
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 9.1.3 属性属性
- en: 'There are two kinds of properties and they are characterized by their attributes:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种属性，它们的特征是它们的属性：
- en: A *data property* stores data. Its attribute `value` holds any JavaScript value.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*数据属性*存储数据。它的属性`value`保存任何JavaScript值。'
- en: An *accessor property* consists of a getter function and/or a setter function.
    The former is stored in the attribute `get`, the latter in the attribute `set`.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*访问器属性*由getter函数和/或setter函数组成。前者存储在属性`get`中，后者存储在属性`set`中。'
- en: Additionally, there are attributes that both kinds of properties have. The following
    table lists all attributes and their default values.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，两种属性都具有的属性。以下表列出了所有属性及其默认值。
- en: '| Kind of property | Name and type of attribute | Default value |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 属性类型 | 属性名称和类型 | 默认值 |'
- en: '| --- | --- | --- |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Data property | `value: any` | `undefined` |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 数据属性 | `value: any` | `undefined` |'
- en: '|  | `writable: boolean` | `false` |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '|  | `writable: boolean` | `false` |'
- en: '| Accessor property | `get: (this: any) => any` | `undefined` |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 访问器属性 | `get: (this: any) => any` | `undefined` |'
- en: '|  | `set: (this: any, v: any) => void` | `undefined` |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '|  | `set: (this: any, v: any) => void` | `undefined` |'
- en: '| All properties | `configurable: boolean` | `false` |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 所有属性 | `configurable: boolean` | `false` |'
- en: '|  | `enumerable: boolean` | `false` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '|  | `enumerable: boolean` | `false` |'
- en: 'We have already encountered the attributes `value`, `get`, and `set`. The other
    attributes work as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经遇到了`value`，`get`和`set`属性。其他属性的工作方式如下：
- en: '`writable` determines if the value of a data property can be changed.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`writable`确定数据属性的值是否可以更改。'
- en: '`configurable` determines if the attributes of a property can be changed. If
    it is `false`, then:'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`configurable`确定属性的属性是否可以更改。如果为`false`，则：'
- en: We cannot delete the property.
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不能删除属性。
- en: We cannot change a property from a data property to an accessor property or
    vice versa.
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不能将属性从数据属性更改为访问器属性，反之亦然。
- en: We cannot change any attribute other than `value`.
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不能更改除`value`之外的任何属性。
- en: 'However, one more attribute change is allowed: We can change `writable` from
    `true` to `false`. The rationale behind this anomaly is [historical](https://stackoverflow.com/questions/9829817/why-can-i-set-enumerability-and-writability-of-unconfigurable-property-descrip/9843191#9843191):
    Property `.length` of Arrays has always been writable and non-configurable. Allowing
    its `writable` attribute to be changed enables us to freeze Arrays.'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但是，允许进行一次属性更改：我们可以将`writable`从`true`更改为`false`。这种异常背后的原因是[历史](https://stackoverflow.com/questions/9829817/why-can-i-set-enumerability-and-writability-of-unconfigurable-property-descrip/9843191#9843191)：数组的`.length`属性一直是可写的且不可配置的。允许更改其`writable`属性使我们能够冻结数组。
- en: '`enumerable` influences some operations (such as `Object.keys()`). If it is
    `false`, then those operations ignore the property. Most properties are enumerable
    (e.g. those created via assignment or object literals), which is why you’ll rarely
    notice this attribute in practice. If you are still interested in how it works,
    see [§12 “Enumerability of properties”](ch_enumerability.html).'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enumerable`会影响一些操作（例如`Object.keys()`）。如果它为`false`，那么这些操作会忽略该属性。大多数属性是可枚举的（例如通过赋值或对象文字创建的属性），这就是为什么你很少会在实践中注意到这个属性。如果你仍然对它的工作原理感兴趣，请参见[§12“属性的可枚举性”]。'
- en: '9.1.3.1 Pitfall: Inherited non-writable properties prevent creating own properties
    via assignment'
  id: totrans-83
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 9.1.3.1 陷阱：继承的不可写属性阻止通过赋值创建自有属性
- en: 'If an inherited property is non-writable, we can’t use assignment to create
    an own property with the same key:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果继承的属性是不可写的，我们就不能使用赋值来创建具有相同键的自有属性：
- en: '[PRE0]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For more information, see [§11.3.4 “Inherited read-only properties prevent creating
    own properties via assignment”](ch_property-assignment-vs-definition.html#inherited-properties-prevent-assignment).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参见[§11.3.4“继承的只读属性阻止通过赋值创建自有属性”]。
- en: 9.2 Property descriptors
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9.2 属性描述符
- en: A *property descriptor* encodes the attributes of a property as a JavaScript
    object. Their TypeScript interfaces look as follows.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*属性描述符*将属性的属性编码为JavaScript对象。它们的TypeScript接口如下所示。'
- en: '[PRE1]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The question marks indicate that all properties are optional. [§9.7 “Omitting
    descriptor properties”](ch_property-attributes-intro.html#omitting-descriptor-properties)
    describes what happens if they are omitted.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 问号表示所有属性都是可选的。[§9.7“省略描述符属性”]描述了如果省略它们会发生什么。
- en: 9.3 Retrieving descriptors for properties
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9.3 检索属性的描述符
- en: '9.3.1 `Object.getOwnPropertyDescriptor()`: retrieving a descriptor for a single
    property'
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '9.3.1 `Object.getOwnPropertyDescriptor()`: 检索单个属性的描述符'
- en: 'Consider the following object:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下对象：
- en: '[PRE2]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s first get a descriptor for the data property `.color`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先获取数据属性`.color`的描述符：
- en: '[PRE3]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is what the descriptor for the accessor property `.description` looks
    like:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 访问器属性`.description`的描述符如下所示：
- en: '[PRE4]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Using the utility function `desc()` in line A ensures that `.deepEqual()` works.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在A行使用实用函数`desc()`可以确保`.deepEqual()`起作用。
- en: '9.3.2 `Object.getOwnPropertyDescriptors()`: retrieving descriptors for all
    properties of an object'
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '9.3.2 `Object.getOwnPropertyDescriptors()`: 检索对象的所有属性的描述符'
- en: '[PRE5]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using the helper function `desc()` in line A ensures that `.deepEqual()` works.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在A行使用辅助函数`desc()`可以确保`.deepEqual()`起作用。
- en: 9.4 Defining properties via descriptors
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9.4 通过描述符定义属性
- en: 'If we define a property with the key `k` via a property descriptor `propDesc`,
    then what happens depends:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们通过属性描述符`propDesc`定义具有键`k`的属性，那么发生的情况取决于：
- en: If there is no property with key `k`, a new own property is created that has
    the attributes specified by `propDesc`.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有键为`k`的属性，则会创建一个具有`propDesc`指定的属性的新自有属性。
- en: If there is a property with key `k`, defining changes the property’s attributes
    so that they match `propDesc`.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果存在键为`k`的属性，定义会更改属性的属性，使其与`propDesc`匹配。
- en: '9.4.1 `Object.defineProperty()`: defining single properties via descriptors'
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '9.4.1 `Object.defineProperty()`: 通过描述符定义单个属性'
- en: 'First, let us create a new property via a descriptor:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们通过描述符创建一个新属性：
- en: '[PRE6]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we change the kind of a property via a descriptor; we turn a data property
    into a getter:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们通过描述符改变属性的种类；我们将数据属性转换为getter：
- en: '[PRE7]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Lastly, we change the value of a data property via a descriptor:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过描述符改变数据属性的值：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We have used the same property attributes as assignment.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了与赋值相同的属性属性。
- en: '9.4.2 `Object.defineProperties()`: defining multiple properties via descriptors'
  id: totrans-115
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '9.4.2 `Object.defineProperties()`: 通过描述符定义多个属性'
- en: '`Object.defineProperties()` is the multi-property version of ``Object.defineProperty()`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object.defineProperties()`是`Object.defineProperty()`的多属性版本：'
- en: '[PRE9]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '9.5 `Object.create()`: Creating objects via descriptors'
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '9.5 `Object.create()`: 通过描述符创建对象'
- en: '`Object.create()` creates a new object. Its first argument specifies the prototype
    of that object. Its optional second argument specifies descriptors for the properties
    of that object. In the next example, we create the same object as in the previous
    example.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object.create()`创建一个新对象。它的第一个参数指定该对象的原型。它的可选第二个参数指定该对象的属性的描述符。在下一个示例中，我们创建了与上一个示例中相同的对象。'
- en: '[PRE10]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 9.6 Use cases for `Object.getOwnPropertyDescriptors()`
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9.6 `Object.getOwnPropertyDescriptors()`的用例
- en: '`Object.getOwnPropertyDescriptors()` helps us with two use cases, if we combine
    it with `Object.defineProperties()` or `Object.create()`.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object.getOwnPropertyDescriptors()`在与`Object.defineProperties()`或`Object.create()`结合使用时，可以帮助我们处理两种用例。'
- en: '9.6.1 Use case: copying properties into an object'
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 9.6.1 用例：将属性复制到对象中
- en: 'Since ES6, JavaScript already has had a tool method for copying properties:
    `Object.assign()`. However, this method uses simple get and set operations to
    copy a property whose key is `key`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 自ES6以来，JavaScript已经有了一个用于复制属性的工具方法：`Object.assign()`。但是，该方法使用简单的获取和设置操作来复制键为`key`的属性：
- en: '[PRE11]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'That means that it only creates a faithful copy of a property if:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着只有在以下情况下才会创建属性的忠实副本：
- en: Its attribute `writable` is `true` and its attribute `enumerable` is `true`
    (because that’s how assignment creates properties).
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的属性`writable`为`true`，它的属性`enumerable`为`true`（因为这就是赋值创建属性的方式）。
- en: It is a data property.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一个数据属性。
- en: The following example illustrates this limitation. Object `source` has a setter
    whose key is `data`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了这个限制。对象`source`具有一个键为`data`的setter。
- en: '[PRE12]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If we use `Object.assign()` to copy property `data`, then the accessor property
    `data` is converted to a data property:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用`Object.assign()`来复制属性`data`，那么访问器属性`data`将被转换为数据属性：
- en: '[PRE13]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Fortunately, using `Object.getOwnPropertyDescriptors()` together with `Object.defineProperties()`
    does faithfully copy the property `data`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，使用`Object.getOwnPropertyDescriptors()`与`Object.defineProperties()`一起确实可以复制属性`data`：
- en: '[PRE14]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '9.6.1.1 Pitfall: copying methods that use `super`'
  id: totrans-135
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 9.6.1.1 陷阱：复制使用`super`的方法
- en: A method that uses `super` is firmly connected with its *home object* (the object
    it is stored in). There is currently no way to copy or move such a method to a
    different object.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`super`的方法与其*home object*（存储在其中的对象）紧密相关。目前没有办法将这样的方法复制或移动到不同的对象。
- en: '9.6.2 Use case for `Object.getOwnPropertyDescriptors()`: cloning objects'
  id: totrans-137
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 9.6.2 `Object.getOwnPropertyDescriptors()`的用例：克隆对象
- en: Shallow cloning is similar to copying properties, which is why `Object.getOwnPropertyDescriptors()`
    is a good choice here, too.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 浅克隆类似于复制属性，这就是为什么在这里使用`Object.getOwnPropertyDescriptors()`也是一个不错的选择。
- en: 'To create the clone, we use `Object.create()`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建克隆，我们使用`Object.create()`：
- en: '[PRE15]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: For more information on this topic, see [§6 “Copying objects and Arrays”](ch_copying-objects-and-arrays.html).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此主题的更多信息，请参阅[§6“复制对象和数组”](ch_copying-objects-and-arrays.html)。
- en: 9.7 Omitting descriptor properties
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9.7 省略描述符属性
- en: All properties of descriptors are optional. What happens when you omit a property
    depends on the operation.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 描述符的所有属性都是可选的。省略属性时会发生什么取决于操作。
- en: 9.7.1 Omitting descriptor properties when creating properties
  id: totrans-144
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 9.7.1 创建属性时省略描述符属性
- en: 'When we create a new property via a descriptor, then omitting attributes means
    that their default values are used:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们通过描述符创建新属性时，省略属性意味着使用它们的默认值：
- en: '[PRE16]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 9.7.2 Omitting descriptor properties when changing properties
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 9.7.2 更改属性时省略描述符属性
- en: 'If instead, we change an existing property, then omitting descriptor properties
    means that the corresponding attributes are not touched:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们改变一个现有属性，那么省略描述符属性意味着相应的属性不受影响：
- en: '[PRE17]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 9.8 What property attributes do built-in constructs use?
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内置构造使用什么属性属性？
- en: 'The general rule (with few exceptions) for property attributes is:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 属性属性的一般规则（少数例外）是：
- en: Properties of objects at the beginning of a prototype chain are usually writable,
    enumerable, and configurable.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原型链开头的对象属性通常是可写的，可枚举的和可配置的。
- en: As described in [the chapter on enumerability](ch_enumerability.html), most
    inherited properties are non-enumerable, to hide them from legacy constructs such
    as `for-in` loops. Inherited properties are usually writable and configurable.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如[枚举性章节](ch_enumerability.html)中所述，大多数继承属性都是不可枚举的，以隐藏它们，使它们不被`for-in`循环等遗留构造所发现。继承属性通常是可写的和可配置的。
- en: 9.8.1 Own properties created via assignment
  id: totrans-154
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 9.8.1 通过赋值创建的自有属性
- en: '[PRE18]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 9.8.2 Own properties created via object literals
  id: totrans-156
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 9.8.2 通过对象字面量创建的自有属性
- en: '[PRE19]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 9.8.3 The own property `.length` of Arrays
  id: totrans-158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 9.8.3 数组的自有属性`.length`
- en: 'The own property `.length` of Arrays is non-enumerable, so that it isn’t copied
    by `Object.assign()`, spreading, and similar operations. It is also non-configurable:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的自有属性`.length`是不可枚举的，因此它不会被`Object.assign()`、扩展和类似操作复制。它也是不可配置的：
- en: '[PRE20]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`.length` is a special data property, in that it is influenced by (and influences)
    other own properties (specifically, index properties).'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`.length`是一个特殊的数据属性，它受其他自有属性（特别是索引属性）的影响。'
- en: 9.8.4 Prototype properties of built-in classes
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 9.8.4 内置类的原型属性
- en: '[PRE21]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 9.8.5 Prototype properties and instance properties of user-defined classes
  id: totrans-164
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 9.8.5 用户定义类的原型属性和实例属性
- en: '[PRE22]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Note that all own properties of instances of `DataContainer` are writable,
    enumerable, and configurable:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`DataContainer`实例的所有自有属性都是可写的，可枚举的和可配置的：
- en: '[PRE23]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '9.9 API: property descriptors'
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9.9 API：属性描述符
- en: 'The following tool methods use property descriptors:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 以下工具方法使用属性描述符：
- en: '`Object.defineProperty(obj: object, key: string|symbol, propDesc: PropertyDescriptor):
    object` ^([ES5])'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object.defineProperty(obj: object, key: string|symbol, propDesc: PropertyDescriptor):
    object` ^([ES5])'
- en: Creates or changes a property on `obj` whose key is `key` and whose attributes
    are specified via `propDesc`. Returns the modified object.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`obj`上创建或更改一个属性，其键为`key`，属性通过`propDesc`指定。返回修改后的对象。
- en: '[PRE24]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`Object.defineProperties(obj: object, properties: {[k: string|symbol]: PropertyDescriptor}):
    object` ^([ES5])'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object.defineProperties(obj: object, properties: {[k: string|symbol]: PropertyDescriptor}):
    object` ^([ES5])'
- en: 'The batch version of `Object.defineProperty()`. Each property `p` of the object
    `properties` specifies one property that is to be added to `obj`: The key of `p`
    specifies the key of the property, the value of `p` is a descriptor that specifies
    the attributes of the property.'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Object.defineProperty()`的批量版本。对象`properties`的每个属性`p`指定要添加到`obj`的一个属性：`p`的键指定属性的键，`p`的值是一个描述符，指定属性的属性。'
- en: '[PRE25]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`Object.create(proto: null|object, properties?: {[k: string|symbol]: PropertyDescriptor}):
    object` ^([ES5])'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object.create(proto: null|object, properties?: {[k: string|symbol]: PropertyDescriptor}):
    object` ^([ES5])'
- en: 'First, creates an object whose prototype is `proto`. Then, if the optional
    parameter `properties` has been provided, adds properties to it – in the same
    manner as `Object.defineProperties()`. Finally, returns the result. For example,
    the following code snippet produces the same result as the previous snippet:'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先创建一个原型为`proto`的对象。然后，如果提供了可选参数`properties`，则以与`Object.defineProperties()`相同的方式向其添加属性。最后返回结果。例如，以下代码片段产生与上一个片段相同的结果：
- en: '[PRE26]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`Object.getOwnPropertyDescriptor(obj: object, key: string|symbol): undefined|PropertyDescriptor`
    ^([ES5])'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object.getOwnPropertyDescriptor(obj: object, key: string|symbol): undefined|PropertyDescriptor`
    ^([ES5])'
- en: Returns the descriptor of the own (non-inherited) property of `obj` whose key
    is `key`. If there is no such property, `undefined` is returned.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回`obj`的自有（非继承）属性的描述符，其键为`key`。如果没有这样的属性，则返回`undefined`。
- en: '[PRE27]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`Object.getOwnPropertyDescriptors(obj: object): {[k: string|symbol]: PropertyDescriptor}`
    ^([ES2017])'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object.getOwnPropertyDescriptors(obj: object): {[k: string|symbol]: PropertyDescriptor}`
    ^([ES2017])'
- en: Returns an object where each property key `'k'` of `obj` is mapped to the property
    descriptor for `obj.k`. The result can be used as input for `Object.defineProperties()`
    and `Object.create()`.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回一个对象，其中`obj`的每个属性键`'k'`都映射到`obj.k`的属性描述符。结果可以用作`Object.defineProperties()`和`Object.create()`的输入。
- en: '[PRE28]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Using `desc()` in line A is a work-around so that `.deepEqual()` works.
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在A行使用`desc()`是一个解决方法，使`.deepEqual()`起作用。
- en: 9.10 Further reading
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9.10 进一步阅读
- en: 'The next three chapters provide more details on property attributes:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的三章将更详细地介绍属性特性：
- en: '[§10 “Protecting objects from being changed”](ch_protecting-objects.html)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[§10 “保护对象免受更改”](ch_protecting-objects.html)'
- en: '[§11 “Properties: assignment vs. definition”](ch_property-assignment-vs-definition.html)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[§11 “属性：赋值 vs. 定义”](ch_property-assignment-vs-definition.html)'
- en: '[§12 “Enumerability of properties”](ch_enumerability.html)'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[§12 “属性的可枚举性”](ch_enumerability.html)'
- en: '[Comments](https://github.com/rauschma/deep-js/issues/9)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/deep-js/issues/9)'
