- en: 16 Class definitions in TypeScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 16 TypeScript中的类定义
- en: 原文：[https://exploringjs.com/tackling-ts/ch_class-definitions.html](https://exploringjs.com/tackling-ts/ch_class-definitions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/tackling-ts/ch_class-definitions.html](https://exploringjs.com/tackling-ts/ch_class-definitions.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '16.1 [Cheat sheet: classes in plain JavaScript](ch_class-definitions.html#cheat-sheet-classes-in-plain-javascript)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.1 速查表：纯JavaScript中的类
- en: 16.1.1 [Basic members of classes](ch_class-definitions.html#basic-members-of-classes)
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.1.1 [类的基本成员](ch_class-definitions.html#basic-members-of-classes)
- en: '16.1.2 [Modifier: `static`](ch_class-definitions.html#modifier-static)'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.1.2 修饰符：`static`
- en: '16.1.3 [Modifier-like name prefix: `#` (private)](ch_class-definitions.html#modifier-like-name-prefix-private)'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.1.3 类似修饰符的名称前缀：`#`（私有）
- en: '16.1.4 [Modifiers for accessors: `get` (getter) and `set` (setter)](ch_class-definitions.html#modifiers-for-accessors-get-getter-and-set-setter)'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.1.4 [访问器的修饰符：`get`（getter）和`set`（setter）](ch_class-definitions.html#modifiers-for-accessors-get-getter-and-set-setter)
- en: '16.1.5 [Modifier for methods: `*` (generator)](ch_class-definitions.html#modifier-for-methods-generator)'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.1.5 方法的修饰符：`*`（生成器）
- en: '16.1.6 [Modifier for methods: `async`](ch_class-definitions.html#modifier-for-methods-async)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.1.6 [方法的修饰符：`async`](ch_class-definitions.html#modifier-for-methods-async)
- en: 16.1.7 [Computed class member names](ch_class-definitions.html#computed-class-member-names)
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.1.7 [计算类成员名称](ch_class-definitions.html#computed-class-member-names)
- en: 16.1.8 [Combinations of modifiers](ch_class-definitions.html#combinations-of-modifiers)
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.1.8 [修饰符的组合](ch_class-definitions.html#combinations-of-modifiers)
- en: 16.1.9 [Under the hood](ch_class-definitions.html#under-the-hood)
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.1.9 [底层原理](ch_class-definitions.html#under-the-hood)
- en: 16.1.10 [More information on class definitions in plain JavaScript](ch_class-definitions.html#more-information-on-class-definitions-in-plain-javascript)
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.1.10 [纯JavaScript中类定义的更多信息](ch_class-definitions.html#more-information-on-class-definitions-in-plain-javascript)
- en: 16.2 [Non-public data slots in TypeScript](ch_class-definitions.html#non-public-data-slots-in-typescript)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.2 TypeScript中的非公共数据槽
- en: 16.2.1 [Private properties](ch_class-definitions.html#private-properties)
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.2.1 [私有属性](ch_class-definitions.html#private-properties)
- en: 16.2.2 [Private fields](ch_class-definitions.html#private-fields)
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.2.2 私有字段
- en: 16.2.3 [Private properties vs. private fields](ch_class-definitions.html#private-properties-vs.-private-fields)
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.2.3 [私有属性 vs. 私有字段](ch_class-definitions.html#private-properties-vs.-private-fields)
- en: 16.2.4 [Protected properties](ch_class-definitions.html#protected-properties)
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.2.4 [受保护的属性](ch_class-definitions.html#protected-properties)
- en: 16.3 [Private constructors](ch_class-definitions.html#private-constructors)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.3 私有构造函数 (ch_class-definitions.html#private-constructors)
- en: 16.4 [Initializing instance properties](ch_class-definitions.html#initializing-instance-properties)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.4 初始化实例属性
- en: 16.4.1 [Strict property initialization](ch_class-definitions.html#strict-property-initialization)
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.4.1 [严格的属性初始化](ch_class-definitions.html#strict-property-initialization)
- en: 16.4.2 [Making constructor parameters `public`, `private`, or `protected`](ch_class-definitions.html#making-constructor-parameters-public-private-or-protected)
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.4.2 使构造函数参数`public`、`private`或`protected`
- en: 16.5 [Abstract classes](ch_class-definitions.html#abstract-classes)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.5 [抽象类](ch_class-definitions.html#abstract-classes)
- en: '* * *'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'In this chapter, we examine how class definitions work in TypeScript:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究TypeScript中类定义的工作方式：
- en: First, we take a quick look at the features of class definitions in plain JavaScript.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们快速查看纯JavaScript中类定义的特性。
- en: Then we explore what additions TypeScript brings to the table.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们探讨TypeScript为此带来了哪些新增内容。
- en: '16.1 Cheat sheet: classes in plain JavaScript'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 16.1 速查表：纯JavaScript中的类
- en: This section is a cheat sheet for class definitions in plain JavaScript.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本节是关于纯JavaScript中类定义的速查表。
- en: 16.1.1 Basic members of classes
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 16.1.1 类的基本成员
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/65d35c0a2478236e12cc4321e1b02db6.png)  **The next sections are
    about modifiers**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/65d35c0a2478236e12cc4321e1b02db6.png)  **接下来的部分是关于修饰符的**'
- en: At the end, there is a table that shows how modifiers can be combined.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有一张表显示了修饰符如何组合。
- en: '16.1.2 Modifier: `static`'
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 16.1.2 修饰符：`static`
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '16.1.3 Modifier-like name prefix: `#` (private)'
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 16.1.3 类似修饰符的名称前缀：`#`（私有）
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Warning for JavaScript:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript警告：
- en: '[Support for private methods is currently quite limited.](https://github.com/tc39/proposal-private-methods#implementations)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[目前对私有方法的支持非常有限。](https://github.com/tc39/proposal-private-methods#implementations)'
- en: '[Private fields have broader, but also limited, support.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Class_fields#Private_class_fields)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[私有字段有更广泛的支持，但也有限制。](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Class_fields#Private_class_fields)'
- en: TypeScript has been supporting private fields since version 3.8 but does not
    currently support private methods.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript自3.8版本以来一直支持私有字段，但目前不支持私有方法。
- en: '16.1.4 Modifiers for accessors: `get` (getter) and `set` (setter)'
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 16.1.4 访问器的修饰符：`get`（getter）和`set`（setter）
- en: 'Roughly, accessors are methods that are invoked by accessing properties. There
    are two kinds of accessors: getters and setters.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 大致上，访问器是通过访问属性调用的方法。有两种类型的访问器：getter和setter。
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '16.1.5 Modifier for methods: `*` (generator)'
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 16.1.5 方法的修饰符：`*`（生成器）
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '16.1.6 Modifier for methods: `async`'
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 16.1.6 方法的修饰符：`async`
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 16.1.7 Computed class member names
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 16.1.7 计算类成员名称
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Comments:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 评论：
- en: The main use case for this feature is symbols such as `Symbol.iterator`. But
    any expression can be used inside the square brackets.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此功能的主要用例是诸如`Symbol.iterator`之类的符号。但是任何表达式都可以在方括号内使用。
- en: We can compute the names of fields, methods, and accessors.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以计算字段、方法和访问器的名称。
- en: We cannot compute the names of private members (which are always fixed).
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们无法计算私有成员的名称（这些名称始终是固定的）。
- en: 16.1.8 Combinations of modifiers
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 16.1.8 修饰符的组合
- en: 'Fields (no level means that a construct exists at the instance level):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 字段（没有级别意味着构造存在于实例级别）：
- en: '| Level | Visibility |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 级别 | 可见性 |'
- en: '| --- | --- |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| (instance) |  |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| (实例) |  |'
- en: '| (instance) | `#` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| (实例) | `#` |'
- en: '| `static` |  |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `static` |  |'
- en: '| `static` | `#` |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `static` | `#` |'
- en: 'Methods (no level means that a construct exists at the prototype level):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 方法（没有级别表示构造存在于原型级别）：
- en: '| Level | Accessor | Async | Generator | Visibility |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 级别 | 访问器 | 异步 | 生成器 | 可见性 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| (prototype) |  |  |  |  |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| (原型) |  |  |  |  |'
- en: '| (prototype) | `get` |  |  |  |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| (原型) | `get` |  |  |  |'
- en: '| (prototype) | `set` |  |  |  |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| (原型) | `set` |  |  |  |'
- en: '| (prototype) |  | `async` |  |  |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| (原型) |  | `async` |  |  |'
- en: '| (prototype) |  |  | `*` |  |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| (原型) |  |  | `*` |  |'
- en: '| (prototype) |  | `async` | `*` |  |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| (原型) |  | `async` | `*` |  |'
- en: '| (prototype-associated) |  |  |  | `#` |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| (与原型相关) |  |  |  | `#` |'
- en: '| (prototype-associated) | `get` |  |  | `#` |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| (与原型相关) | `get` |  |  | `#` |'
- en: '| (prototype-associated) | `set` |  |  | `#` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| (与原型相关) | `set` |  |  | `#` |'
- en: '| (prototype-associated) |  | `async` |  | `#` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| (与原型相关) |  | `async` |  | `#` |'
- en: '| (prototype-associated) |  |  | `*` | `#` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| (与原型相关) |  |  | `*` | `#` |'
- en: '| (prototype-associated) |  | `async` | `*` | `#` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| (与原型相关) |  | `async` | `*` | `#` |'
- en: '| `static` |  |  |  |  |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `static` |  |  |  |  |'
- en: '| `static` | `get` |  |  |  |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `static` | `get` |  |  |  |'
- en: '| `static` | `set` |  |  |  |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `static` | `set` |  |  |  |'
- en: '| `static` |  | `async` |  |  |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `static` |  | `async` |  |  |'
- en: '| `static` |  |  | `*` |  |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `static` |  |  | `*` |  |'
- en: '| `static` |  | `async` | `*` |  |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `static` |  | `async` | `*` |  |'
- en: '| `static` |  |  |  | `#` |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `static` |  |  |  | `#` |'
- en: '| `static` | `get` |  |  | `#` |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `static` | `get` |  |  | `#` |'
- en: '| `static` | `set` |  |  | `#` |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `static` | `set` |  |  | `#` |'
- en: '| `static` |  | `async` |  | `#` |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `static` |  | `async` |  | `#` |'
- en: '| `static` |  |  | `*` | `#` |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `static` |  |  | `*` | `#` |'
- en: '| `static` |  | `async` | `*` | `#` |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `static` |  | `async` | `*` | `#` |'
- en: 'Limitations of methods:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 方法的限制：
- en: Accessors can’t be async or generators.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问器不能是异步的或生成器。
- en: 16.1.9 Under the hood
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 16.1.9 底层
- en: 'It’s important to keep in mind that with classes, there are two chains of prototype
    objects:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，对于类，有两条原型对象链：
- en: The instance chain which starts with an instance.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以一个实例开始的实例链。
- en: The static chain which starts with the class of that instance.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从该实例的类开始的静态链。
- en: 'Consider the following plain JavaScript example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下纯JavaScript示例：
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Fig. [1](#fig:class-prototype-chains) shows what the prototype chains look like
    that are created by `ClassA` and `ClassB`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 [1](#fig:class-prototype-chains) 显示了由 `ClassA` 和 `ClassB` 创建的原型链的样子。
- en: '![Figure 1: The classes ClassA and ClassB create two prototype chains: One
    for classes (left-hand side) and one for instances (right-hand side).](../Images/0665e9f0d4e7a5093d20ad851c81a01c.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图1：`ClassA` 和 `ClassB` 创建了两条原型链：一条是类的（左侧），一条是实例的（右侧）。](../Images/0665e9f0d4e7a5093d20ad851c81a01c.png)'
- en: 'Figure 1: The classes `ClassA` and `ClassB` create two prototype chains: One
    for classes (left-hand side) and one for instances (right-hand side).'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：`ClassA` 和 `ClassB` 创建了两条原型链：一条是类的（左侧），一条是实例的（右侧）。
- en: 16.1.10 More information on class definitions in plain JavaScript
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 16.1.10 纯JavaScript中类定义的更多信息
- en: '[Public fields, private fields, private methods/getters/setters](https://2ality.com/2019/07/public-class-fields.html)
    (blog post)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[公共字段、私有字段、私有方法/获取器/设置器](https://2ality.com/2019/07/public-class-fields.html)（博客文章）'
- en: '[All remaining JavaScript class features](https://exploringjs.com/impatient-js/ch_proto-chains-classes.html)
    (chapter in “JavaScript for impatient programming”)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[所有剩余的JavaScript类特性](https://exploringjs.com/impatient-js/ch_proto-chains-classes.html)（“JavaScript
    for impatient programming”中的章节）'
- en: 16.2 Non-public data slots in TypeScript
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 16.2 TypeScript中的非公共数据槽
- en: 'By default, all data slots in TypeScript are public properties. There are two
    ways of keeping data private:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在TypeScript中，默认情况下，所有数据槽都是公共属性。有两种方法可以保持数据私有：
- en: Private properties
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有属性
- en: Private fields
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有字段
- en: We’ll look at both next.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来会看两者。
- en: Note that TypeScript does not currently support private methods.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，TypeScript目前不支持私有方法。
- en: 16.2.1 Private properties
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 16.2.1 私有属性
- en: 'Private properties are a TypeScript-only (static) feature. Any property can
    be made private by prefixing it with the keyword `private` (line A):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 私有属性是TypeScript专有的（静态）特性。通过在关键字 `private`（A行）前面加上前缀，任何属性都可以被设置为私有的：
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We now get compile-time errors if we access that property in the wrong scope
    (line A):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们在错误的范围内访问该属性，我们会得到编译时错误（A行）：
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'However, `private` doesn’t change anything at runtime. There, property `.name`
    is indistinguishable from a public property:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`private` 在运行时不会改变任何东西。在那里，属性`.name` 与公共属性无法区分：
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can also see that private properties aren’t protected at runtime when we
    look at the JavaScript code that the class is compiled to:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看类编译成的JavaScript代码时，我们还可以看到私有属性在运行时不受保护：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 16.2.2 Private fields
  id: totrans-119
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 16.2.2 私有字段
- en: 'Private fields are a new JavaScript feature that TypeScript has supported since
    version 3.8:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 私有字段是TypeScript自3.8版本以来支持的新JavaScript特性：
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This version of `Person` is mostly used the same way as the private property
    version:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的 `Person` 大部分用法与私有属性版本相同：
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'However, this time, the data is completely encapsulated. Using the private
    field syntax outside classes is even a JavaScript syntax error. That’s why we
    have to use `eval()` in line A so that we can execute this code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这次，数据完全封装起来了。在类外部使用私有字段语法甚至是JavaScript语法错误。这就是为什么我们必须在A行使用 `eval()`，以便我们可以执行这段代码：
- en: '[PRE14]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The compilation result is much more complicated now (slightly simplified):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 编译结果现在更加复杂（稍微简化）：
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This code uses a common technique for keeping instance data private:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码使用了一个保持实例数据私有的常见技术：
- en: Each WeakMap implements one private field.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个 WeakMap 实现一个私有字段。
- en: It associates each instance with one piece of private data.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将每个实例与一个私有数据关联起来。
- en: 'More information on this topic: see [“JavaScript for impatient programmers”](https://exploringjs.com/impatient-js/ch_weakmaps.html#private-data-in-weakmaps).'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个主题的更多信息：请参阅[“JavaScript for impatient programmers”](https://exploringjs.com/impatient-js/ch_weakmaps.html#private-data-in-weakmaps)。
- en: 16.2.3 Private properties vs. private fields
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 16.2.3 私有属性 vs. 私有字段
- en: 'Downsides of private properties:'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有属性的缺点：
- en: We can’t reuse the names of private properties in subclasses (because the properties
    aren’t private at runtime).
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不能在子类中重用私有属性的名称（因为属性在运行时不是私有的）。
- en: No encapsulation at runtime.
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行时没有封装。
- en: 'Upside of private properties:'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有属性的优点：
- en: 'Clients can circumvent the encapsulation and access private properties. This
    can be useful if someone needs to work around a bug. In other words: Data being
    completely encapsulated has pros and cons.'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端可以规避封装并访问私有属性。如果有人需要解决bug，这可能是有用的。换句话说：数据完全封装有利有弊。
- en: 16.2.4 Protected properties
  id: totrans-138
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 16.2.4 受保护的属性
- en: 'Private fields and private properties can’t be accessed in subclasses (line
    A):'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 私有字段和私有属性不能在子类中访问（A行）：
- en: '[PRE16]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can fix the previous example by switching from `private` to `protected`
    in line A (we also switch in line B, for consistency’s sake):'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在A行将`private`改为`protected`来修复上一个示例（出于一致性的考虑，我们也在B行进行了切换）：
- en: '[PRE17]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 16.3 Private constructors
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 16.3 私有构造函数
- en: Constructors can be private, too. That is useful when we have static factory
    methods and want clients to always use those methods, never the constructor directly.
    Static methods can access private class members, which is why the factory methods
    can still use the constructor.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数也可以是私有的。当我们有静态工厂方法并且希望客户端始终使用这些方法而不是直接使用构造函数时，这是很有用的。静态方法可以访问私有类成员，这就是为什么工厂方法仍然可以使用构造函数的原因。
- en: 'In the following code, there is one static factory method `DataContainer.create()`.
    It sets up instances via asynchronously loaded data. Keeping the asynchronous
    code in the factory method enables the actual class to be completely synchronous:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，有一个静态工厂方法`DataContainer.create()`。它通过异步加载的数据设置实例。将异步代码放在工厂方法中使得实际类完全同步：
- en: '[PRE18]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In real-world code, we would use `fetch()` or a similar Promise-based API to
    load data asynchronously in line A.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际代码中，我们会使用`fetch()`或类似的基于Promise的API来在A行异步加载数据。
- en: The private constructor prevents `DataContainer` from being subclassed. If we
    want to allow subclasses, we have to make it `protected`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 私有构造函数防止`DataContainer`被子类化。如果我们想允许子类，我们必须将其设置为`protected`。
- en: 16.4 Initializing instance properties
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 16.4 初始化实例属性
- en: 16.4.1 Strict property initialization
  id: totrans-150
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 16.4.1 严格的属性初始化
- en: 'If the compiler setting `--strictPropertyInitialization` is switched on (which
    is the case if we use `--strict`), then TypeScript checks if all declared instance
    properties are correctly initialized:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果编译器设置`--strictPropertyInitialization`被打开（如果我们使用`--strict`，则是这种情况），那么TypeScript会检查所有声明的实例属性是否被正确初始化：
- en: 'Either via assignments in the constructor:'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要么通过构造函数中的赋值：
- en: '[PRE19]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Or via initializers for the property declarations:'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或通过属性声明的初始化程序：
- en: '[PRE20]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'However, sometimes we initialize properties in a manner that TypeScript doesn’t
    recognize. Then we can use exclamation marks (*definite assignment assertions*)
    to switch off TypeScript’s warnings (line A and line B):'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时我们以TypeScript无法识别的方式初始化属性。然后我们可以使用感叹号（*确定赋值断言*）来关闭TypeScript的警告（A行和B行）：
- en: '[PRE21]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '16.4.1.1 Example: setting up instance properties via objects'
  id: totrans-158
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 16.4.1.1 例子：通过对象设置实例属性
- en: 'In the following example, we also need definite assignment assertions. Here,
    we set up instance properties via the constructor parameter `props`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们还需要确定赋值断言。在这里，我们通过构造函数参数`props`设置实例属性。
- en: '[PRE22]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Notes:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 注：
- en: 'In line B, we initialize all properties: We use `Object.assign()` to copy the
    properties of parameter `props` into `this`.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在B行，我们初始化了所有属性：我们使用`Object.assign()`将参数`props`的属性复制到`this`中。
- en: In line A, the `implements` ensures that the class declares all properties that
    are part of interface `CompilerErrorProps`.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在A行，`implements`确保类声明了接口`CompilerErrorProps`中的所有属性。
- en: 16.4.2 Making constructor parameters `public`, `private`, or `protected`
  id: totrans-164
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 16.4.2 使构造函数参数`public`，`private`或`protected`
- en: 'If we use the keyword `public` for a constructor parameter, then TypeScript
    does two things for us:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对构造函数参数使用关键字`public`，那么TypeScript会为我们做两件事：
- en: It declares a public instance property with the same name.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它声明了一个具有相同名称的公共实例属性。
- en: It assigns the parameter to that instance property.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将参数分配给该实例属性。
- en: 'Therefore, the following two classes are equivalent:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，以下两个类是等价的：
- en: '[PRE23]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If we use `private` or `protected` instead of `public`, then the corresponding
    instance properties are private or protected (not public).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用`private`或`protected`而不是`public`，那么相应的实例属性就是私有的或受保护的（而不是公共的）。
- en: 16.5 Abstract classes
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 16.5 抽象类
- en: 'Two constructs can be abstract in TypeScript:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在TypeScript中，两个构造可以是抽象的：
- en: An abstract class can’t be instantiated. Only its subclasses can – if they are
    not abstract, themselves.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象类不能被实例化。只有它的子类可以——如果它们自己不是抽象的。
- en: An abstract method has no implementation, only a type signature. Each concrete
    subclass must have a concrete method with the same name and a compatible type
    signature.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象方法没有实现，只有类型签名。每个具体的子类必须具有相同名称和兼容类型签名的具体方法。
- en: If a class has any abstract methods, it must be abstract, too.
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个类有任何抽象方法，它也必须是抽象的。
- en: The following code demonstrates abstract classes and methods.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了抽象类和方法。
- en: 'On one hand, there is the abstract superclass `Printable` and its helper class
    `StringBuilder`:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 一方面，有一个抽象的超类`Printable`及其辅助类`StringBuilder`：
- en: '[PRE24]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'On the other hand, there are the concrete subclasses `Entries` and `Entry`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，有具体的子类`Entries`和`Entry`：
- en: '[PRE25]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'And finally, this is us using `Entries` and `Entry`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这是我们使用`Entries`和`Entry`：
- en: '[PRE26]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Notes about abstract classes:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 关于抽象类的注释：
- en: An abstract class can be seen as an interface where some members already have
    implementations.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象类可以被视为具有一些成员已经有实现的接口。
- en: While a class can implement multiple interfaces, it can only extend at most
    one abstract class.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然一个类可以实现多个接口，但它最多只能扩展一个抽象类。
- en: “Abstractness” only exists at compile time. At runtime, abstract classes are
    normal classes and abstract methods don’t exist (due to them only providing compile-time
    information).
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “抽象性”只存在于编译时。在运行时，抽象类是普通类，抽象方法不存在（因为它们只提供编译时信息）。
- en: Abstract classes can be seen as templates where each abstract method is a blank
    that has to be filled in (implemented) by subclasses.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象类可以被视为模板，其中每个抽象方法都是必须由子类填写（实现）的空白。
- en: '[Comments](https://github.com/rauschma/tackling-ts/issues/16)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/tackling-ts/issues/16)'
