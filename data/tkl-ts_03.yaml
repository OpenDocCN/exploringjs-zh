- en: 2 Why TypeScript?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2 为什么使用TypeScript？
- en: 原文：[https://exploringjs.com/tackling-ts/ch_why-typescript.html](https://exploringjs.com/tackling-ts/ch_why-typescript.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/tackling-ts/ch_why-typescript.html](https://exploringjs.com/tackling-ts/ch_why-typescript.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 2.1 [The benefits of using TypeScript](ch_why-typescript.html#the-benefits-of-using-typescript)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.1 [使用TypeScript的好处]
- en: 2.1.1 [More errors are detected *statically* (without running code)](ch_why-typescript.html#more-errors-are-detected-statically-without-running-code)
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.1.1 [更多错误可以被*静态*（不运行代码）检测到]
- en: 2.1.2 [Documenting parameters is good practice anyway](ch_why-typescript.html#documenting-parameters-is-good-practice-anyway)
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.1.2 [记录参数无论如何都是一个好习惯]
- en: 2.1.3 [TypeScript provides an additional layer of documentation](ch_why-typescript.html#typescript-provides-an-additional-layer-of-documentation)
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.1.3 [TypeScript提供了额外的文档层]
- en: 2.1.4 [Type definitions for JavaScript improve auto-completion](ch_why-typescript.html#type-definitions-for-javascript-improve-auto-completion)
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.1.4 [JavaScript的类型定义改进了自动补全]
- en: 2.1.5 [TypeScript makes refactorings safer](ch_why-typescript.html#typescript-makes-refactorings-safer)
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.1.5 [TypeScript使重构更安全]
- en: 2.1.6 [TypeScript can compile new features to older code](ch_why-typescript.html#typescript-can-compile-new-features-to-older-code)
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.1.6 [TypeScript可以将新功能编译成旧代码]
- en: 2.2 [The downsides of using TypeScript](ch_why-typescript.html#the-downsides-of-using-typescript)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.2 [使用TypeScript的缺点]
- en: 2.3 [TypeScript myths](ch_why-typescript.html#typescript-myths)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.3 [TypeScript的迷思]
- en: 2.3.1 [TypeScript code is heavyweight](ch_why-typescript.html#typescript-code-is-heavyweight)
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.3.1 [TypeScript代码比较庞大]
- en: 2.3.2 [TypeScript is an attempt to replace JavaScript with C# or Java](ch_why-typescript.html#typescript-is-an-attempt-to-replace-javascript-with-c-or-java)
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.3.2 [TypeScript试图用C#或Java替换JavaScript]
- en: '* * *'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: You can skip this chapter if you are already sure that you will learn and use
    TypeScript.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经确定会学习和使用TypeScript，可以跳过本章。
- en: If you are still unsure – this chapter is my sales pitch.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还不确定 - 这一章是我的推销。
- en: 2.1 The benefits of using TypeScript
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.1 [使用TypeScript的好处]
- en: 2.1.1 More errors are detected *statically* (without running code)
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.1.1 更多错误可以被*静态*（不运行代码）检测到
- en: While you are editing TypeScript code in an integrated development environment,
    you get warnings if you mistype names, call functions incorrectly, etc.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在集成开发环境中编辑TypeScript代码时，如果你拼错了名称，错误地调用函数等，你会收到警告。
- en: 'Consider the following two lines of code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下两行代码：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For the second line, we get this warning:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第二行，我们得到了这个警告：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Another example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This time, the error message for the last line is:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，最后一行的错误消息是：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 2.1.2 Documenting parameters is good practice anyway
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.1.2 记录参数无论如何都是一个好习惯
- en: 'Documenting parameters of functions and methods is something that many people
    do, anyway:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 记录函数和方法的参数是许多人都会做的事情：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Specifying the types via `{number}` and `{string}` is not required, but the
    descriptions in English mention them, too.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`{number}`和`{string}`指定类型并不是必需的，但英文描述中也提到了它们。
- en: 'If we use TypeScript’s notation to document types, we get the added benefit
    of this information being checked for consistency:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用TypeScript的符号来记录类型，我们会得到这些信息被检查一致性的额外好处：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 2.1.3 TypeScript provides an additional layer of documentation
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.1.3 TypeScript提供了额外的文档层
- en: 'Whenever I migrate JavaScript code to TypeScript, I’m noticing an interesting
    phenomenon: In order to find the appropriate types for parameters for a function
    or method, I have to check where it is invoked. That means that static types give
    me information locally that I otherwise have to look up elsewhere.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我将JavaScript代码迁移到TypeScript时，我都会注意到一个有趣的现象：为了找到函数或方法的参数的适当类型，我必须检查它在哪里被调用。这意味着静态类型给了我本地的信息，否则我必须在其他地方查找。
- en: 'And I do indeed find it easier to understand TypeScript code bases than JavaScript
    code bases: TypeScript provides an additional layer of documentation.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 而且我确实发现理解TypeScript代码库比理解JavaScript代码库更容易：TypeScript提供了额外的文档层。
- en: This additional documentation also helps when working in teams because it is
    clearer how code is to be used and TypeScript often warns us if we are doing something
    wrong.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这种额外的文档也有助于团队合作，因为清楚了代码的使用方式，而且TypeScript经常会在我们做错事情时提醒我们。
- en: 2.1.4 Type definitions for JavaScript improve auto-completion
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.1.4 JavaScript的类型定义改进了自动补全
- en: If there are type definitions for JavaScript code, then editors can use them
    to improve auto-completion.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果JavaScript代码有类型定义，那么编辑器可以使用它们来改进自动补全。
- en: An alternative to using TypeScript’s syntax, is to provide all type information
    via JSDoc comments – like we did at the beginning of this chapter. In that case,
    TypeScript can also check code for consistency and generate type definitions.
    For more information, see [chapter “Type Checking JavaScript Files”](https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html)
    in the TypeScript handbook.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用TypeScript的语法之外，还可以通过JSDoc注释提供所有类型信息 - 就像我们在本章开头所做的那样。在这种情况下，TypeScript也可以检查代码的一致性并生成类型定义。有关更多信息，请参见TypeScript手册中的“类型检查JavaScript文件”章节。
- en: 2.1.5 TypeScript makes refactorings safer
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.1.5 TypeScript使重构更安全
- en: Refactorings are automated code transformations that many integrated development
    environments offer.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 重构是许多集成开发环境提供的自动化代码转换。
- en: Renaming methods is an example of a refactoring. Doing so in plain JavaScript
    can be tricky because the same name might refer to different methods. TypeScript
    has more information on how methods and types are connected, which makes renaming
    methods safer there.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 重命名方法是重构的一个例子。在纯JavaScript中这样做可能会很棘手，因为相同的名称可能指代不同的方法。TypeScript对方法和类型的连接有更多信息，这使得在那里重命名方法更安全。
- en: 2.1.6 TypeScript can compile new features to older code
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.1.6 TypeScript可以将新功能编译为旧代码
- en: TypeScript tends to quickly support ECMAScript stage 4 features (such features
    are scheduled to be included in the next ECMAScript version). When we compile
    to JavaScript, the compiler option `--target` lets us specify the ECMAScript version
    that the output is compatible with. Then any incompatible feature (that was introduced
    later) will be compiled to equivalent, compatible code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript倾向于快速支持ECMAScript阶段4的功能（这些功能计划包括在下一个ECMAScript版本中）。当我们编译为JavaScript时，编译器选项`--target`让我们指定输出与兼容的ECMAScript版本。然后，任何不兼容的功能（后来引入的）将被编译为等效的兼容代码。
- en: 'Note that this kind of support for older ECMAScript versions does not require
    TypeScript or static typing: [The JavaScript compiler Babel](https://babeljs.io)
    does it too, but it compiles JavaScript to JavaScript.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于较旧的ECMAScript版本的这种支持并不需要TypeScript或静态类型：[JavaScript编译器Babel](https://babeljs.io)也可以做到，但它将JavaScript编译为JavaScript。
- en: 2.2 The downsides of using TypeScript
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.2 使用TypeScript的缺点
- en: 'It is an added layer on top of JavaScript: more complexity, more things to
    learn, etc.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是JavaScript之上的一个附加层：更复杂，更多要学习的东西，等等。
- en: It introduces a compilation step when writing code.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在编写代码时引入了一个编译步骤。
- en: npm packages can only be used if they have static type definitions.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有当npm软件包具有静态类型定义时才能使用。
- en: These days, many packages either come with type definitions or there are type
    definitions available for them on [DefinitelyTyped](http://definitelytyped.org).
    However, especially the latter can occasionally be slightly wrong, which leads
    to issues that you don’t have without static typing.
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如今，许多软件包要么附带类型定义，要么在[DefinitelyTyped](http://definitelytyped.org)上有可用的类型定义。然而，尤其是后者偶尔可能会有些错误，这会导致一些在没有静态类型的情况下不会出现的问题。
- en: 'Getting static types right is occasionally difficult. My recommendation here
    is to keep things as simple as possible – for example: Don’t overdo generics and
    type variables.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 偶尔很难正确使用静态类型。我的建议是尽可能保持简单 - 例如：不要过度使用泛型和类型变量。
- en: 2.3 TypeScript myths
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.3 TypeScript的神话
- en: 2.3.1 TypeScript code is heavyweight
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.3.1 TypeScript代码很庞大
- en: 'TypeScript code *can* be very heavyweight. But it doesn’t have to be. For example,
    due to type inference, we can often get away with few type annotations:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript代码*可以*非常庞大。但不一定非得如此。例如，由于类型推断，我们通常可以少用一些类型注释：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The only locations where this TypeScript code is different from JavaScript code,
    are line A and line B.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个TypeScript代码与JavaScript代码不同的唯一位置是A行和B行。
- en: 'There are a variety of styles in which TypeScript is written:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript的编写方式有多种风格：
- en: In an object-oriented programming (OOP) style with classes and OOP patterns
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在面向对象编程（OOP）风格中使用类和OOP模式
- en: In a functional programming (FP) style with functional patterns
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在函数式编程（FP）风格中使用函数模式
- en: In a mix of OOP and FP
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在OOP和FP的混合中
- en: And so on
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等等。
- en: 2.3.2 TypeScript is an attempt to replace JavaScript with C# or Java
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.3.2 TypeScript试图用C#或Java替换JavaScript
- en: Initially, TypeScript did invent a few language constructs of its own (e.g. enums).
    But since ECMAScript 6, it mostly stuck with being a strict superset of JavaScript.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，TypeScript确实发明了一些自己的语言构造（例如枚举）。但自ECMAScript 6以来，它主要坚持成为JavaScript的严格超集。
- en: My impression is that the TypeScript team likes JavaScript and doesn’t want
    to replace it with something “better” (which is the goal of, e.g., Dart). They
    do want to make it possible to statically type as much JavaScript code as possible.
    Many new TypeScript features are driven by that desire.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我的印象是TypeScript团队喜欢JavaScript，并且不想用“更好”的东西（例如Dart）来替换它。他们确实希望尽可能地使JavaScript代码具有静态类型。许多新的TypeScript功能都是出于这种愿望驱动的。
- en: '[Comments](https://github.com/rauschma/tackling-ts/issues/2)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/tackling-ts/issues/2)'
