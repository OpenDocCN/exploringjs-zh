- en: '5 FAQ: JavaScript'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5 FAQ: JavaScript'
- en: 原文：[https://exploringjs.com/impatient-js/ch_faq-language.html](https://exploringjs.com/impatient-js/ch_faq-language.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/impatient-js/ch_faq-language.html](https://exploringjs.com/impatient-js/ch_faq-language.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 5.1 [What are good references for JavaScript?](ch_faq-language.html#what-are-good-references-for-javascript)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5.1 JavaScript有哪些好的参考资料？
- en: 5.2 [How do I find out what JavaScript features are supported where?](ch_faq-language.html#how-do-i-find-out-what-javascript-features-are-supported-where)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5.2 我怎样才能知道JavaScript的功能在哪里得到支持？
- en: 5.3 [Where can I look up what features are planned for JavaScript?](ch_faq-language.html#where-can-i-look-up-what-features-are-planned-for-javascript)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5.3 我可以在哪里查找JavaScript计划中的功能？
- en: 5.4 [Why does JavaScript fail silently so often?](ch_faq-language.html#why-does-javascript-fail-silently-so-often)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5.4 为什么JavaScript经常悄悄失败？
- en: 5.5 [Why can’t we clean up JavaScript, by removing quirks and outdated features?](ch_faq-language.html#why-cant-we-clean-up-javascript-by-removing-quirks-and-outdated-features)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5.5 为什么我们不能清理JavaScript，删除怪癖和过时的功能？
- en: 5.6 [How can I quickly try out a piece of JavaScript code?](ch_faq-language.html#how-can-i-quickly-try-out-a-piece-of-javascript-code)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5.6 我怎样才能快速尝试一段JavaScript代码？
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 5.1 What are good references for JavaScript?
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.1 JavaScript有哪些好的参考资料？
- en: Please consult [§6.3 “JavaScript references”](ch_big-picture.html#javascript-references).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [§6.3 “JavaScript references”](ch_big-picture.html#javascript-references)。
- en: 5.2 How do I find out what JavaScript features are supported where?
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.2 我怎样才能知道JavaScript的功能在哪里得到支持？
- en: 'This book usually mentions if a feature is part of ECMAScript 5 (as required
    by older browsers) or a newer version. For more detailed information (including
    pre-ES5 versions), there are several good compatibility tables available online:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本书通常会提到一个功能是否是ECMAScript 5的一部分（老版本浏览器所需），或者是一个更新的版本。有关更详细的信息（包括ES5之前的版本），有几个在线的兼容性表格可供参考：
- en: '[ECMAScript compatibility tables for various engines](http://kangax.github.io/compat-table/es5/)
    (by [kangax](https://twitter.com/kangax), [webbedspace](https://twitter.com/webbedspace),
    [zloirock](https://twitter.com/zloirock))'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ECMAScript compatibility tables for various engines](http://kangax.github.io/compat-table/es5/)
    (by [kangax](https://twitter.com/kangax), [webbedspace](https://twitter.com/webbedspace),
    [zloirock](https://twitter.com/zloirock))'
- en: '[Node.js compatibility tables](https://node.green) (by [William Kapke](https://twitter.com/williamkapke))'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Node.js compatibility tables](https://node.green) (by [William Kapke](https://twitter.com/williamkapke))'
- en: Mozilla’s [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript)
    have tables for each feature that describe relevant ECMAScript versions and browser
    support.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mozilla的[MDN web docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript)有每个功能的表格，描述了相关的ECMAScript版本和浏览器支持。
- en: '[“Can I use…”](https://caniuse.com/) documents what features (including JavaScript
    language features) are supported by web browsers.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Can I use…”](https://caniuse.com/) 记录了Web浏览器支持的功能（包括JavaScript语言功能）。'
- en: 5.3 Where can I look up what features are planned for JavaScript?
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.3 我可以在哪里查找JavaScript计划中的功能？
- en: 'Please consult the following sources:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下来源：
- en: '[§3.5 “The TC39 process”](ch_history.html#tc39-process) describes how upcoming
    features are planned.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[§3.5 “The TC39 process”](ch_history.html#tc39-process) 描述了即将推出的功能是如何计划的。'
- en: '[§3.6 “FAQ: TC39 process”](ch_history.html#tc39-process-faq) answers various
    questions regarding upcoming features.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[§3.6 “FAQ: TC39 process”](ch_history.html#tc39-process-faq) 回答了关于即将推出的功能的各种问题。'
- en: 5.4 Why does JavaScript fail silently so often?
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.4 为什么JavaScript经常悄悄失败？
- en: JavaScript often fails silently. Let’s look at two examples.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript经常悄悄失败。让我们看两个例子。
- en: 'First example: If the operands of an operator don’t have the appropriate types,
    they are converted as necessary.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个例子：如果操作数的运算符没有适当的类型，它们会根据需要进行转换。
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Second example: If an arithmetic computation fails, you get an error value,
    not an exception.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个例子：如果算术计算失败，你会得到一个错误值，而不是异常。
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The reason for the silent failures is historical: JavaScript did not have exceptions
    until ECMAScript 3\. Since then, its designers have tried to avoid silent failures.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 悄悄失败的原因是历史性的：直到ECMAScript 3之前，JavaScript没有异常。从那时起，它的设计者们试图避免悄悄失败。
- en: 5.5 Why can’t we clean up JavaScript, by removing quirks and outdated features?
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.5 为什么我们不能清理JavaScript，删除怪癖和过时的功能？
- en: 'This question is answered in [§3.7 “Evolving JavaScript: Don’t break the web”](ch_history.html#backward-compatibility).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '这个问题在[§3.7 “Evolving JavaScript: Don’t break the web”](ch_history.html#backward-compatibility)中得到了回答。'
- en: 5.6 How can I quickly try out a piece of JavaScript code?
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.6 我怎样才能快速尝试一段JavaScript代码？
- en: '[§8.1 “Trying out JavaScript code”](ch_console.html#trying-out-code) explains
    how to do that.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[§8.1 “Trying out JavaScript code”](ch_console.html#trying-out-code) 解释了如何做到这一点。'
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/24)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[Comments](https://github.com/rauschma/impatient-js/issues/24)'
