- en: '26 Evaluating code dynamically: eval(), new Function() (advanced)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 26 动态评估代码：eval()，new Function()（高级）
- en: 原文：[https://exploringjs.com/impatient-js/ch_dynamic-code-evaluation.html](https://exploringjs.com/impatient-js/ch_dynamic-code-evaluation.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/impatient-js/ch_dynamic-code-evaluation.html](https://exploringjs.com/impatient-js/ch_dynamic-code-evaluation.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 26.1 [`eval()`](ch_dynamic-code-evaluation.html#eval)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 26.1 [`eval()`](ch_dynamic-code-evaluation.html#eval)
- en: 26.2 [`new Function()`](ch_dynamic-code-evaluation.html#new-function)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 26.2 [`new Function()`](ch_dynamic-code-evaluation.html#new-function)
- en: 26.3 [Recommendations](ch_dynamic-code-evaluation.html#recommendations)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 26.3 [Recommendations](ch_dynamic-code-evaluation.html#recommendations)
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'In this chapter, we’ll look at two ways of evaluating code dynamically: `eval()`
    and `new Function()`.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看两种动态评估代码的方式：`eval()` 和 `new Function()`。
- en: 26.1 `eval()`
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 26.1 `eval()`
- en: 'Given a string `str` with JavaScript code, `eval(str)` evaluates that code
    and returns the result:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个包含 JavaScript 代码的字符串 `str`，`eval(str)` 评估该代码并返回结果：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are two ways of invoking `eval()`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种调用 `eval()` 的方式：
- en: '*Directly*, via a function call. Then the code in its argument is evaluated
    inside the current scope.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*直接*，通过函数调用。然后在其参数中评估代码在当前范围内。'
- en: '*Indirectly*, not via a function call. Then it evaluates its code in global
    scope.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*间接地*，而不是通过函数调用。然后在全局范围内评估其代码。'
- en: '“Not via a function call” means “anything that looks different than `eval(···)`”:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: “不通过函数调用”意味着“任何看起来不同于 `eval(···)`”：
- en: '`eval.call(undefined, ''···'')` (uses [method `.call()` of functions](ch_callables.html#Function.prototype.call))'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eval.call(undefined, ''···'')`（使用[函数的 `.call()` 方法](ch_callables.html#Function.prototype.call)）'
- en: '`eval?.()` () (uses [optional chaining](ch_objects.html#optional-chaining))'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eval?.()`（使用[可选链](ch_objects.html#optional-chaining)）'
- en: '`(0, eval)(''···'')` (uses [the comma operator](ch_operators.html#comma-operator))'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(0, eval)(''···'')`（使用[逗号运算符](ch_operators.html#comma-operator)）'
- en: '`globalThis.eval(''···'')`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`globalThis.eval(''···'')`'
- en: '`const e = eval; e(''···'')`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`const e = eval; e(''···'')`'
- en: Etc.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等等。
- en: 'The following code illustrates the difference:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码说明了区别：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Evaluating code in global context is safer because the code has access to fewer
    internals.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在全局上下文中评估代码更安全，因为代码访问的内部更少。
- en: 26.2 `new Function()`
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 26.2 `new Function()`
- en: '`new Function()` creates a function object and is invoked as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`new Function()` 创建一个函数对象，并按以下方式调用：'
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The previous statement is equivalent to the next statement. Note that `«param_1»`,
    etc., are not inside string literals, anymore.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的语句等同于下一条语句。请注意，`«param_1»` 等不再在字符串文字中。
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the next example, we create the same function twice, first via `new Function()`,
    then via a function expression:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们首先通过 `new Function()` 创建相同的函数，然后通过函数表达式创建：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/0ac255e56dc93a43365d8502301c8688.png)  **`new Function()` creates
    non-strict mode functions**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0ac255e56dc93a43365d8502301c8688.png) **`new Function()` 创建非严格模式函数**'
- en: By default, functions created via `new Function()` are [sloppy](ch_syntax.html#strict-mode).
    If we want the function body to be in strict mode, we have to [switch it on manually](ch_syntax.html#switching-on-strict-mode).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，通过 `new Function()` 创建的函数是[松散模式](ch_syntax.html#strict-mode)。如果我们希望函数体处于严格模式，我们必须[手动切换它](ch_syntax.html#switching-on-strict-mode)。
- en: 26.3 Recommendations
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 26.3 推荐
- en: 'Avoid dynamic evaluation of code as much as you can:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 尽量避免动态评估代码：
- en: It’s a security risk because it may enable an attacker to execute arbitrary
    code with the privileges of your code.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个安全风险，因为它可能使攻击者能够以您代码的权限执行任意代码。
- en: It may be switched off – for example, in browsers, via [a Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可能会被关闭 - 例如，在浏览器中，通过[内容安全策略](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP)。
- en: Very often, JavaScript is dynamic enough so that you don’t need `eval()` or
    similar. In the following example, what we are doing with `eval()` (line A) can
    be achieved just as well without it (line B).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，JavaScript 是动态的，因此您不需要 `eval()` 或类似的东西。在下面的示例中，我们使用 `eval()`（行 A）可以很好地在没有它的情况下实现（行
    B）。
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you have to dynamically evaluate code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您必须动态评估代码：
- en: 'Prefer `new Function()` over `eval()`: it always executes its code in global
    context and a function provides a clean interface to the evaluated code.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更喜欢 `new Function()` 而不是 `eval()`：它总是在全局上下文中执行其代码，并且函数为评估的代码提供了一个清晰的接口。
- en: 'Prefer indirect `eval` over direct `eval`: evaluating code in global context
    is safer.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更喜欢间接的 `eval` 而不是直接的 `eval`：在全局上下文中评估代码更安全。
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/51)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/impatient-js/issues/51)'
