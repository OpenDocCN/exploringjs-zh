- en: 7 Updating data destructively and non-destructively
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7 更新数据的破坏性和非破坏性
- en: 原文：[https://exploringjs.com/deep-js/ch_updating-destructively-and-nondestructively.html](https://exploringjs.com/deep-js/ch_updating-destructively-and-nondestructively.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/deep-js/ch_updating-destructively-and-nondestructively.html](https://exploringjs.com/deep-js/ch_updating-destructively-and-nondestructively.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '7.1 [Examples: updating an object destructively and non-destructively](ch_updating-destructively-and-nondestructively.html#examples-updating-an-object-destructively-and-non-destructively)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 7.1 [示例：破坏性和非破坏性地更新对象](ch_updating-destructively-and-nondestructively.html#examples-updating-an-object-destructively-and-non-destructively)
- en: '7.2 [Examples: updating an Array destructively and non-destructively](ch_updating-destructively-and-nondestructively.html#examples-updating-an-array-destructively-and-non-destructively)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 7.2 [示例：破坏性和非破坏性地更新数组](ch_updating-destructively-and-nondestructively.html#examples-updating-an-array-destructively-and-nondestructively)
- en: 7.3 [Manual deep updating](ch_updating-destructively-and-nondestructively.html#manual-deep-updating)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 7.3 [手动深层更新](ch_updating-destructively-and-nondestructively.html#manual-deep-updating)
- en: 7.4 [Implementing generic deep updating](ch_updating-destructively-and-nondestructively.html#implementing-generic-deep-updating)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 7.4 [实现通用的深层更新](ch_updating-destructively-and-nondestructively.html#implementing-generic-deep-updating)
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'In this chapter, we learn about two different ways of updating data:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了两种不同的更新数据的方式：
- en: A *destructive update* of data mutates the data so that it has the desired form.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*破坏性更新*会改变数据，使其具有所需的形式。'
- en: A *non-destructive update* of data creates a copy of the data that has the desired
    form.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*非破坏性更新*会创建一个具有所需形式的数据副本。'
- en: The latter way is similar to first making a copy and then changing it destructively,
    but it does both at the same time.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 后一种方式类似于首先制作副本，然后进行破坏性更改，但它同时进行了两者。
- en: '7.1 Examples: updating an object destructively and non-destructively'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.1 [示例：破坏性和非破坏性地更新对象](ch_updating-destructively-and-nondestructively.html#examples-updating-an-object-destructively-and-non-destructively)
- en: The following code shows a function that updates object properties destructively
    and uses it on an object.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了一个更新对象属性的函数，并在对象上使用它。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following code demonstrates non-destructive updating of an object:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了对对象进行非破坏性更新：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Spreading makes `setPropertyNonDestructively()` more concise:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展使`setPropertyNonDestructively()`更简洁：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Both versions of `setPropertyNonDestructively()` update *shallowly*: They only
    change the top level of an object.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`setPropertyNonDestructively()`的两个版本都是*浅层*更新：它们只改变对象的顶层。'
- en: '7.2 Examples: updating an Array destructively and non-destructively'
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.2 [示例：破坏性和非破坏性地更新数组](ch_updating-destructively-and-nondestructively.html#examples-updating-an-array-destructively-and-nondestructively)
- en: The following code shows a function that updates Array elements destructively
    and uses it on an Array.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了一个更新数组元素的函数，并在数组上使用它。
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following code demonstrates non-destructive updating of an Array:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了对数组进行非破坏性更新：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`.slice()` and spreading make `setElementNonDestructively()` more concise:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`.slice()`和扩展使`setElementNonDestructively()`更简洁：'
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Both versions of `setElementNonDestructively()` update *shallowly*: They only
    change the top level of an Array.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`setElementNonDestructively()`的两个版本都是*浅层*更新：它们只改变数组的顶层。'
- en: 7.3 Manual deep updating
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.3 手动深层更新
- en: So far, we have only updated data shallowly. Let’s tackle deep updating. The
    following code shows how to do it manually. We are changing name and employer.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只是浅层更新了数据。让我们来解决深层更新的问题。以下代码展示了如何手动进行深层更新。我们正在更改名称和雇主。
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 7.4 Implementing generic deep updating
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.4 实现通用的深层更新
- en: The following function implements generic deep updating.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数实现了通用的深层更新。
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If we see `value` as the root of a tree that we are updating, then `deepUpdate()`
    only deeply changes a single branch (line A and C). All other branches are copied
    shallowly (line B and D).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将`value`视为正在更新的树的根，那么`deepUpdate()`只会深度更改单个分支（A和C行）。所有其他分支都是浅层复制（B和D行）。
- en: 'This is what using `deepUpdate()` looks like:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`deepUpdate()`看起来像这样：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Comments](https://github.com/rauschma/deep-js/issues/7)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/deep-js/issues/7)'
