- en: 20 Strings
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 20 字符串
- en: 原文：[https://exploringjs.com/impatient-js/ch_strings.html](https://exploringjs.com/impatient-js/ch_strings.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/impatient-js/ch_strings.html](https://exploringjs.com/impatient-js/ch_strings.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '20.1 [Cheat sheet: strings](ch_strings.html#cheat-sheet-strings)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.1 [字符串速查表](ch_strings.html#cheat-sheet-strings)
- en: 20.1.1 [Working with strings](ch_strings.html#working-with-strings)
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.1.1 [处理字符串](ch_strings.html#working-with-strings)
- en: 20.1.2 [JavaScript characters vs. code points vs. grapheme clusters](ch_strings.html#javascript-characters-vs.-code-points-vs.-grapheme-clusters)
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.1.2 [JavaScript 字符 vs. 代码点 vs. 图形簇](ch_strings.html#javascript-characters-vs.-code-points-vs.-grapheme-clusters)
- en: 20.1.3 [String methods](ch_strings.html#string-methods)
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.1.3 [字符串方法](ch_strings.html#string-methods)
- en: 20.2 [Plain string literals](ch_strings.html#plain-string-literals)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.2 [普通字符串字面量](ch_strings.html#plain-string-literals)
- en: 20.2.1 [Escaping](ch_strings.html#escaping)
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.2.1 [转义](ch_strings.html#escaping)
- en: 20.3 [Accessing JavaScript characters](ch_strings.html#accessing-javascript-characters)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.3 [访问 JavaScript 字符](ch_strings.html#accessing-javascript-characters)
- en: 20.4 [String concatenation via `+`](ch_strings.html#string-concatenation-via)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.4 [通过 `+` 进行字符串连接](ch_strings.html#string-concatenation-via)
- en: 20.5 [Converting to string](ch_strings.html#converting-to-string)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.5 [转换为字符串](ch_strings.html#converting-to-string)
- en: 20.5.1 [Stringifying objects](ch_strings.html#stringifying-objects)
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.5.1 [对象的字符串化](ch_strings.html#stringifying-objects)
- en: 20.5.2 [Customizing the stringification of objects](ch_strings.html#customizing-the-stringification-of-objects)
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.5.2 [自定义对象的字符串化](ch_strings.html#customizing-the-stringification-of-objects)
- en: 20.5.3 [An alternate way of stringifying values](ch_strings.html#an-alternate-way-of-stringifying-values)
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.5.3 [值的另一种字符串化方式](ch_strings.html#an-alternate-way-of-stringifying-values)
- en: 20.6 [Comparing strings](ch_strings.html#comparing-strings)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.6 [比较字符串](ch_strings.html#comparing-strings)
- en: '20.7 [Atoms of text: code points, JavaScript characters, grapheme clusters](ch_strings.html#atoms-of-text)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.7 [文本的原子：代码点、JavaScript 字符、图形簇](ch_strings.html#atoms-of-text)
- en: 20.7.1 [Working with code points](ch_strings.html#working-with-code-points)
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.7.1 [使用代码点](ch_strings.html#working-with-code-points)
- en: 20.7.2 [Working with code units (char codes)](ch_strings.html#working-with-code-units-char-codes)
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.7.2 [使用代码单元（字符代码）](ch_strings.html#working-with-code-units-char-codes)
- en: 20.7.3 [ASCII escapes](ch_strings.html#ascii-escapes)
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.7.3 [ASCII 转义](ch_strings.html#ascii-escapes)
- en: '20.7.4 [Caveat: grapheme clusters](ch_strings.html#caveat-grapheme-clusters)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.7.4 [注意事项：图形簇](ch_strings.html#caveat-grapheme-clusters)
- en: '20.8 [Quick reference: Strings](ch_strings.html#quickref-strings)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.8 字符串快速参考
- en: 20.8.1 [Converting to string](ch_strings.html#converting-to-string-1)
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.8.1 [转换为字符串](ch_strings.html#converting-to-string-1)
- en: 20.8.2 [Numeric values of text atoms](ch_strings.html#numeric-values-of-text-atoms)
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.8.2 [文本原子的数值](ch_strings.html#numeric-values-of-text-atoms)
- en: '20.8.3 [`String.prototype`: finding and matching](ch_strings.html#string.prototype-finding-and-matching)'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '20.8.3 [`String.prototype`: 查找和匹配](ch_strings.html#string.prototype-finding-and-matching)'
- en: '20.8.4 [`String.prototype`: extracting](ch_strings.html#string-api-extracting)'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '20.8.4 [`String.prototype`: 提取](ch_strings.html#string-api-extracting)'
- en: '20.8.5 [`String.prototype`: combining](ch_strings.html#string.prototype-combining)'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '20.8.5 [`String.prototype`: 组合](ch_strings.html#string.prototype-combining)'
- en: '20.8.6 [`String.prototype`: transforming](ch_strings.html#string.prototype-transforming)'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '20.8.6 [`String.prototype`: 转换](ch_strings.html#string.prototype-transforming)'
- en: 20.8.7 [Sources](ch_strings.html#sources-2)
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.8.7 [来源](ch_strings.html#sources-2)
- en: '* * *'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '20.1 Cheat sheet: strings'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 20.1 字符串速查表
- en: Strings are primitive values in JavaScript and immutable. That is, string-related
    operations always produce new strings and never change existing strings.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串是 JavaScript 中的原始值，是不可变的。也就是说，与字符串相关的操作总是产生新的字符串，而不会改变现有的字符串。
- en: 20.1.1 Working with strings
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.1.1 处理字符串
- en: 'Literals for strings:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串字面量：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Backslashes are used to:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 反斜杠用于：
- en: Escape literal delimiters (first 2 lines of previous example)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转义文字定界符（前一个示例的前两行）
- en: 'Represent special characters:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表示特殊字符：
- en: '`\\` represents a backslash'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\\` 表示反斜杠'
- en: '`\n` represents a newline'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\n` 表示换行'
- en: '`\r` represents a carriage return'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\r` 表示回车'
- en: '`\t` represents a tab'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\t` 表示制表符'
- en: 'Inside a `String.raw` tagged template (line A), backslashes are treated as
    normal characters:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `String.raw` 标记模板中（A行），反斜杠被视为普通字符：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Convertings values to strings:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将值转换为字符串：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Copying parts of a string
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 复制字符串的部分
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Concatenating strings:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 20.1.2 JavaScript characters vs. code points vs. grapheme clusters
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.1.2 JavaScript 字符 vs. 代码点 vs. 图形簇
- en: '**JavaScript characters** are 16 bits in size. They are what is indexed in
    strings and what `.length` counts.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**JavaScript 字符** 大小为16位。它们是字符串中的索引和 `.length` 计数的内容。'
- en: '**Code points** are the atomic parts of Unicode text. Most of them fit into
    one JavaScript character, some of them occupy two (especially emojis):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码点** 是 Unicode 文本的原子部分。大多数代码点适合一个 JavaScript 字符，其中一些占据两个（特别是表情符号）：'
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Grapheme clusters** (*user-perceived characters*) represent written symbols.
    Each one comprises one or more code points.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**图形簇**（*用户感知的字符*）代表书面符号。每个图形簇由一个或多个代码点组成。'
- en: 'Due to these facts, we shouldn’t split text into JavaScript characters, we
    should split it into graphemes. For more information on how to handle text, see
    [§20.7 “Atoms of text: code points, JavaScript characters, grapheme clusters”](ch_strings.html#atoms-of-text).'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们不应该将文本拆分为 JavaScript 字符，而应该将其拆分为图形簇。有关如何处理文本的更多信息，请参见[§20.7 “文本的原子：代码点、JavaScript
    字符、图形簇”](ch_strings.html#atoms-of-text)。
- en: 20.1.3 String methods
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.1.3 字符串方法
- en: This subsection gives a brief overview of the string API. There is [a more comprehensive
    quick reference](ch_strings.html#quickref-strings) at the end of this chapter.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 本小节简要概述了字符串 API。本章末尾有[更全面的快速参考](ch_strings.html#quickref-strings)。
- en: 'Finding substrings:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 查找子字符串：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Splitting and joining:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 拆分和连接：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Padding and trimming:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 填充和修剪：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Repeating and changing case:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 重复和更改大小写：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 20.2 Plain string literals
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 20.2 普通字符串字面量
- en: 'Plain string literals are delimited by either single quotes or double quotes:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 普通字符串字面量由单引号或双引号括起来：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Single quotes are used more often because it makes it easier to mention HTML,
    where double quotes are preferred.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 单引号更常用，因为它更容易提及HTML，而HTML更喜欢双引号。
- en: '[The next chapter](ch_template-literals.html) covers *template literals*, which
    give us:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[下一章](ch_template-literals.html)涵盖了*模板文字*，它给我们提供了：'
- en: String interpolation
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串插值
- en: Multiple lines
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多行
- en: Raw string literals (backslash has no special meaning)
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始字符串文字（反斜杠没有特殊含义）
- en: 20.2.1 Escaping
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.2.1 转义
- en: 'The backslash lets us create special characters:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 反斜杠让我们创建特殊字符：
- en: 'Unix line break: `''\n''`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unix换行符：`'\n'`
- en: 'Windows line break: `''\r\n''`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows换行符：`'\r\n'`
- en: 'Tab: `''\t''`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制表符：`'\t'`
- en: 'Backslash: `''\\''`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反斜杠：`'\\'`
- en: 'The backslash also lets us use the delimiter of a string literal inside that
    literal:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 反斜杠还允许我们在字符串文字内部使用字符串文字的分隔符：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 20.3 Accessing JavaScript characters
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 20.3 访问JavaScript字符
- en: JavaScript has no extra data type for characters – characters are always represented
    as strings.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript没有额外的字符数据类型-字符始终表示为字符串。
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The characters we see on screen are called *grapheme clusters*. Most of them
    are represented by single JavaScript characters. However, there are also grapheme
    clusters (especially emojis) that are represented by multiple JavaScript characters:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在屏幕上看到的字符称为*图形簇*。它们中的大多数由单个JavaScript字符表示。但是，还有一些图形簇（特别是表情符号）由多个JavaScript字符表示：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'How that works is explained in [§20.7 “Atoms of text: code points, JavaScript
    characters, grapheme clusters”](ch_strings.html#atoms-of-text).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在[§20.7 “文本的原子：代码点、JavaScript字符、图形簇”](ch_strings.html#atoms-of-text)中解释的。
- en: 20.4 String concatenation via `+`
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 20.4 通过`+`进行字符串连接
- en: 'If at least one operand is a string, the plus operator (`+`) converts any non-strings
    to strings and concatenates the result:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果至少有一个操作数是字符串，则加号运算符（`+`）将任何非字符串转换为字符串并连接结果：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The assignment operator `+=` is useful if we want to assemble a string, piece
    by piece:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 赋值运算符`+=`在我们想要逐步组装字符串时非常有用：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](../Images/b666ba365e94edaf0ef510fd7e12c7de.png)  **Concatenating via `+`
    is efficient**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/b666ba365e94edaf0ef510fd7e12c7de.png)  **通过`+`进行连接是有效的**'
- en: Using `+` to assemble strings is quite efficient because most JavaScript engines
    internally optimize it.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`+`来组装字符串非常有效，因为大多数JavaScript引擎在内部对其进行了优化。
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Exercise: Concatenating
    strings**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **练习：连接字符串**'
- en: '`exercises/strings/concat_string_array_test.mjs`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`exercises/strings/concat_string_array_test.mjs`'
- en: 20.5 Converting to string
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 20.5 转换为字符串
- en: 'These are three ways of converting a value `x` to a string:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将值`x`转换为字符串的三种方法：
- en: '`String(x)`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String(x)`'
- en: '`''''+x`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''''+x`'
- en: '`x.toString()` (does not work for `undefined` and `null`)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x.toString()`（对于`undefined`和`null`无效）'
- en: 'Recommendation: use the descriptive and safe `String()`.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 建议：使用描述性和安全的`String()`。
- en: 'Examples:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Pitfall for booleans: If we convert a boolean to a string via `String()`, we
    generally can’t convert it back via `Boolean()`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值的陷阱：如果我们通过`String()`将布尔值转换为字符串，通常无法通过`Boolean()`将其转换回来：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The only string for which `Boolean()` returns `false`, is the empty string.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一返回`false`的字符串是空字符串。
- en: 20.5.1 Stringifying objects
  id: totrans-108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.5.1 字符串化对象
- en: 'Plain objects have a default string representation that is not very useful:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 普通对象具有默认的字符串表示，这并不是非常有用：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Arrays have a better string representation, but it still hides much information:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 数组具有更好的字符串表示，但仍然隐藏了许多信息：
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Stringifying functions, returns their source code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串化函数，返回它们的源代码：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 20.5.2 Customizing the stringification of objects
  id: totrans-115
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.5.2 自定义对象的字符串化
- en: 'We can override the built-in way of stringifying objects by implementing the
    method `toString()`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过实现`toString()`方法来覆盖对象的内置字符串化方式：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 20.5.3 An alternate way of stringifying values
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.5.3 字符串化值的另一种方法
- en: 'The JSON data format is a text representation of JavaScript values. Therefore,
    [`JSON.stringify()`](ch_json.html#JSON.stringify) can also be used to convert
    values to strings:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: JSON数据格式是JavaScript值的文本表示。因此，[`JSON.stringify()`](ch_json.html#JSON.stringify)也可以用于将值转换为字符串：
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The caveat is that JSON only supports `null`, booleans, numbers, strings, Arrays,
    and objects (which it always treats as if they were created by object literals).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 警告是JSON仅支持`null`、布尔值、数字、字符串、数组和对象（它总是将其视为通过对象文字创建的）。
- en: 'Tip: The third parameter lets us switch on multiline output and specify how
    much to indent – for example:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：第三个参数让我们可以切换到多行输出并指定缩进的数量-例如：
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This statement produces the following output:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句产生以下输出：
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 20.6 Comparing strings
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 20.6 比较字符串
- en: 'Strings can be compared via the following operators:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串可以通过以下运算符进行比较：
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'There is one important caveat to consider: These operators compare based on
    the numeric values of JavaScript characters. That means that the order that JavaScript
    uses for strings is different from the one used in dictionaries and phone books:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个重要的警告需要考虑：这些运算符基于JavaScript字符的数值进行比较。这意味着JavaScript用于字符串的顺序与字典和电话簿中使用的顺序不同：
- en: '[PRE26]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Properly comparing text is beyond the scope of this book. It is supported via
    [the ECMAScript Internationalization API (`Intl`)](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 正确比较文本超出了本书的范围。它通过[ECMAScript国际化API（`Intl`）](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl)支持。
- en: '20.7 Atoms of text: code points, JavaScript characters, grapheme clusters'
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 20.7 文本的原子：代码点、JavaScript字符、图形簇
- en: 'Quick recap of [§19 “Unicode – a brief introduction”](ch_unicode.html):'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[§19 “Unicode – a brief introduction”](ch_unicode.html)的快速回顾：'
- en: '*Code points* are the atomic parts of Unicode text. Each code point is 21 bits
    in size.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*代码点*是Unicode文本的原子部分。每个代码点的大小为21位。'
- en: JavaScript strings implement Unicode via the encoding format UTF-16\. It uses
    one or two 16-bit *code units* to encode a single code point.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript字符串通过UTF-16编码格式实现Unicode。它使用一个或两个16位*代码单元*来编码单个代码点。
- en: Each JavaScript character (as indexed in strings) is a code unit. In the JavaScript
    standard library, code units are also called *char codes*.
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Grapheme clusters* (*user-perceived characters*) represent written symbols,
    as displayed on screen or paper. One or more code points are needed to encode
    a single grapheme cluster.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code demonstrates that a single code point comprises one or two
    JavaScript characters. We count the latter via `.length`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following table summarizes the concepts we have just explored:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '| Entity | Size | Encoded via |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
- en: '| JavaScript character (UTF-16 code unit) | 16 bits | – |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
- en: '| Unicode code point | 21 bits | 1–2 code units |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
- en: '| Unicode grapheme cluster |  | 1+ code points |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
- en: 20.7.1 Working with code points
  id: totrans-146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s explore JavaScript’s tools for working with code points.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: A *Unicode code point escape* lets us specify a code point hexadecimally (1–5
    digits). It produces one or two JavaScript characters.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![](../Images/b666ba365e94edaf0ef510fd7e12c7de.png)  **Unicode escape sequences**'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: In the ECMAScript language specification, *Unicode code point escapes* and *Unicode
    code unit escapes* (which we’ll encounter later) are called *Unicode escape sequences*.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '`String.fromCodePoint()` converts a single code point to 1–2 JavaScript characters:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`.codePointAt()` converts 1–2 JavaScript characters to a single code point:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We can *iterate* over a string, which visits code points (not JavaScript characters).
    Iteration is described [later in this book](ch_sync-iteration.html). One way of
    iterating is via a `for-of` loop:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[`Array.from()`](ch_arrays.html#Array.from) is also based on iteration and
    visits code points:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'That makes it a good tool for counting code points:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 20.7.2 Working with code units (char codes)
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Indices and lengths of strings are based on JavaScript characters (as represented
    by UTF-16 code units).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: 'To specify a code unit hexadecimally, we can use a *Unicode code unit escape*
    with exactly four hexadecimal digits:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'And we can use `String.fromCharCode()`. *Char code* is the standard library’s
    name for *code unit*:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'To get the char code of a character, use `.charCodeAt()`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 20.7.3 ASCII escapes
  id: totrans-170
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If the code point of a character is below 256, we can refer to it via a *ASCII
    escape* with exactly two hexadecimal digits:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: (The official name of ASCII escapes is *Hexadecimal escape sequences* – it was
    the first escape that used hexadecimal numbers.)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '20.7.4 Caveat: grapheme clusters'
  id: totrans-174
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When working with text that may be written in any human language, it’s best
    to split at the boundaries of grapheme clusters, not at the boundaries of code
    points.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: TC39 is working on [`Intl.Segmenter`](https://github.com/tc39/proposal-intl-segmenter),
    a proposal for the ECMAScript Internationalization API to support Unicode segmentation
    (along grapheme cluster boundaries, word boundaries, sentence boundaries, etc.).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Until that proposal becomes a standard, we can use one of several libraries
    that are available (do a web search for “JavaScript grapheme”).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '20.8 Quick reference: Strings'
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 20.8.1 Converting to string
  id: totrans-179
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Tbl. [14](#tbl:converting-to-string) describes how various values are converted
    to strings.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 14: Converting values to strings.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '| `x` | `String(x)` |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
- en: '| `undefined` | `''undefined''` |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
- en: '| `null` | `''null''` |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
- en: '| boolean | `false` `→` `''false''`, `true` `→` `''true''` |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
- en: '| number | Example: `123` `→` `''123''` |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
- en: '| bigint | Example: `123n` `→` `''123''` |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
- en: '| string | `x` (input, unchanged) |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
- en: '| symbol | Example: `Symbol(''abc'')` `→` `''Symbol(abc)''` |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
- en: '| object | Configurable via, e.g., `toString()` |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
- en: 20.8.2 Numeric values of text atoms
  id: totrans-192
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Char code**: number representing a JavaScript character. JavaScript’s name
    for *Unicode code unit*.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Size: 16 bits, unsigned'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Convert number to string: `String.fromCharCode()` ^([ES1])'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Convert string to number: string method `.charCodeAt()` ^([ES1])'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code point**: number representing an atomic part of Unicode text.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Size: 21 bits, unsigned (17 planes, 16 bits each)'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Convert number to string: `String.fromCodePoint()` ^([ES6])'
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数字转换为字符串：`String.fromCodePoint()` ^([ES6])
- en: 'Convert string to number: string method `.codePointAt()` ^([ES6])'
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将字符串转换为数字：字符串方法`.codePointAt()` ^([ES6])
- en: '20.8.3 `String.prototype`: finding and matching'
  id: totrans-201
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '20.8.3 `String.prototype`: 查找和匹配'
- en: (`String.prototype` is where the methods of strings are stored.)
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: （`String.prototype`是存储字符串方法的地方。）
- en: '`.endsWith(searchString: string, endPos=this.length): boolean` ^([ES6])'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.endsWith(searchString: string, endPos=this.length): boolean` ^([ES6])'
- en: Returns `true` if the string would end with `searchString` if its length were
    `endPos`. Returns `false` otherwise.
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果字符串的长度为`endPos`，则返回`true`，如果不是则返回`false`。
- en: '[PRE38]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '`.includes(searchString: string, startPos=0): boolean` ^([ES6])'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.includes(searchString: string, startPos=0): boolean` ^([ES6])'
- en: Returns `true` if the string contains the `searchString` and `false` otherwise.
    The search starts at `startPos`.
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果字符串包含`searchString`则返回`true`，否则返回`false`。搜索从`startPos`开始。
- en: '[PRE39]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '`.indexOf(searchString: string, minIndex=0): number` ^([ES1])'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.indexOf(searchString: string, minIndex=0): number` ^([ES1])'
- en: Returns the lowest index at which `searchString` appears within the string or
    `-1, otherwise. Any returned index will be`minIndex` or higher.
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回字符串中`searchString`出现的最低索引，否则返回`-1`。任何返回的索引都将是`minIndex`或更高。
- en: '[PRE40]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '`.lastIndexOf(searchString: string, maxIndex=Infinity): number` ^([ES1])'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.lastIndexOf(searchString: string, maxIndex=Infinity): number` ^([ES1])'
- en: Returns the highest index at which `searchString` appears within the string
    or `-1, otherwise. Any returned index will be`maxIndex` or lower.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回字符串中`searchString`出现的最高索引，否则返回`-1`。任何返回的索引都将是`maxIndex`或更低。
- en: '[PRE41]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[1 of 2] `.match(regExp: string | RegExp): RegExpMatchArray | null` ^([ES3])'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[1 of 2] `.match(regExp: string | RegExp): RegExpMatchArray | null` ^([ES3])'
- en: If `regExp` is a regular expression with flag `/g` not set, then `.match()`
    returns the first match for `regExp` within the string. Or `null` if there is
    no match. If `regExp` is a string, it is used to create a regular expression (think
    parameter of `new RegExp()`) before performing the previously mentioned steps.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`regExp`是一个带有标志`/g`的正则表达式，则`.match()`返回字符串中`regExp`的第一个匹配项。如果没有匹配项则返回`null`。如果`regExp`是一个字符串，则在执行先前提到的步骤之前，用它创建一个正则表达式（类似于`new
    RegExp()`的参数）。
- en: 'The result has the following type:'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果具有以下类型：
- en: '[PRE42]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Numbered capture groups become Array indices (which is why this type extends
    `Array`). [Named capture groups](ch_regexps.html#named-capture-groups) (ES2018)
    become properties of `.groups`. In this mode, `.match()` works like `RegExp.prototype.exec()`.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编号的捕获组成为数组索引（这就是为什么这种类型扩展了`Array`）。[命名捕获组](ch_regexps.html#named-capture-groups)（ES2018）成为`.groups`的属性。在此模式下，`.match()`的工作方式类似于`RegExp.prototype.exec()`。
- en: 'Examples:'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE43]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[2 of 2] `.match(regExp: RegExp): string[] | null` ^([ES3])'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2 of 2] `.match(regExp: RegExp): string[] | null` ^([ES3])'
- en: If flag `/g` of `regExp` is set, `.match()` returns either an Array with all
    matches or `null` if there was no match.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`regExp`的标志`/g`被设置，`.match()`返回所有匹配项的数组，如果没有匹配项则返回`null`。
- en: '[PRE44]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '`.search(regExp: string | RegExp): number` ^([ES3])'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.search(regExp: string | RegExp): number` ^([ES3])'
- en: Returns the index at which `regExp` occurs within the string. If `regExp` is
    a string, it is used to create a regular expression (think parameter of `new RegExp()`).
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回`regExp`在字符串中出现的索引。如果`regExp`是一个字符串，则用它创建一个正则表达式（类似于`new RegExp()`的参数）。
- en: '[PRE45]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '`.startsWith(searchString: string, startPos=0): boolean` ^([ES6])'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.startsWith(searchString: string, startPos=0): boolean` ^([ES6])'
- en: Returns `true` if `searchString` occurs in the string at index `startPos`. Returns
    `false` otherwise.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`searchString`在索引`startPos`处出现，则返回`true`。否则返回`false`。
- en: '[PRE46]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '20.8.4 `String.prototype`: extracting'
  id: totrans-231
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '20.8.4 `String.prototype`: 提取'
- en: '`.slice(start=0, end=this.length): string` ^([ES3])'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.slice(start=0, end=this.length): string` ^([ES3])'
- en: Returns the substring of the string that starts at (including) index `start`
    and ends at (excluding) index `end`. If an index is negative, it is added to `.length`
    before it is used (`-1` becomes `this.length-1`, etc.).
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回字符串的子字符串，从索引`start`（包括）开始，到索引`end`（不包括）结束。如果索引为负数，则在使用之前将其添加到`.length`（`-1`变为`this.length-1`等）。
- en: '[PRE47]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '`.at(index: number): string | undefined` ^([ES2022])'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.at(index: number): string | undefined` ^([ES2022])'
- en: Returns the JavaScript character at `index` as a string. If `index` is negative,
    it is added to `.length` before it is used (`-1` becomes `this.length-1`, etc.).
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回索引处的JavaScript字符作为字符串。如果`index`为负数，则在使用之前将其添加到`.length`（`-1`变为`this.length-1`等）。
- en: '[PRE48]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '`.split(separator: string | RegExp, limit?: number): string[]` ^([ES3])'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.split(separator: string | RegExp, limit?: number): string[]` ^([ES3])'
- en: 'Splits the string into an Array of substrings – the strings that occur between
    the separators. The separator can be a string:'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将字符串拆分为子字符串数组 - 出现在分隔符之间的字符串。分隔符可以是一个字符串：
- en: '[PRE49]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'It can also be a regular expression:'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它也可以是正则表达式：
- en: '[PRE50]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The last invocation demonstrates that captures made by groups in the regular
    expression become elements of the returned Array.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后一个调用演示了正则表达式中的组捕获成为返回的数组的元素。
- en: '**Warning: `.split('''')` splits a string into JavaScript characters.** That
    doesn’t work well when dealing with astral code points (which are encoded as two
    JavaScript characters). For example, emojis are astral:'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**警告：`.split('''')`将字符串拆分为JavaScript字符。**在处理星号代码点（编码为两个JavaScript字符）时效果不佳。例如，表情符号是星号的：'
- en: '[PRE51]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Instead, it is better to use `Array.from()` (or spreading):'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 相反，最好使用`Array.from()`（或扩展）：
- en: '[PRE52]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '`.substring(start: number, end=this.length): string` ^([ES1])'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.substring(start: number, end=this.length): string` ^([ES1])'
- en: Use `.slice()` instead of this method. `.substring()` wasn’t implemented consistently
    in older engines and doesn’t support negative indices.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`.slice()`代替这个方法。`.substring()`在旧引擎中实现不一致，并且不支持负索引。
- en: '20.8.5 `String.prototype`: combining'
  id: totrans-250
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '20.8.5 `String.prototype`: 组合'
- en: '`.concat(...strings: string[]): string` ^([ES3])'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.concat(...strings: string[]): string` ^([ES3])'
- en: Returns the concatenation of the string and `strings`. `'a'.concat('b')` is
    equivalent to `'a'+'b'`. The latter is much more popular.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回字符串和`strings`的连接。`'a'.concat('b')`等同于`'a'+'b'`。后者更受欢迎。
- en: '[PRE53]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '`.padEnd(len: number, fillString='' ''): string` ^([ES2017])'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.padEnd(len: number, fillString='' ''): string` ^([ES2017])'
- en: Appends (fragments of) `fillString` to the string until it has the desired length
    `len`. If it already has or exceeds `len`, then it is returned without any changes.
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将（片段）`fillString`附加到字符串，直到达到所需的长度`len`。如果它已经达到或超过`len`，则返回时不会有任何更改。
- en: '[PRE54]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '`.padStart(len: number, fillString='' ''): string` ^([ES2017])'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.padStart(len: number, fillString='' ''): string` ^([ES2017])'
- en: Prepends (fragments of) `fillString` to the string until it has the desired
    length `len`. If it already has or exceeds `len`, then it is returned without
    any changes.
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将（片段）`fillString`前置到字符串，直到达到所需的长度`len`。如果它已经达到或超过`len`，则返回时不会有任何更改。
- en: '[PRE55]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '`.repeat(count=0): string` ^([ES6])'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.repeat(count=0): string` ^([ES6])'
- en: Returns the string, concatenated `count` times.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回字符串，连接`count`次。
- en: '[PRE56]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '20.8.6 `String.prototype`: transforming'
  id: totrans-263
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '20.8.6 `String.prototype`: 转换'
- en: '`.normalize(form: ''NFC''|''NFD''|''NFKC''|''NFKD'' = ''NFC''): string` ^([ES6])'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.normalize(form: ''NFC''|''NFD''|''NFKC''|''NFKD'' = ''NFC''): string` ^([ES6])'
- en: Normalizes the string according to [the Unicode Normalization Forms](https://unicode.org/reports/tr15/).
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据[Unicode规范化形式](https://unicode.org/reports/tr15/)对字符串进行规范化。
- en: '[1 of 2] `.replaceAll(searchValue: string | RegExp, replaceValue: string):
    string` ^([ES2021])'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[1 of 2] `.replaceAll(searchValue: string | RegExp, replaceValue: string):
    string` ^([ES2021])'
- en: '![](../Images/5fad46ca9f1c9224fc57d54750b4f1f4.png)  **What to do if you can’t
    use `.replaceAll()`**'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![](../Images/5fad46ca9f1c9224fc57d54750b4f1f4.png)  **如果无法使用`.replaceAll()`该怎么办**'
- en: If `.replaceAll()` isn’t available on your targeted platform, you can use `.replace()`
    instead. How is explained in [§43.6.8.1 “`str.replace(searchValue, replacementValue)`
    ^([ES3])”](ch_regexps.html#String.prototype.replace).
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在目标平台上不支持`.replaceAll()`，则可以使用`.replace()`。如何使用在[§43.6.8.1 “`str.replace(searchValue,
    replacementValue)` ^([ES3])”](ch_regexps.html#String.prototype.replace)中有解释。
- en: Replaces all matches of `searchValue` with `replaceValue`. If `searchValue`
    is a regular expression without flag `/g`, a `TypeError` is thrown.
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用`replaceValue`替换所有匹配的`searchValue`。如果`searchValue`是一个没有标志`/g`的正则表达式，则会抛出`TypeError`。
- en: '[PRE57]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Special characters in `replaceValue` are:'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`replaceValue`中的特殊字符是：'
- en: '`$$`: becomes `$`'
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$$`: 变成`$`'
- en: '`$n`: becomes the capture of numbered group `n` (alas, `$0` stands for the
    string `''$0''`, it does not refer to the complete match)'
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$n`: 变成编号为`n`的捕获组（遗憾的是，`$0`代表字符串`''$0''`，它不是指完全匹配）'
- en: '`$&`: becomes the complete match'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$&`: 变成完全匹配'
- en: '`$``: becomes everything before the match'
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$``: 变成匹配前的所有内容'
- en: '`$''`: becomes everything after the match'
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$''`: 变成匹配后的所有内容'
- en: 'Examples:'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE58]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[Named capture groups](ch_regexps.html#named-capture-groups) (ES2018) are supported,
    too:'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[命名捕获组](ch_regexps.html#named-capture-groups)（ES2018）也受支持：'
- en: '`$<name>` becomes the capture of named group `name`'
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$<name>` 变成命名组`name`的捕获'
- en: 'Example:'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE59]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[2 of 2] `.replaceAll(searchValue: string | RegExp, replacer: (...args: any[])
    => string): string` ^([ES2021])'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2 of 2] `.replaceAll(searchValue: string | RegExp, replacer: (...args: any[])
    => string): string` ^([ES2021])'
- en: 'If the second parameter is a function, occurrences are replaced with the strings
    it returns. Its parameters `args` are:'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果第二个参数是一个函数，则出现的地方将被它返回的字符串替换。它的参数`args`是：
- en: '`matched: string`. The complete match'
  id: totrans-285
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matched: string`。完全匹配'
- en: '`g1: string|undefined`. The capture of numbered group 1'
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`g1: string|undefined`。编号为1的捕获组'
- en: '`g2: string|undefined`. The capture of numbered group 2'
  id: totrans-287
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`g2: string|undefined`。编号为2的捕获组'
- en: (Etc.)
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: （等等）
- en: '`offset: number`. Where was the match found in the input string?'
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`offset: number`。匹配在输入字符串中的位置？'
- en: '`input: string`. The whole input string'
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input: string`。整个输入字符串'
- en: '[PRE60]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[Named capture groups](ch_regexps.html#named-capture-groups) (ES2018) are supported,
    too. If there are any, an argument is added at the end with an object whose properties
    contain the captures:'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[命名捕获组](ch_regexps.html#named-capture-groups)（ES2018）也受支持。如果有任何，最后会添加一个带有包含捕获的属性的对象的参数：'
- en: '[PRE61]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '`.replace(searchValue: string | RegExp, replaceValue: string): string` ^([ES3])'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.replace(searchValue: string | RegExp, replaceValue: string): string` ^([ES3])'
- en: '`.replace(searchValue: string | RegExp, replacer: (...args: any[]) => string):
    string` ^([ES3])'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.replace(searchValue: string | RegExp, replacer: (...args: any[]) => string):
    string` ^([ES3])'
- en: '`.replace()` works like `.replaceAll()`, but only replaces the first occurrence
    if `searchValue` is a string or a regular expression without `/g`:'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`.replace()`的工作方式类似于`.replaceAll()`，但如果`searchValue`是字符串或没有`/g`的正则表达式，则只替换第一次出现：'
- en: '[PRE62]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: For more information on this method, see [§43.6.8.1 “`str.replace(searchValue,
    replacementValue)` ^([ES3])”](ch_regexps.html#String.prototype.replace).
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关此方法的更多信息，请参见[§43.6.8.1 “`str.replace(searchValue, replacementValue)` ^([ES3])”](ch_regexps.html#String.prototype.replace)。
- en: '`.toUpperCase(): string` ^([ES1])'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.toUpperCase(): string` ^([ES1])'
- en: Returns a copy of the string in which all lowercase alphabetic characters are
    converted to uppercase. How well that works for various alphabets, depends on
    the JavaScript engine.
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回字符串的副本，其中所有小写字母都转换为大写。这对各种字母表的工作效果取决于JavaScript引擎。
- en: '[PRE63]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '`.toLowerCase(): string` ^([ES1])'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.toLowerCase(): string` ^([ES1])'
- en: Returns a copy of the string in which all uppercase alphabetic characters are
    converted to lowercase. How well that works for various alphabets, depends on
    the JavaScript engine.
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回字符串的副本，其中所有大写字母都转换为小写。这对各种字母表的工作效果取决于JavaScript引擎。
- en: '[PRE64]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '`.trim(): string` ^([ES5])'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.trim(): string` ^([ES5])'
- en: Returns a copy of the string in which all leading and trailing whitespace (spaces,
    tabs, line terminators, etc.) is gone.
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回字符串的副本，其中所有前导和尾随空白（空格、制表符、行终止符等）都消失了。
- en: '[PRE65]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '`.trimEnd(): string` ^([ES2019])'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.trimEnd(): string` ^([ES2019])'
- en: 'Similar to `.trim()` but only the end of the string is trimmed:'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类似于`.trim()`，但只修剪字符串的末尾：
- en: '[PRE66]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '`.trimStart(): string` ^([ES2019])'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.trimStart(): string` ^([ES2019])'
- en: 'Similar to `.trim()` but only the beginning of the string is trimmed:'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类似于`.trim()`，但只修剪字符串的开头：
- en: '[PRE67]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 20.8.7 Sources
  id: totrans-314
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.8.7 来源
- en: '[TypeScript’s built-in typings](https://github.com/Microsoft/TypeScript/blob/master/lib/)'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TypeScript的内置类型](https://github.com/Microsoft/TypeScript/blob/master/lib/)'
- en: '[MDN web docs for JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript)'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[JavaScript的MDN Web文档](https://developer.mozilla.org/en-US/docs/Web/JavaScript)'
- en: '[ECMAScript language specification](https://tc39.github.io/ecma262/)'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ECMAScript语言规范](https://tc39.github.io/ecma262/)'
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Exercise: Using string
    methods**'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习：使用字符串方法**'
- en: '`exercises/strings/remove_extension_test.mjs`'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`exercises/strings/remove_extension_test.mjs`'
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz**'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '**测验**'
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[测验应用](ch_quizzes-exercises.html#quizzes)。
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/13)'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/impatient-js/issues/13)'
