["```js\nimport * as assert from 'assert/strict';\nassert.equal(3 + 5, 8);\n```", "```js\nfunction id(x) {\n return x;\n}\n```", "```js\nassert.equal(id('abc'), 'abc');\n```", "```js\n// For the exercise, you must implement the function hello().\n// The test checks if you have done it properly.\ntest('First exercise', () => {\n assert.equal(hello('world'), 'Hello world!');\n assert.equal(hello('Jane'), 'Hello Jane!');\n assert.equal(hello('John'), 'Hello John!');\n assert.equal(hello(''), 'Hello !');\n});\n```", "```js\nassert.notEqual({foo: 1}, {foo: 1});\n```", "```js\nassert.deepEqual({foo: 1}, {foo: 1});\n```", "```js\nassert.notEqual(['a', 'b', 'c'], ['a', 'b', 'c']);\nassert.deepEqual(['a', 'b', 'c'], ['a', 'b', 'c']);\n```", "```js\n    assert.equal(3+3, 6);\n    ```", "```js\n    assert.notEqual(3+3, 22);\n    ```", "```js\nlet e;\ntry {\n const x = 3;\n assert.equal(x, 8, 'x must be equal to 8')\n} catch (err) {\n assert.equal(\n String(err),\n 'AssertionError [ERR_ASSERTION]: x must be equal to 8');\n}\n```", "```js\n    assert.deepEqual([1,2,3], [1,2,3]);\n    assert.deepEqual([], []);\n\n    // To .equal(), an object is only equal to itself:\n    assert.notEqual([], []);\n    ```", "```js\n    assert.notDeepEqual([1,2,3], [1,2]);\n    ```", "```js\n    assert.throws(\n     () => {\n     null.prop;\n     }\n    );\n    ```", "```js\n    assert.throws(\n     () => {\n     null.prop;\n     },\n     TypeError\n    );\n    ```", "```js\n    assert.throws(\n     () => {\n     null.prop;\n     },\n     /^TypeError: Cannot read properties of null \\(reading 'prop'\\)$/\n    );\n    ```", "```js\n    assert.throws(\n     () => {\n     null.prop;\n     },\n     {\n     name: 'TypeError',\n     message: \"Cannot read properties of null (reading 'prop')\",\n     }\n    );\n    ```", "```js\n    try {\n     functionThatShouldThrow();\n     assert.fail();\n    } catch (_) {\n     // Success\n    }\n    ```"]