- en: 35 Sets (Set)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 35 集合（Set）
- en: 原文：[https://exploringjs.com/impatient-js/ch_sets.html](https://exploringjs.com/impatient-js/ch_sets.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/impatient-js/ch_sets.html](https://exploringjs.com/impatient-js/ch_sets.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 35.1 [Using Sets](ch_sets.html#using-sets)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.1 [使用集合](ch_sets.html#using-sets)
- en: 35.1.1 [Creating Sets](ch_sets.html#creating-sets)
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.1.1 [创建集合](ch_sets.html#creating-sets)
- en: 35.1.2 [Adding, removing, checking membership](ch_sets.html#adding-removing-checking-membership)
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.1.2 [添加、删除、检查成员资格](ch_sets.html#adding-removing-checking-membership)
- en: 35.1.3 [Determining the size of a Set and clearing it](ch_sets.html#determining-the-size-of-a-set-and-clearing-it)
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.1.3 确定集合的大小并清除它
- en: 35.1.4 [Iterating over Sets](ch_sets.html#iterating-over-sets-1)
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.1.4 [遍历集合](ch_sets.html#iterating-over-sets-1)
- en: 35.2 [Examples of using Sets](ch_sets.html#examples-of-using-sets)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.2 [使用集合的示例](ch_sets.html#examples-of-using-sets)
- en: 35.2.1 [Removing duplicates from an Array](ch_sets.html#removing-duplicates-from-an-array)
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.2.1 [从数组中移除重复项](ch_sets.html#removing-duplicates-from-an-array)
- en: 35.2.2 [Creating a set of Unicode characters (code points)](ch_sets.html#creating-a-set-of-unicode-characters-code-points)
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.2.2 [创建一个Unicode字符（代码点）的集合](ch_sets.html#creating-a-set-of-unicode-characters-code-points)
- en: 35.3 [What Set elements are considered equal?](ch_sets.html#what-set-elements-are-considered-equal)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.3 哪些集合元素被视为相等？
- en: 35.4 [Missing Set operations](ch_sets.html#missing-set-operations)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.4 [缺失的集合操作](ch_sets.html#missing-set-operations)
- en: 35.4.1 [Union (`a` ∪ `b`)](ch_sets.html#union-a-b)
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.4.1 [并集 (`a` ∪ `b`)](ch_sets.html#union-a-b)
- en: 35.4.2 [Intersection (`a` ∩ `b`)](ch_sets.html#intersection-a-b)
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.4.2 [交集 (`a` ∩ `b`)](ch_sets.html#intersection-a-b)
- en: 35.4.3 [Difference (`a` \ `b`)](ch_sets.html#difference-a-b)
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.4.3 [差集 (`a` \ `b`)](ch_sets.html#difference-a-b)
- en: 35.4.4 [Mapping over Sets](ch_sets.html#mapping-over-sets)
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.4.4 [映射集合](ch_sets.html#mapping-over-sets)
- en: 35.4.5 [Filtering Sets](ch_sets.html#filtering-sets)
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.4.5 [过滤集合](ch_sets.html#filtering-sets)
- en: '35.5 [Quick reference: `Set<T>`](ch_sets.html#quickref-sets)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.5 [快速参考：`Set<T>`](ch_sets.html#quickref-sets)
- en: 35.5.1 [Constructor](ch_sets.html#constructor-1)
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.5.1 [构造函数](ch_sets.html#constructor-1)
- en: '35.5.2 [`Set<T>.prototype`: single Set elements](ch_sets.html#sett.prototype-single-set-elements)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.5.2 [`Set<T>.prototype`：单个Set元素](ch_sets.html#sett.prototype-single-set-elements)
- en: '35.5.3 [`Set<T>.prototype`: all Set elements](ch_sets.html#sett.prototype-all-set-elements)'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.5.3 [`Set<T>.prototype`：所有Set元素](ch_sets.html#sett.prototype-all-set-elements)
- en: '35.5.4 [`Set<T>.prototype`: iterating and looping](ch_sets.html#sett.prototype-iterating-and-looping)'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.5.4 [`Set<T>.prototype`：迭代和循环](ch_sets.html#sett.prototype-iterating-and-looping)
- en: 35.5.5 [Symmetry with `Map`](ch_sets.html#symmetry-with-map)
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.5.5 [与`Map`的对称性](ch_sets.html#symmetry-with-map)
- en: '35.6 [FAQ: Sets](ch_sets.html#faq-sets)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.6 [常见问题：集合](ch_sets.html#faq-sets)
- en: 35.6.1 [Why do Sets have a `.size`, while Arrays have a `.length`?](ch_sets.html#why-do-sets-have-a-.size-while-arrays-have-a-.length)
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35.6.1 [为什么集合有`.size`，而数组有`.length`？](ch_sets.html#why-do-sets-have-a-.size-while-arrays-have-a-.length)
- en: '* * *'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Before ES6, JavaScript didn’t have a data structure for sets. Instead, two
    workarounds were used:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在ES6之前，JavaScript没有集合的数据结构。而是使用了两种解决方法：
- en: The keys of an object were used as a set of strings.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象的键被用作字符串的集合。
- en: Arrays were used as sets of arbitrary values. The downside is that checking
    *membership* (if an Array contains a value) is slower.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组被用作任意值的集合。缺点是检查*成员资格*（数组是否包含一个值）较慢。
- en: Since ES6, JavaScript has the data structure `Set`, which can contain arbitrary
    values and performs membership checks quickly.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 自ES6以来，JavaScript有了数据结构`Set`，它可以包含任意值并快速执行成员资格检查。
- en: 35.1 Using Sets
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 35.1 使用集合
- en: 35.1.1 Creating Sets
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 35.1.1 创建集合
- en: There are three common ways of creating Sets.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种常见的创建集合的方法。
- en: 'First, you can use the constructor without any parameters to create an empty
    Set:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您可以使用没有任何参数的构造函数创建一个空的Set：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Second, you can pass an iterable (e.g., an Array) to the constructor. The iterated
    values become elements of the new Set:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，您可以将可迭代对象（例如数组）传递给构造函数。迭代的值成为新Set的元素：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Third, the `.add()` method adds elements to a Set and is chainable:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，`.add()` 方法向Set中添加元素，并且可以链式调用：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 35.1.2 Adding, removing, checking membership
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 35.1.2 添加、删除、检查成员资格
- en: '`.add()` adds an element to a Set.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`.add()` 向Set中添加一个元素。'
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`.has()` checks if an element is a member of a Set.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`.has()` 检查一个元素是否是Set的成员。'
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`.delete()` removes an element from a Set.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`.delete()` 从Set中移除一个元素。'
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 35.1.3 Determining the size of a Set and clearing it
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 35.1.3 确定集合的大小并清除它
- en: '`.size` contains the number of elements in a Set.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`.size` 包含集合中元素的数量。'
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`.clear()` removes all elements of a Set.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`.clear()` 移除Set的所有元素。'
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 35.1.4 Iterating over Sets
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 35.1.4 遍历集合
- en: 'Sets are iterable and the `for-of` loop works as you’d expect:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 集合是可迭代的，`for-of`循环的工作方式与您期望的一样：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see, Sets preserve *insertion order*. That is, elements are always
    iterated over in the order in which they were added.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，集合保留了*插入顺序*。也就是说，元素总是按照它们被添加的顺序进行迭代。
- en: 'Given that Sets are iterable, you can use [`Array.from()`](ch_arrays.html#Array.from)
    to convert them to Arrays:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于集合是可迭代的，您可以使用[`Array.from()`](ch_arrays.html#Array.from)将其转换为数组：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 35.2 Examples of using Sets
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 35.2 使用集合的示例
- en: 35.2.1 Removing duplicates from an Array
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 35.2.1 从数组中移除重复项
- en: 'Converting an Array to a Set and back, removes duplicates from the Array:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 将数组转换为Set，然后再转换回来，可以从数组中移除重复项：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 35.2.2 Creating a set of Unicode characters (code points)
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 35.2.2 创建一个Unicode字符（代码点）的集合
- en: 'Strings are iterable and can therefore be used as parameters for `new Set()`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串是可迭代的，因此可以作为`new Set()`的参数使用：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 35.3 What Set elements are considered equal?
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 35.3 哪些集合元素被视为相等？
- en: As with Map keys, Set elements are compared similarly to `===`, with the exception
    of `NaN` being equal to itself.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 与Map键一样，Set元素的比较方式类似于`===`，唯一的例外是`NaN`等于它自己。
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As with `===`, two different objects are never considered equal (and there
    is no way to change that at the moment):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 与`===`一样，两个不同的对象永远不会被视为相等（目前没有办法改变这一点）：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 35.4 Missing Set operations
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 35.4 缺失的集合操作
- en: 'Sets are missing several common operations. Such an operation can usually be
    implemented by:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 集合缺少一些常见的操作。这样的操作通常可以通过实现：
- en: Converting the input Sets to Arrays by [spreading into Array literals](ch_arrays.html#spreading-into-array-literals).
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过[扩展为数组文字](ch_arrays.html#spreading-into-array-literals)将输入的Set转换为数组。
- en: Performing the operation on Arrays.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数组上执行操作。
- en: Converting the result to a Set and returning it.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将结果转换为Set并返回。
- en: 35.4.1 Union (`a` ∪ `b`)
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 35.4.1 并集（`a` ∪ `b`）
- en: Computing the union of two Sets `a` and `b` means creating a Set that contains
    the elements of both `a` and `b`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 计算两个Set `a` 和 `b` 的并集意味着创建一个包含`a`和`b`元素的Set。
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 35.4.2 Intersection (`a` ∩ `b`)
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 35.4.2 交集（`a` ∩ `b`）
- en: Computing the intersection of two Sets `a` and `b` means creating a Set that
    contains those elements of `a` that are also in `b`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 计算两个Set `a` 和 `b` 的交集意味着创建一个包含`a`和`b`中都有的元素的Set。
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 35.4.3 Difference (`a` \ `b`)
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 35.4.3 差集（`a` \ `b`）
- en: Computing the difference between two Sets `a` and `b` means creating a Set that
    contains those elements of `a` that are not in `b`. This operation is also sometimes
    called *minus* (−).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 计算两个Set `a` 和 `b` 之间的差异意味着创建一个包含`a`中不在`b`中的元素的Set。这个操作有时也被称为*减*（−）。
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 35.4.4 Mapping over Sets
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 35.4.4 对Set进行映射
- en: 'Sets don’t have a method `.map()`. But we can borrow the one that Arrays have:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 集合没有一个名为`.map()`的方法。但是我们可以借用数组的方法：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 35.4.5 Filtering Sets
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 35.4.5 对Set进行过滤
- en: 'We can’t directly `.filter()` Sets, so we need to use the corresponding Array
    method:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能直接使用`.filter()`来过滤Set，所以我们需要使用相应的数组方法：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '35.5 Quick reference: `Set<T>`'
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 35.5 快速参考：`Set<T>`
- en: 35.5.1 Constructor
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 35.5.1 构造函数
- en: '`new Set<T>(values?: Iterable<T>)` ^([ES6])'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new Set<T>(values?: Iterable<T>)` ^([ES6])'
- en: 'If you don’t provide the parameter `values`, then an empty Set is created.
    If you do, then the iterated values are added as elements to the Set. For example:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你不提供参数`values`，那么将创建一个空的Set。如果你提供了参数，那么迭代的值将被添加为Set的元素。例如：
- en: '[PRE19]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '35.5.2 `Set<T>.prototype`: single Set elements'
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '35.5.2 `Set<T>.prototype`: 单个Set元素'
- en: '`.add(value: T): this` ^([ES6])'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.add(value: T): this` ^([ES6])'
- en: Adds `value` to this Set. This method returns `this`, which means that it can
    be chained.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`value`添加到这个Set中。这个方法返回`this`，这意味着它可以被链接。
- en: '[PRE20]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`.delete(value: T): boolean` ^([ES6])'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.delete(value: T): boolean` ^([ES6])'
- en: Removes `value` from this Set. Returns `true` if something was deleted and `false`,
    otherwise.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从这个Set中移除`value`。如果有东西被删除，则返回`true`，否则返回`false`。
- en: '[PRE21]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`.has(value: T): boolean` ^([ES6])'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.has(value: T): boolean` ^([ES6])'
- en: Checks whether `value` is in this Set.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 检查`value`是否在这个Set中。
- en: '[PRE22]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '35.5.3 `Set<T>.prototype`: all Set elements'
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '35.5.3 `Set<T>.prototype`: 所有Set元素'
- en: '`get .size: number` ^([ES6])'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get .size: number` ^([ES6])'
- en: Returns how many elements there are in this Set.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回这个Set中有多少个元素。
- en: '[PRE23]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`.clear(): void` ^([ES6])'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.clear(): void` ^([ES6])'
- en: Removes all elements from this Set.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从这个Set中移除所有元素。
- en: '[PRE24]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '35.5.4 `Set<T>.prototype`: iterating and looping'
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '35.5.4 `Set<T>.prototype`: 迭代和循环'
- en: '`.values(): Iterable<T>` ^([ES6])'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.values(): Iterable<T>` ^([ES6])'
- en: Returns an iterable over all elements of this Set.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回这个Set的所有元素的可迭代对象。
- en: '[PRE25]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`[Symbol.iterator](): Iterable<T>` ^([ES6])'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[Symbol.iterator](): Iterable<T>` ^([ES6])'
- en: Default way of iterating over Sets. Same as `.values()`.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 迭代Set的默认方式。与`.values()`相同。
- en: '[PRE26]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`.forEach(callback: (value: T, key: T, theSet: Set<T>) => void, thisArg?: any):
    void` ^([ES6])'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.forEach(callback: (value: T, key: T, theSet: Set<T>) => void, thisArg?: any):
    void` ^([ES6])'
- en: Feeds each element of this Set to `callback()`. `value` and `key` both contain
    the current element. This redundancy was introduced so that this `callback` has
    the same type signature as the `callback` of `Map.prototype.forEach()`.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将这个Set的每个元素传递给`callback()`。`value`和`key`都包含当前元素。这种冗余是为了使这个`callback`的类型签名与`Map.prototype.forEach()`的`callback`相同。
- en: You can specify the `this` of `callback` via `thisArg`. If you omit it, `this`
    is `undefined`.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以通过`thisArg`指定`callback`的`this`。如果省略，`this`为`undefined`。
- en: '[PRE27]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 35.5.5 Symmetry with `Map`
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 35.5.5 与`Map`的对称性
- en: The following two methods mainly exist so that Sets and Maps have similar interfaces.
    Each Set element is handled as if it were a Map entry whose key and value are
    both the element.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两种方法主要是为了使Set和Map具有类似的接口。每个Set元素都被处理，就好像它是一个键和值都是元素的Map条目一样。
- en: '`Set.prototype.entries(): Iterable<[T,T]>` ^([ES6])'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Set.prototype.entries(): Iterable<[T,T]>` ^([ES6])'
- en: '`Set.prototype.keys(): Iterable<T>` ^([ES6])'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Set.prototype.keys(): Iterable<T>` ^([ES6])'
- en: '`.entries()` enables you to convert a Set to a Map:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`.entries()`使您可以将Set转换为Map：'
- en: '[PRE28]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '35.6 FAQ: Sets'
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 35.6 常见问题：Set
- en: 35.6.1 Why do Sets have a `.size`, while Arrays have a `.length`?
  id: totrans-130
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 35.6.1 为什么Set有`.size`，而数组有`.length`？
- en: The answer to this question is given in [§33.6.4 “Why do Maps have a `.size`,
    while Arrays have a `.length`?”](ch_maps.html#collection-size-vs-length).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的答案在[§33.6.4 “为什么Map有`.size`，而数组有`.length`？”](ch_maps.html#collection-size-vs-length)中给出。
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **测验**'
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[测验应用](ch_quizzes-exercises.html#quizzes)。
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/37)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/impatient-js/issues/37)'
