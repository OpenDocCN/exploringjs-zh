- en: 14 The non-values undefined and null
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14 The non-values undefined and null
- en: 原文：[https://exploringjs.com/impatient-js/ch_undefined-null.html](https://exploringjs.com/impatient-js/ch_undefined-null.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/impatient-js/ch_undefined-null.html](https://exploringjs.com/impatient-js/ch_undefined-null.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 14.1 [`undefined` vs. `null`](ch_undefined-null.html#undefined-vs.-null)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 14.1 [`undefined` vs. `null`](ch_undefined-null.html#undefined-vs.-null)
- en: 14.2 [Occurrences of `undefined` and `null`](ch_undefined-null.html#occurrences-of-undefined-and-null)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 14.2 [Occurrences of `undefined` and `null`](ch_undefined-null.html#occurrences-of-undefined-and-null)
- en: 14.2.1 [Occurrences of `undefined`](ch_undefined-null.html#occurrences-of-undefined)
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 14.2.1 [Occurrences of `undefined`](ch_undefined-null.html#occurrences-of-undefined)
- en: 14.2.2 [Occurrences of `null`](ch_undefined-null.html#occurrences-of-null)
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 14.2.2 [Occurrences of `null`](ch_undefined-null.html#occurrences-of-null)
- en: 14.3 [Checking for `undefined` or `null`](ch_undefined-null.html#checking-for-undefined-or-null)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 14.3 [Checking for `undefined` or `null`](ch_undefined-null.html#checking-for-undefined-or-null)
- en: 14.4 [The nullish coalescing operator (`??`) for default values [ES2020]](ch_undefined-null.html#nullish-coalescing-operator)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 14.4 [The nullish coalescing operator (`??`) for default values [ES2020]](ch_undefined-null.html#nullish-coalescing-operator)
- en: '14.4.1 [Example: counting matches](ch_undefined-null.html#example-counting-matches)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '14.4.1 [Example: counting matches](ch_undefined-null.html#example-counting-matches)'
- en: '14.4.2 [Example: specifying a default value for a property](ch_undefined-null.html#example-specifying-a-default-value-for-a-property)'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '14.4.2 [Example: specifying a default value for a property](ch_undefined-null.html#example-specifying-a-default-value-for-a-property)'
- en: 14.4.3 [Using destructuring for default values](ch_undefined-null.html#using-destructuring-for-default-values)
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 14.4.3 [Using destructuring for default values](ch_undefined-null.html#using-destructuring-for-default-values)
- en: '14.4.4 [Legacy approach: using logical Or (`||`) for default values](ch_undefined-null.html#legacy-approach-using-logical-or-for-default-values)'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '14.4.4 [Legacy approach: using logical Or (`||`) for default values](ch_undefined-null.html#legacy-approach-using-logical-or-for-default-values)'
- en: 14.4.5 [The nullish coalescing assignment operator (`??=`) [ES2021]](ch_undefined-null.html#nullish-coalescing-assignment-operator)
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 14.4.5 [空值合并赋值运算符 (`??=`) [ES2021]](ch_undefined-null.html#nullish-coalescing-assignment-operator)
- en: 14.5 [`undefined` and `null` don’t have properties](ch_undefined-null.html#undefined-and-null-dont-have-properties)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 14.5 [`undefined` and `null` don’t have properties](ch_undefined-null.html#undefined-and-null-dont-have-properties)
- en: 14.6 [The history of `undefined` and `null`](ch_undefined-null.html#the-history-of-undefined-and-null)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 14.6 [The history of `undefined` and `null`](ch_undefined-null.html#the-history-of-undefined-and-null)
- en: '* * *'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Many programming languages have one “non-value” called `null`. It indicates
    that a variable does not currently point to an object – for example, when it hasn’t
    been initialized yet.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 许多编程语言都有一个叫做 `null` 的“非值”。它表示变量当前没有指向对象 - 例如，当它尚未初始化时。
- en: 'In contrast, JavaScript has two of them: `undefined` and `null`.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，JavaScript 有两个：`undefined` 和 `null`。
- en: 14.1 `undefined` vs. `null`
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 14.1 `undefined` vs. `null`
- en: 'Both values are very similar and often used interchangeably. How they differ
    is therefore subtle. The language itself makes the following distinction:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个值非常相似，经常可以互换使用。它们的区别因此很微妙。语言本身做出以下区分：
- en: '`undefined` means “not initialized” (e.g., a variable) or “not existing” (e.g.,
    a property of an object).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`undefined` 意味着“未初始化”（例如变量）或“不存在”（例如对象的属性）。'
- en: '`null` means “the intentional absence of any object value” (a quote from [the
    language specification](https://tc39.github.io/ecma262/#sec-null-value)).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`null` 意味着“有意的缺少任何对象值”（引用自[语言规范](https://tc39.github.io/ecma262/#sec-null-value)）。'
- en: 'Programmers may make the following distinction:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员可能会做出以下区分：
- en: '`undefined` is the non-value used by the language (when something is uninitialized,
    etc.).'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`undefined` 是语言使用的非值（当某些东西未初始化时等）。'
- en: '`null` means “explicitly switched off”. That is, it helps implement a type
    that comprises both meaningful values and a meta-value that stands for “no meaningful
    value”. Such a type is called [*option type* or *maybe type*](https://en.wikipedia.org/wiki/Option_type)
    in functional programming.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`null` 意味着“明确关闭”。也就是说，它有助于实现一个包括有意义值和代表“没有有意义值”的元值的类型。这种类型在函数式编程中称为[*option
    type* 或 *maybe type*](https://en.wikipedia.org/wiki/Option_type)。'
- en: 14.2 Occurrences of `undefined` and `null`
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 14.2 Occurrences of `undefined` and `null`
- en: The following subsections describe where `undefined` and `null` appear in the
    language. We’ll encounter several mechanisms that are explained in more detail
    later in this book.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的小节描述了语言中 `undefined` 和 `null` 出现的地方。我们将遇到几种稍后在本书中更详细解释的机制。
- en: 14.2.1 Occurrences of `undefined`
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 14.2.1 Occurrences of `undefined`
- en: 'Uninitialized variable `myVar`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 未初始化的变量 `myVar`：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Parameter `x` is not provided:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 参数 `x` 未提供：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Property `.unknownProp` is missing:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 属性 `.unknownProp` 丢失：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If we don’t explicitly specify the result of a function via a `return` statement,
    JavaScript returns `undefined` for us:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有通过 `return` 语句明确指定函数的结果，JavaScript 会为我们返回 `undefined`：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 14.2.2 Occurrences of `null`
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 14.2.2 Occurrences of `null`
- en: 'The prototype of an object is either an object or, at the end of a chain of
    prototypes, `null`. `Object.prototype` does not have a prototype:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的原型要么是对象，要么在原型链的末端是 `null`。`Object.prototype` 没有原型：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we match a regular expression (such as `/a/`) against a string (such as
    `''x''`), we either get an object with matching data (if matching was successful)
    or `null` (if matching failed):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对字符串（例如 `'x'`）进行正则表达式匹配（例如 `/a/`），我们要么得到一个具有匹配数据的对象（如果匹配成功），要么得到 `null`（如果匹配失败）：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The [JSON data format](ch_json.html) does not support `undefined`, only `null`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[JSON 数据格式](ch_json.html) 不支持 `undefined`，只支持 `null`：'
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 14.3 Checking for `undefined` or `null`
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 14.3 Checking for `undefined` or `null`
- en: 'Checking for either:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 检查任何一个：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Does `x` have a value?
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`x` 有值吗？'
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Is `x` either `undefined` or `null`?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`x` 是 `undefined` 还是 `null`？'
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Truthy* means “is `true` if coerced to boolean”. *Falsy* means “is `false`
    if coerced to boolean”. Both concepts are explained properly in [§15.2 “Falsy
    and truthy values”](ch_booleans.html#falsiness-truthiness).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*Truthy* 意味着“如果强制转换为布尔值，则为 `true`”。*Falsy* 意味着“如果强制转换为布尔值，则为 `false`”。这两个概念在[§15.2
    “Falsy and truthy values”](ch_booleans.html#falsiness-truthiness)中得到了适当的解释。'
- en: 14.4 The nullish coalescing operator (`??`) for default values [ES2020]
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 14.4 The nullish coalescing operator (`??`) for default values [ES2020]
- en: 'Sometimes we receive a value and only want to use it if it isn’t either `null`
    or `undefined`. Otherwise, we’d like to use a default value, as a fallback. We
    can do that via the *nullish coalescing operator* (`??`):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们会收到一个值，只想在它既不是`null`也不是`undefined`时使用它。否则，我们希望使用一个默认值作为后备。我们可以通过*空值合并运算符*(`??`)来实现这一点：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following two expressions are equivalent:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两个表达式是等价的：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '14.4.1 Example: counting matches'
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 14.4.1 示例：计算匹配项
- en: 'The following code shows a real-world example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了一个现实世界的例子：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If there are one or more matches for `regex` inside `str`, then `.match()` returns
    an Array. If there are no matches, it unfortunately returns `null` (and not the
    empty Array). We fix that via the `??` operator.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`str`中存在一个或多个`regex`的匹配项，则`.match()`返回一个数组。如果没有匹配项，它不幸地返回`null`（而不是空数组）。我们通过`??`运算符来修复这个问题。
- en: 'We also could have used [optional chaining](ch_objects.html#optional-chaining):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用[可选链](ch_objects.html#optional-chaining)：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '14.4.2 Example: specifying a default value for a property'
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 14.4.2 示例：为属性指定默认值
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 14.4.3 Using destructuring for default values
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 14.4.3 使用解构来设置默认值
- en: 'In some cases, destructuring can also be used for default values – for example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，解构也可以用于默认值 - 例如：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '14.4.4 Legacy approach: using logical Or (`||`) for default values'
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 14.4.4 传统方法：使用逻辑或(`||`)来设置默认值
- en: Before ECMAScript 2020 and the nullish coalescing operator, logical Or was used
    for default values. That has a downside.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在ECMAScript 2020之前和空值合并运算符之前，逻辑或被用于默认值。这有一个缺点。
- en: '`||` works as expected for `undefined` and `null`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`||`对`undefined`和`null`的工作方式与预期相同：'
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'But it also returns the default for all other falsy values – for example:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 但它还返回所有其他假值的默认值 - 例如：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Compare that to how `??` works:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将其与`??`的工作方式进行比较：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 14.4.5 The nullish coalescing assignment operator (`??=`) [ES2021]
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 14.4.5 空值合并赋值运算符(`??=`) [ES2021]
- en: '`??=` is a [logical assignment operator](ch_operators.html#logical-assignment-operators).
    The following two expressions are roughly equivalent:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`??=`是一个[逻辑赋值运算符](ch_operators.html#logical-assignment-operators)。以下两个表达式大致等价：'
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'That means that `??=` is [short-circuiting](ch_booleans.html#short-circuiting):
    The assignment is only made if `a` is `undefined` or `null`.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着`??=`是[短路](ch_booleans.html#short-circuiting)的：只有在`a`是`undefined`或`null`时才进行赋值。
- en: '14.4.5.1 Example: using `??=` to add missing properties'
  id: totrans-80
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 14.4.5.1 示例：使用`??=`添加丢失的属性
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 14.5 `undefined` and `null` don’t have properties
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 14.5 `undefined`和`null`没有属性
- en: '`undefined` and `null` are the only two JavaScript values where we get an exception
    if we try to read a property. To explore this phenomenon, let’s use the following
    function, which reads (“gets”) property `.foo` and returns the result.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`undefined`和`null`是JavaScript中唯一两个值，如果我们尝试读取属性，会得到异常。为了探索这一现象，让我们使用以下函数，该函数读取（“获取”）属性`.foo`并返回结果。'
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If we apply `getFoo()` to various values, we can see that it only fails for
    `undefined` and `null`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将`getFoo()`应用于各种值，我们可以看到它仅对`undefined`和`null`失败：
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 14.6 The history of `undefined` and `null`
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 14.6 未定义和null的历史
- en: 'In Java (which inspired many aspects of JavaScript), initialization values
    depend on the static type of a variable:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中（它启发了JavaScript的许多方面），初始化值取决于变量的静态类型：
- en: Variables with object types are initialized with `null`.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有对象类型的变量被初始化为`null`。
- en: Each primitive type has its own initialization value. For example, `int` variables
    are initialized with `0`.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每种原始类型都有自己的初始化值。例如，`int`变量的初始化值为`0`。
- en: In JavaScript, each variable can hold both object values and primitive values.
    Therefore, if `null` means “not an object”, JavaScript also needs an initialization
    value that means “neither an object nor a primitive value”. That initialization
    value is `undefined`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，每个变量既可以保存对象值，也可以保存原始值。因此，如果`null`表示“不是对象”，JavaScript还需要一个初始化值，表示“既不是对象也不是原始值”。该初始化值是`undefined`。
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png) **测验**'
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[测验应用程序](ch_quizzes-exercises.html#quizzes)。
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/9)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/impatient-js/issues/9)'
