- en: 3 History and evolution of JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://exploringjs.com/impatient-js/ch_history.html](https://exploringjs.com/impatient-js/ch_history.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 [How JavaScript was created](ch_history.html#how-javascript-was-created)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.2 [Standardizing JavaScript](ch_history.html#standardizing-javascript)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.3 [Timeline of ECMAScript versions](ch_history.html#timeline-of-ecmascript-versions)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.4 [Ecma Technical Committee 39 (TC39)](ch_history.html#tc39)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.5 [The TC39 process](ch_history.html#tc39-process)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '3.5.1 [Tip: Think in individual features and stages, not ECMAScript versions](ch_history.html#tip-think-in-individual-features-and-stages-not-ecmascript-versions)'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '3.6 [FAQ: TC39 process](ch_history.html#tc39-process-faq)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.6.1 [How is [my favorite proposed feature] doing?](ch_history.html#how-is-my-favorite-proposed-feature-doing)
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.6.2 [Is there an official list of ECMAScript features?](ch_history.html#is-there-an-official-list-of-ecmascript-features)
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '3.7 [Evolving JavaScript: Don’t break the web](ch_history.html#backward-compatibility)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 How JavaScript was created
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JavaScript was created in May 1995 in 10 days, by Brendan Eich. Eich worked
    at Netscape and implemented JavaScript for their web browser, *Netscape Navigator*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: The idea was that major interactive parts of the client-side web were to be
    implemented in Java. JavaScript was supposed to be a glue language for those parts
    and to also make HTML slightly more interactive. Given its role of assisting Java,
    JavaScript had to look like Java. That ruled out existing solutions such as Perl,
    Python, TCL, and others.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Initially, JavaScript’s name changed several times:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Its code name was *Mocha*.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the Netscape Navigator 2.0 betas (September 1995), it was called *LiveScript*.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Netscape Navigator 2.0 beta 3 (December 1995), it got its final name, *JavaScript*.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.2 Standardizing JavaScript
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two standards for JavaScript:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: ECMA-262 is hosted by Ecma International. It is the primary standard.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ISO/IEC 16262 is hosted by the International Organization for Standardization
    (ISO) and the International Electrotechnical Commission (IEC). This is a secondary
    standard.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The language described by these standards is called *ECMAScript*, not *JavaScript*.
    A different name was chosen because Sun (now Oracle) had a trademark for the latter
    name. The “ECMA” in “ECMAScript” comes from the organization that hosts the primary
    standard.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: The original name of that organization was *ECMA*, an acronym for *European
    Computer Manufacturers Association*. It was later changed to *Ecma International*
    (with “Ecma” being a proper name, not an acronym) because the organization’s activities
    had expanded beyond Europe. The initial all-caps acronym explains the spelling
    of ECMAScript.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'In principle, JavaScript and ECMAScript mean the same thing. Sometimes the
    following distinction is made:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: The term *JavaScript* refers to the language and its implementations.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The term *ECMAScript* refers to the language standard and language versions.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Therefore, *ECMAScript 6* is a version of the language (its 6th edition).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 3.3 Timeline of ECMAScript versions
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is a brief timeline of ECMAScript versions:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'ECMAScript 1 (June 1997): First version of the standard.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ECMAScript 2 (June 1998): Small update to keep ECMA-262 in sync with the ISO
    standard.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ECMAScript 3 (December 1999): Adds many core features – “[…] regular expressions,
    better string handling, new control statements [do-while, switch], try/catch exception
    handling, […]”'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ECMAScript 4 (abandoned in July 2008): Would have been a massive upgrade (with
    static typing, modules, namespaces, and more), but ended up being too ambitious
    and dividing the language’s stewards.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ECMAScript 5 (December 2009): Brought minor improvements – a few standard library
    features and [*strict mode*](ch_syntax.html#strict-mode).'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ECMAScript 5.1 (June 2011): Another small update to keep Ecma and ISO standards
    in sync.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ECMAScript 6 (June 2015): A large update that fulfilled many of the promises
    of ECMAScript 4\. This version is the first one whose official name – *ECMAScript
    2015* – is based on the year of publication.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECMAScript 6（2015年6月）：一个大型更新，实现了ECMAScript 4的许多承诺。这个版本是第一个官方名称为*ECMAScript 2015*的版本，名称是基于出版年份的。
- en: 'ECMAScript 2016 (June 2016): First yearly release. The shorter release life
    cycle resulted in fewer new features compared to the large ES6.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECMAScript 2016（2016年6月）：首次年度发布。较短的发布周期导致新功能较少，与大型ES6相比。
- en: ECMAScript 2017 (June 2017). Second yearly release.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECMAScript 2017（2017年6月）：第二次年度发布。
- en: Subsequent ECMAScript versions (ES2018, etc.) are always ratified in June.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随后的ECMAScript版本（ES2018等）总是在6月份正式通过。
- en: 3.4 Ecma Technical Committee 39 (TC39)
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.4 Ecma技术委员会39（TC39）
- en: 'TC39 is the committee that evolves JavaScript. Its members are, strictly speaking,
    companies: Adobe, Apple, Facebook, Google, Microsoft, Mozilla, Opera, Twitter,
    and others. That is, companies that are usually fierce competitors are working
    together for the good of the language.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: TC39是推动JavaScript发展的委员会。严格来说，它的成员是公司：Adobe、Apple、Facebook、Google、Microsoft、Mozilla、Opera、Twitter等。也就是说，通常是激烈竞争的公司正在为了语言的利益而共同合作。
- en: Every two months, TC39 has meetings that member-appointed delegates and invited
    experts attend. The minutes of those meetings are public in [a GitHub repository](https://github.com/tc39/tc39-notes/).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 每两个月，TC39都会举行会议，由成员指定的代表和受邀专家参加。这些会议的记录是公开的，存储在[GitHub存储库](https://github.com/tc39/tc39-notes/)中。
- en: 3.5 The TC39 process
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.5 TC39流程
- en: 'With ECMAScript 6, two issues with the release process used at that time became
    obvious:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 随着ECMAScript 6，当时使用的发布流程出现了两个问题：
- en: If too much time passes between releases then features that are ready early,
    have to wait a long time until they can be released. And features that are ready
    late, risk being rushed to make the deadline.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果发布之间的时间太长，那么早期准备好的功能就必须等待很长时间才能发布。而准备晚的功能则面临着为了赶上截止日期而被匆忙发布的风险。
- en: Features were often designed long before they were implemented and used. Design
    deficiencies related to implementation and use were therefore discovered too late.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能通常是在实现和使用之前设计的。因此，与实现和使用相关的设计缺陷通常太晚才被发现。
- en: 'In response to these issues, TC39 instituted the new *TC39 process*:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些问题，TC39制定了新的*TC39流程*：
- en: ECMAScript features are designed independently and go through stages, starting
    at 0 (“strawman”), ending at 4 (“finished”).
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECMAScript功能是独立设计的，并经历从0（“草案”）到4（“完成”）的阶段。
- en: Especially the later stages require prototype implementations and real-world
    testing, leading to feedback loops between designs and implementations.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特别是后期阶段需要原型实现和实际测试，从而在设计和实现之间形成反馈循环。
- en: ECMAScript versions are released once per year and include all features that
    have reached stage 4 prior to a release deadline.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECMAScript版本每年发布一次，并包括在发布截止日期之前达到第4阶段的所有功能。
- en: 'The result: smaller, incremental releases, whose features have already been
    field-tested. Fig. [1](#fig:tc39-process-stages) illustrates the TC39 process.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：更小的、增量式的发布，其功能已经经过了现场测试。图[1](#fig:tc39-process-stages)说明了TC39的流程。
- en: '![Figure 1: Each ECMAScript feature proposal goes through stages that are numbered
    from 0 to 4\. Champions are TC39 members that support the authors of a feature.
    Test 262 is a suite of tests that checks JavaScript engines for compliance with
    the language specification.](../Images/eada37ac5c0c14718840a0024395b1e5.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图1：每个ECMAScript功能提案都经历了从0到4的阶段。冠军是支持功能作者的TC39成员。Test 262是一套测试，用于检查JavaScript引擎是否符合语言规范。](../Images/eada37ac5c0c14718840a0024395b1e5.png)'
- en: 'Figure 1: Each ECMAScript feature proposal goes through stages that are numbered
    from 0 to 4\. *Champions* are TC39 members that support the authors of a feature.
    Test 262 is a suite of tests that checks JavaScript engines for compliance with
    the language specification.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：每个ECMAScript功能提案都经历了从0到4的阶段。*冠军*是支持功能作者的TC39成员。Test 262是一套测试，用于检查JavaScript引擎是否符合语言规范。
- en: ES2016 was the first ECMAScript version that was designed according to the TC39
    process.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: ES2016是第一个根据TC39流程设计的ECMAScript版本。
- en: '3.5.1 Tip: Think in individual features and stages, not ECMAScript versions'
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 3.5.1 提示：以单独的功能和阶段为思考对象，而不是ECMAScript版本
- en: Up to and including ES6, it was most common to think about JavaScript in terms
    of ECMAScript versions – for example, “Does this browser support ES6 yet?”
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 直到ES6为止，最常见的是根据ECMAScript版本来思考JavaScript - 例如，“这个浏览器支持ES6吗？”
- en: 'Starting with ES2016, it’s better to think in individual features: once a feature
    reaches stage 4, you can safely use it (if it’s supported by the JavaScript engines
    you are targeting). You don’t have to wait until the next ECMAScript release.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从ES2016开始，最好是考虑单独的功能：一旦一个功能达到第4阶段，你就可以安全地使用它（如果它受到你所针对的JavaScript引擎的支持）。你不必等到下一个ECMAScript发布版本。
- en: '3.6 FAQ: TC39 process'
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.6 常见问题：TC39流程
- en: 3.6.1 How is [my favorite proposed feature] doing?
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 3.6.1 我最喜欢的提议功能进展如何？
- en: If you are wondering what stages various proposed features are in, consult [the
    GitHub repository `proposals`](https://github.com/tc39/proposals).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道各种提议功能处于哪个阶段，请查阅[GitHub存储库`proposals`](https://github.com/tc39/proposals)。
- en: 3.6.2 Is there an official list of ECMAScript features?
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 3.6.2 是否有一个官方的ECMAScript功能列表？
- en: Yes, the TC39 repo lists [finished proposals](https://github.com/tc39/proposals/blob/master/finished-proposals.md)
    and mentions in which ECMAScript versions they were introduced.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，TC39存储库列出了[已完成的提案](https://github.com/tc39/proposals/blob/master/finished-proposals.md)，并提到它们是在哪个ECMAScript版本中引入的。
- en: '3.7 Evolving JavaScript: Don’t break the web'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.7 JavaScript的发展：不要破坏网络
- en: One idea that occasionally comes up is to clean up JavaScript by removing old
    features and quirks. While the appeal of that idea is obvious, it has significant
    downsides.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有时会提出一个想法，即通过删除旧功能和怪癖来清理JavaScript。虽然这个想法的吸引力是显而易见的，但它有重大的缺点。
- en: 'Let’s assume we create a new version of JavaScript that is not backward compatible
    and fix all of its flaws. As a result, we’d encounter the following problems:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们创建了一个不向后兼容并修复了所有缺陷的JavaScript的新版本。结果，我们会遇到以下问题：
- en: 'JavaScript engines become bloated: they need to support both the old and the
    new version. The same is true for tools such as IDEs and build tools.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript引擎变得臃肿：它们需要支持旧版本和新版本。对于IDE和构建工具也是如此。
- en: Programmers need to know, and be continually conscious of, the differences between
    the versions.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序员需要了解，并不断意识到，不同版本之间的差异。
- en: You can either migrate all of an existing code base to the new version (which
    can be a lot of work). Or you can mix versions and refactoring becomes harder
    because you can’t move code between versions without changing it.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以选择将现有的全部代码迁移到新版本（这可能是很多工作）。或者你可以混合使用版本，重构变得更加困难，因为你不能在不改变代码的情况下在不同版本之间移动代码。
- en: 'You somehow have to specify per piece of code – be it a file or code embedded
    in a web page – what version it is written in. Every conceivable solution has
    pros and cons. For example, [*strict mode*](ch_syntax.html#strict-mode) is a slightly
    cleaner version of ES5\. One of the reasons why it wasn’t as popular as it should
    have been: it was a hassle to opt in via a directive at the beginning of a file
    or a function.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你必须以某种方式指定每一段代码的版本 - 无论是文件还是嵌入在网页中的代码 - 它是用哪个版本编写的。每种可行的解决方案都有利有弊。例如，[*严格模式*](ch_syntax.html#strict-mode)是ES5的一个稍微更清洁的版本。它之所以没有像应该的那样受欢迎的一个原因是：通过在文件或函数开头的指令中选择进入是一件麻烦事。
- en: 'So what is the solution? Can we have our cake and eat it? The approach that
    was chosen for ES6 is called “One JavaScript”:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 那么解决方案是什么？我们可以两全其美吗？ES6选择的方法称为“一种JavaScript”：
- en: New versions are always completely backward compatible (but there may occasionally
    be minor, hardly noticeable clean-ups).
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新版本始终完全向后兼容（但偶尔可能会有一些微小的、几乎察觉不到的清理）。
- en: Old features aren’t removed or fixed. Instead, better versions of them are introduced.
    One example is declaring variables via `let` – which is an improved version of
    `var`.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旧功能不会被移除或修复。相反，它们的更好版本被引入。一个例子是通过`let`声明变量 - 这是`var`的改进版本。
- en: If aspects of the language are changed, it is done inside new syntactic constructs.
    That is, you opt in implicitly. For example, `yield` is only a keyword inside
    generators (which were introduced in ES6). And all code inside modules and classes
    (both introduced in ES6) is implicitly in strict mode.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果语言的某些方面发生了变化，那是在新的语法结构内完成的。也就是说，你是隐式选择进入的。例如，`yield`只是ES6中生成器内的关键字。并且所有模块和类中的代码（都是在ES6中引入的）都隐式地处于严格模式。
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **测验**'
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[测验应用](ch_quizzes-exercises.html#quizzes)。
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/23)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/impatient-js/issues/23)'
