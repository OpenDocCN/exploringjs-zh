- en: 30 Synchronous iteration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://exploringjs.com/impatient-js/ch_sync-iteration.html](https://exploringjs.com/impatient-js/ch_sync-iteration.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 30.1 [What is synchronous iteration about?](ch_sync-iteration.html#what-is-synchronous-iteration-about)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '30.2 [Core iteration constructs: iterables and iterators](ch_sync-iteration.html#iterable-iterator-iteratorresult)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 30.3 [Iterating manually](ch_sync-iteration.html#iterating-manually)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 30.3.1 [Iterating over an iterable via `while`](ch_sync-iteration.html#iterating-over-an-iterable-via-while)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 30.4 [Iteration in practice](ch_sync-iteration.html#iteration-in-practice)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 30.4.1 [Iterating over Arrays](ch_sync-iteration.html#iterating-over-arrays)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 30.4.2 [Iterating over Sets](ch_sync-iteration.html#iterating-over-sets)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '30.5 [Quick reference: synchronous iteration](ch_sync-iteration.html#quick-reference-synchronous-iteration)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 30.5.1 [Iterable data sources](ch_sync-iteration.html#iterable-data-sources)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 30.5.2 [Synchronously iterating language constructs](ch_sync-iteration.html#sync-iterating-constructs)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 30.1 What is synchronous iteration about?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Synchronous iteration is a *protocol* (interfaces plus rules for using them)
    that connects two groups of entities in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data sources:** On one hand, data comes in all shapes and sizes. In JavaScript’s
    standard library, you have the linear data structure Array, the ordered collection
    Set (elements are ordered by time of addition), the ordered dictionary Map (entries
    are ordered by time of addition), and more. In libraries, you may find tree-shaped
    data structures and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data consumers:** On the other hand, you have a whole class of constructs
    and algorithms that only need to access their input *sequentially*: one value
    at a time, until all values were visited. Examples include the `for-of` loop and
    spreading into function calls (via `...`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The iteration protocol connects these two groups via the interface `Iterable`:
    data sources deliver their contents sequentially “through it”; data consumers
    get their input via it.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18: Data consumers such as the for-of loop use the interface Iterable.
    Data sources such as Arrays implement that interface.](../Images/04fc345e457a6c010f8b61f6ba201e81.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18: Data consumers such as the `for-of` loop use the interface `Iterable`.
    Data sources such as `Arrays` implement that interface.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fig. [18](#fig:iterable-implementers-clients) illustrates how iteration works:
    data consumers use the interface `Iterable`; data sources implement it.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b666ba365e94edaf0ef510fd7e12c7de.png)  **The JavaScript way of
    implementing interfaces**'
  prefs: []
  type: TYPE_NORMAL
- en: In JavaScript, an object *implements* an interface if it has all the methods
    that it describes. The interfaces mentioned in this chapter only exist in the
    ECMAScript specification.
  prefs: []
  type: TYPE_NORMAL
- en: 'Both sources and consumers of data profit from this arrangement:'
  prefs: []
  type: TYPE_NORMAL
- en: If you develop a new data structure, you only need to implement `Iterable` and
    a raft of tools can immediately be applied to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you write code that uses iteration, it automatically works with many sources
    of data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '30.2 Core iteration constructs: iterables and iterators'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Two roles (described by interfaces) form the core of iteration (fig. [19](#fig:iteration-protocol)):'
  prefs: []
  type: TYPE_NORMAL
- en: An *iterable* is an object whose contents can be traversed sequentially.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An *iterator* is the pointer used for the traversal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 19: Iteration has two main interfaces: Iterable and Iterator. The
    former has a method that returns the latter.](../Images/d4254788bb2bb7f5a88144606f3d4d28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19: Iteration has two main interfaces: `Iterable` and `Iterator`. The
    former has a method that returns the latter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These are type definitions (in TypeScript’s notation) for the interfaces of
    the iteration protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The interfaces are used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You ask an `Iterable` for an iterator via the method whose key is `Symbol.iterator`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Iterator` returns the iterated values via its method `.next()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The values are not returned directly, but wrapped in objects with two properties:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.value` is the iterated value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.done` indicates if the end of the iteration has been reached yet. It is `true`
    after the last iterated value and `false` beforehand.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 30.3 Iterating manually
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is an example of using the iteration protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 30.3.1 Iterating over an iterable via `while`
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following code demonstrates how to use a `while` loop to iterate over an
    iterable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Exercise: Using sync
    iteration manually**'
  prefs: []
  type: TYPE_NORMAL
- en: '`exercises/sync-iteration-use/sync_iteration_manually_exrc.mjs`'
  prefs: []
  type: TYPE_NORMAL
- en: 30.4 Iteration in practice
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have seen how to use the iteration protocol manually, and it is relatively
    cumbersome. But the protocol is not meant to be used directly – it is meant to
    be used via higher-level language constructs built on top of it. This section
    shows what that looks like.
  prefs: []
  type: TYPE_NORMAL
- en: 30.4.1 Iterating over Arrays
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'JavaScript’s Arrays are iterable. That enables us to use the `for-of` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Destructuring via Array patterns (explained later) also uses iteration under
    the hood:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 30.4.2 Iterating over Sets
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'JavaScript’s Set data structure is iterable. That means `for-of` works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As does Array-destructuring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '30.5 Quick reference: synchronous iteration'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 30.5.1 Iterable data sources
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following built-in data sources are iterable:'
  prefs: []
  type: TYPE_NORMAL
- en: Arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '(Browsers: DOM data structures)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To iterate over the properties of objects, you need helpers such as `Object.keys()`
    and `Object.entries()`. That is necessary because properties exist at a different
    level that is independent of the level of data structures.
  prefs: []
  type: TYPE_NORMAL
- en: 30.5.2 Synchronously iterating language constructs
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This section lists constructs that use synchronous iteration.
  prefs: []
  type: TYPE_NORMAL
- en: 30.5.2.1 Language constructs that iterate
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Destructuring via an Array pattern:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Spreading (via `...`) into function calls and Array literals:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `for-of` loop:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`yield*`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 30.5.2.2 Turning iterables into data structures
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[`Object.fromEntries()`](ch_objects.html#Object.fromEntries):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[`Array.from()`](ch_arrays.html#Array.from):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[`new Map()`](ch_maps.html) and [`new WeakMap()`](ch_weakmaps.html):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[`new Set()`](ch_sets.html) and [`new WeakSet()`](ch_weaksets.html):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 30.5.2.3 Miscellaneous
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[Promise combinator functions](ch_promises.html#promise-combinators): `Promise.all()`
    etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz**'
  prefs: []
  type: TYPE_NORMAL
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  prefs: []
  type: TYPE_NORMAL
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/21)'
  prefs: []
  type: TYPE_NORMAL
