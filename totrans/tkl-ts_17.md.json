["```ts\ninterface InputStream {\n getNextLine(): string;\n}\n```", "```ts\ntype StreamValue = null | string;\n\ninterface InputStream {\n getNextLine(): StreamValue;\n}\n```", "```ts\nfunction countComments(is: InputStream) {\n let commentCount = 0;\n while (true) {\n const line = is.getNextLine();\n // @ts-expect-error: Object is possibly 'null'.(2531)\n if (line.startsWith('#')) { // (A)\n commentCount++;\n }\n if (line === null) break;\n }\n return commentCount;\n}\n```", "```ts\nfunction countComments(is: InputStream) {\n let commentCount = 0;\n while (true) {\n const line = is.getNextLine();\n if (line === null) break;\n if (line.startsWith('#')) { // (A)\n commentCount++;\n }\n }\n return commentCount;\n}\n```", "```ts\nconst EOF = Symbol('EOF');\ntype StreamValue = typeof EOF | string;\n```", "```ts\ninterface InputStream<T> {\n getNextValue(): T;\n}\n```", "```ts\ninterface NormalValue<T> {\n type: 'normal'; // string literal type\n data: T;\n}\ninterface Eof {\n type: 'eof'; // string literal type\n}\ntype InputStreamValue<T> = Eof | NormalValue<T>;\n\ninterface InputStream<T> {\n getNextValue(): InputStreamValue<T>;\n}\n```", "```ts\nfunction countValues<T>(is: InputStream<T>, data: T) {\n let valueCount = 0;\n while (true) {\n // %inferred-type: Eof | NormalValue<T>\n const value = is.getNextValue(); // (A)\n\n if (value.type === 'eof') break;\n\n // %inferred-type: NormalValue<T>\n value; // (B)\n\n if (value.data === data) { // (C)\n valueCount++;\n }\n }\n return valueCount;\n}\n```", "```ts\ninterface IteratorYieldResult<TYield> {\n done?: false; // boolean literal type\n value: TYield;\n}\n\ninterface IteratorReturnResult<TReturn> {\n done: true; // boolean literal type\n value: TReturn;\n}\n\ntype IteratorResult<T, TReturn = any> =\n | IteratorYieldResult<T>\n | IteratorReturnResult<TReturn>;\n```", "```ts\ninterface A {\n one: number;\n two: number;\n}\ninterface B {\n three: number;\n four: number;\n}\ntype Union = A | B;\n\nfunction func(x: Union) {\n // @ts-expect-error: Property 'two' does not exist on type 'Union'.\n // Property 'two' does not exist on type 'B'.(2339)\n console.log(x.two); // error\n\n if ('one' in x) { // discriminating check\n console.log(x.two); // OK\n }\n}\n```", "```ts\ntype Union = [string] | number;\n\nfunction logHexValue(x: Union) {\n if (Array.isArray(x)) { // discriminating check\n console.log(x[0]); // OK\n } else {\n console.log(x.toString(16)); // OK\n }\n}\n```"]