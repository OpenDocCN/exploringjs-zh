- en: '9 Property attributes: an introduction'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://exploringjs.com/deep-js/ch_property-attributes-intro.html](https://exploringjs.com/deep-js/ch_property-attributes-intro.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 9.1 [The structure of objects](ch_property-attributes-intro.html#the-structure-of-objects)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.1.1 [Internal slots](ch_property-attributes-intro.html#internal-slots)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.1.2 [Property keys](ch_property-attributes-intro.html#property-keys)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.1.3 [Property attributes](ch_property-attributes-intro.html#property-attributes)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.2 [Property descriptors](ch_property-attributes-intro.html#property-descriptors)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.3 [Retrieving descriptors for properties](ch_property-attributes-intro.html#retrieving-descriptors-for-properties)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '9.3.1 [`Object.getOwnPropertyDescriptor()`: retrieving a descriptor for a single
    property](ch_property-attributes-intro.html#object.getownpropertydescriptor-retrieving-a-descriptor-for-a-single-property)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '9.3.2 [`Object.getOwnPropertyDescriptors()`: retrieving descriptors for all
    properties of an object](ch_property-attributes-intro.html#object.getownpropertydescriptors-retrieving-descriptors-for-all-properties-of-an-object)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.4 [Defining properties via descriptors](ch_property-attributes-intro.html#defining-properties-via-descriptors)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '9.4.1 [`Object.defineProperty()`: defining single properties via descriptors](ch_property-attributes-intro.html#object.defineproperty-defining-single-properties-via-descriptors)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '9.4.2 [`Object.defineProperties()`: defining multiple properties via descriptors](ch_property-attributes-intro.html#object.defineproperties-defining-multiple-properties-via-descriptors)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '9.5 [`Object.create()`: Creating objects via descriptors](ch_property-attributes-intro.html#object.create-creating-objects-via-descriptors)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.6 [Use cases for `Object.getOwnPropertyDescriptors()`](ch_property-attributes-intro.html#use-cases-for-object.getownpropertydescriptors)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '9.6.1 [Use case: copying properties into an object](ch_property-attributes-intro.html#use-case-copying-properties-into-an-object)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '9.6.2 [Use case for `Object.getOwnPropertyDescriptors()`: cloning objects](ch_property-attributes-intro.html#use-case-for-object.getownpropertydescriptors-cloning-objects)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.7 [Omitting descriptor properties](ch_property-attributes-intro.html#omitting-descriptor-properties)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.7.1 [Omitting descriptor properties when creating properties](ch_property-attributes-intro.html#omitting-descriptor-properties-when-creating-properties)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.7.2 [Omitting descriptor properties when changing properties](ch_property-attributes-intro.html#omitting-descriptor-properties-when-changing-properties)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.8 [What property attributes do built-in constructs use?](ch_property-attributes-intro.html#what-property-attributes-do-built-in-constructs-use)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.8.1 [Own properties created via assignment](ch_property-attributes-intro.html#own-properties-created-via-assignment)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.8.2 [Own properties created via object literals](ch_property-attributes-intro.html#own-properties-created-via-object-literals)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.8.3 [The own property `.length` of Arrays](ch_property-attributes-intro.html#the-own-property-.length-of-arrays)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.8.4 [Prototype properties of built-in classes](ch_property-attributes-intro.html#prototype-properties-of-built-in-classes)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.8.5 [Prototype properties and instance properties of user-defined classes](ch_property-attributes-intro.html#prototype-properties-and-instance-properties-of-user-defined-classes)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '9.9 [API: property descriptors](ch_property-attributes-intro.html#api-property-descriptors)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.10 [Further reading](ch_property-attributes-intro.html#further-reading-1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we take a closer look at how the ECMAScript specification sees
    JavaScript objects. In particular, properties are not atomic in the spec, but
    composed of multiple *attributes* (think fields in a record). Even the value of
    a data property is stored in an attribute!
  prefs: []
  type: TYPE_NORMAL
- en: 9.1 The structure of objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[In the ECMAScript specification](https://tc39.es/ecma262/#sec-object-type),
    an object consists of:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Internal slots*, which are storage locations that are not accessible from
    JavaScript, only from operations in the specification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A collection of *properties*. Each property associates a *key* with *attributes*
    (think fields in a record).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.1.1 Internal slots
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[The specification](https://tc39.es/ecma262/#sec-object-internal-methods-and-internal-slots)
    describes internal slots as follows. I added bullet points and emphasized one
    part:'
  prefs: []
  type: TYPE_NORMAL
- en: Internal slots correspond to internal state that is associated with objects
    and used by various ECMAScript specification algorithms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internal slots are not object properties and they are not inherited.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Depending upon the specific internal slot specification, such state may consist
    of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: values of any ECMAScript language type or
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: of specific ECMAScript specification type values.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Unless explicitly specified otherwise, internal slots are allocated as part
    of the process of creating an object and may not be dynamically added to an object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unless specified otherwise, the initial value of an internal slot is the value
    `undefined`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various algorithms within this specification create objects that have internal
    slots. However, **the ECMAScript language provides no direct way to associate
    internal slots with an object**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internal methods and internal slots are identified within this specification
    using names enclosed in double square brackets `[[ ]]`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are two kinds of internal slots:'
  prefs: []
  type: TYPE_NORMAL
- en: Method slots for manipulating objects (getting properties, setting properties,
    etc.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data slots that store values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ordinary objects have the following data slots:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.[[Prototype]]: null | object`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stores the prototype of an object.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can be accessed indirectly via `Object.getPrototypeOf()` and `Object.setPrototypeOf()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.[[Extensible]]: boolean`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indicates if it is possible to add properties to an object.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can be set to `false` via `Object.preventExtensions()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.[[PrivateFieldValues]]: EntryList`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is used to manage [private class fields](https://2ality.com/2019/07/private-class-fields.html).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.1.2 Property keys
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The key of a property is either:'
  prefs: []
  type: TYPE_NORMAL
- en: A string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A symbol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.1.3 Property attributes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are two kinds of properties and they are characterized by their attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: A *data property* stores data. Its attribute `value` holds any JavaScript value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An *accessor property* consists of a getter function and/or a setter function.
    The former is stored in the attribute `get`, the latter in the attribute `set`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, there are attributes that both kinds of properties have. The following
    table lists all attributes and their default values.
  prefs: []
  type: TYPE_NORMAL
- en: '| Kind of property | Name and type of attribute | Default value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Data property | `value: any` | `undefined` |'
  prefs: []
  type: TYPE_TB
- en: '|  | `writable: boolean` | `false` |'
  prefs: []
  type: TYPE_TB
- en: '| Accessor property | `get: (this: any) => any` | `undefined` |'
  prefs: []
  type: TYPE_TB
- en: '|  | `set: (this: any, v: any) => void` | `undefined` |'
  prefs: []
  type: TYPE_TB
- en: '| All properties | `configurable: boolean` | `false` |'
  prefs: []
  type: TYPE_TB
- en: '|  | `enumerable: boolean` | `false` |'
  prefs: []
  type: TYPE_TB
- en: 'We have already encountered the attributes `value`, `get`, and `set`. The other
    attributes work as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`writable` determines if the value of a data property can be changed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`configurable` determines if the attributes of a property can be changed. If
    it is `false`, then:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We cannot delete the property.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We cannot change a property from a data property to an accessor property or
    vice versa.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We cannot change any attribute other than `value`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, one more attribute change is allowed: We can change `writable` from
    `true` to `false`. The rationale behind this anomaly is [historical](https://stackoverflow.com/questions/9829817/why-can-i-set-enumerability-and-writability-of-unconfigurable-property-descrip/9843191#9843191):
    Property `.length` of Arrays has always been writable and non-configurable. Allowing
    its `writable` attribute to be changed enables us to freeze Arrays.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enumerable` influences some operations (such as `Object.keys()`). If it is
    `false`, then those operations ignore the property. Most properties are enumerable
    (e.g. those created via assignment or object literals), which is why you’ll rarely
    notice this attribute in practice. If you are still interested in how it works,
    see [§12 “Enumerability of properties”](ch_enumerability.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '9.1.3.1 Pitfall: Inherited non-writable properties prevent creating own properties
    via assignment'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'If an inherited property is non-writable, we can’t use assignment to create
    an own property with the same key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For more information, see [§11.3.4 “Inherited read-only properties prevent creating
    own properties via assignment”](ch_property-assignment-vs-definition.html#inherited-properties-prevent-assignment).
  prefs: []
  type: TYPE_NORMAL
- en: 9.2 Property descriptors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *property descriptor* encodes the attributes of a property as a JavaScript
    object. Their TypeScript interfaces look as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The question marks indicate that all properties are optional. [§9.7 “Omitting
    descriptor properties”](ch_property-attributes-intro.html#omitting-descriptor-properties)
    describes what happens if they are omitted.
  prefs: []
  type: TYPE_NORMAL
- en: 9.3 Retrieving descriptors for properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '9.3.1 `Object.getOwnPropertyDescriptor()`: retrieving a descriptor for a single
    property'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Consider the following object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s first get a descriptor for the data property `.color`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what the descriptor for the accessor property `.description` looks
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Using the utility function `desc()` in line A ensures that `.deepEqual()` works.
  prefs: []
  type: TYPE_NORMAL
- en: '9.3.2 `Object.getOwnPropertyDescriptors()`: retrieving descriptors for all
    properties of an object'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using the helper function `desc()` in line A ensures that `.deepEqual()` works.
  prefs: []
  type: TYPE_NORMAL
- en: 9.4 Defining properties via descriptors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we define a property with the key `k` via a property descriptor `propDesc`,
    then what happens depends:'
  prefs: []
  type: TYPE_NORMAL
- en: If there is no property with key `k`, a new own property is created that has
    the attributes specified by `propDesc`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there is a property with key `k`, defining changes the property’s attributes
    so that they match `propDesc`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '9.4.1 `Object.defineProperty()`: defining single properties via descriptors'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'First, let us create a new property via a descriptor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we change the kind of a property via a descriptor; we turn a data property
    into a getter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we change the value of a data property via a descriptor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We have used the same property attributes as assignment.
  prefs: []
  type: TYPE_NORMAL
- en: '9.4.2 `Object.defineProperties()`: defining multiple properties via descriptors'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Object.defineProperties()` is the multi-property version of ``Object.defineProperty()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '9.5 `Object.create()`: Creating objects via descriptors'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Object.create()` creates a new object. Its first argument specifies the prototype
    of that object. Its optional second argument specifies descriptors for the properties
    of that object. In the next example, we create the same object as in the previous
    example.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 9.6 Use cases for `Object.getOwnPropertyDescriptors()`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Object.getOwnPropertyDescriptors()` helps us with two use cases, if we combine
    it with `Object.defineProperties()` or `Object.create()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '9.6.1 Use case: copying properties into an object'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Since ES6, JavaScript already has had a tool method for copying properties:
    `Object.assign()`. However, this method uses simple get and set operations to
    copy a property whose key is `key`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'That means that it only creates a faithful copy of a property if:'
  prefs: []
  type: TYPE_NORMAL
- en: Its attribute `writable` is `true` and its attribute `enumerable` is `true`
    (because that’s how assignment creates properties).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a data property.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following example illustrates this limitation. Object `source` has a setter
    whose key is `data`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If we use `Object.assign()` to copy property `data`, then the accessor property
    `data` is converted to a data property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Fortunately, using `Object.getOwnPropertyDescriptors()` together with `Object.defineProperties()`
    does faithfully copy the property `data`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '9.6.1.1 Pitfall: copying methods that use `super`'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: A method that uses `super` is firmly connected with its *home object* (the object
    it is stored in). There is currently no way to copy or move such a method to a
    different object.
  prefs: []
  type: TYPE_NORMAL
- en: '9.6.2 Use case for `Object.getOwnPropertyDescriptors()`: cloning objects'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Shallow cloning is similar to copying properties, which is why `Object.getOwnPropertyDescriptors()`
    is a good choice here, too.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the clone, we use `Object.create()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: For more information on this topic, see [§6 “Copying objects and Arrays”](ch_copying-objects-and-arrays.html).
  prefs: []
  type: TYPE_NORMAL
- en: 9.7 Omitting descriptor properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All properties of descriptors are optional. What happens when you omit a property
    depends on the operation.
  prefs: []
  type: TYPE_NORMAL
- en: 9.7.1 Omitting descriptor properties when creating properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When we create a new property via a descriptor, then omitting attributes means
    that their default values are used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 9.7.2 Omitting descriptor properties when changing properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If instead, we change an existing property, then omitting descriptor properties
    means that the corresponding attributes are not touched:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 9.8 What property attributes do built-in constructs use?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The general rule (with few exceptions) for property attributes is:'
  prefs: []
  type: TYPE_NORMAL
- en: Properties of objects at the beginning of a prototype chain are usually writable,
    enumerable, and configurable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As described in [the chapter on enumerability](ch_enumerability.html), most
    inherited properties are non-enumerable, to hide them from legacy constructs such
    as `for-in` loops. Inherited properties are usually writable and configurable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.8.1 Own properties created via assignment
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 9.8.2 Own properties created via object literals
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 9.8.3 The own property `.length` of Arrays
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The own property `.length` of Arrays is non-enumerable, so that it isn’t copied
    by `Object.assign()`, spreading, and similar operations. It is also non-configurable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '`.length` is a special data property, in that it is influenced by (and influences)
    other own properties (specifically, index properties).'
  prefs: []
  type: TYPE_NORMAL
- en: 9.8.4 Prototype properties of built-in classes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 9.8.5 Prototype properties and instance properties of user-defined classes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that all own properties of instances of `DataContainer` are writable,
    enumerable, and configurable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '9.9 API: property descriptors'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following tool methods use property descriptors:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Object.defineProperty(obj: object, key: string|symbol, propDesc: PropertyDescriptor):
    object` ^([ES5])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates or changes a property on `obj` whose key is `key` and whose attributes
    are specified via `propDesc`. Returns the modified object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Object.defineProperties(obj: object, properties: {[k: string|symbol]: PropertyDescriptor}):
    object` ^([ES5])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The batch version of `Object.defineProperty()`. Each property `p` of the object
    `properties` specifies one property that is to be added to `obj`: The key of `p`
    specifies the key of the property, the value of `p` is a descriptor that specifies
    the attributes of the property.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Object.create(proto: null|object, properties?: {[k: string|symbol]: PropertyDescriptor}):
    object` ^([ES5])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, creates an object whose prototype is `proto`. Then, if the optional
    parameter `properties` has been provided, adds properties to it – in the same
    manner as `Object.defineProperties()`. Finally, returns the result. For example,
    the following code snippet produces the same result as the previous snippet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Object.getOwnPropertyDescriptor(obj: object, key: string|symbol): undefined|PropertyDescriptor`
    ^([ES5])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns the descriptor of the own (non-inherited) property of `obj` whose key
    is `key`. If there is no such property, `undefined` is returned.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Object.getOwnPropertyDescriptors(obj: object): {[k: string|symbol]: PropertyDescriptor}`
    ^([ES2017])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns an object where each property key `'k'` of `obj` is mapped to the property
    descriptor for `obj.k`. The result can be used as input for `Object.defineProperties()`
    and `Object.create()`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using `desc()` in line A is a work-around so that `.deepEqual()` works.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 9.10 Further reading
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next three chapters provide more details on property attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[§10 “Protecting objects from being changed”](ch_protecting-objects.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[§11 “Properties: assignment vs. definition”](ch_property-assignment-vs-definition.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[§12 “Enumerability of properties”](ch_enumerability.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Comments](https://github.com/rauschma/deep-js/issues/9)'
  prefs: []
  type: TYPE_NORMAL
