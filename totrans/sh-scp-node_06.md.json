["```js\n    console.log('Hello!');\n\n    import {log} from 'node:console';\n    log('Hello!');\n    ```", "```js\n    console.log(process.argv);\n\n    import {argv} from 'node:process';\n    console.log(process.argv);\n    ```", "```js\n    import * as assert from 'node:assert/strict';\n    assert.equal(3 + 4, 7);\n    assert.equal('abc'.toUpperCase(), 'ABC');\n\n    assert.deepEqual({prop: true}, {prop: true}); // deep comparison\n    assert.notEqual({prop: true}, {prop: true}); // shallow comparison\n    ```", "```js\nimport * as assert from 'node:assert/strict';\nimport {builtinModules} from 'node:module';\n// Remove internal modules (whose names start with underscores)\nconst modules = builtinModules.filter(m => !m.startsWith('_'));\nmodules.sort();\nassert.deepEqual(\n modules.slice(0, 5),\n [\n 'assert',\n 'assert/strict',\n 'async_hooks',\n 'buffer',\n 'child_process',\n ]\n);\n```", "```js\nimport * as fs from 'node:fs';\n```", "```js\ntry {\n const result = fs.readFileSync('/etc/passwd', {encoding: 'utf-8'});\n console.log(result);\n} catch (err) {\n console.error(err);\n}\n```", "```js\nimport * as fsPromises from 'node:fs/promises'; // (A)\n\ntry {\n const result = await fsPromises.readFile(\n '/etc/passwd', {encoding: 'utf-8'});\n console.log(result);\n} catch (err) {\n console.error(err);\n}\n```", "```js\nfs.readFile('/etc/passwd', {encoding: 'utf-8'},\n (err, result) => {\n if (err) {\n console.error(err);\n return;\n }\n console.log(result);\n }\n);\n```", "```js\nwhile (true) { // event loop\n const task = taskQueue.dequeue(); // blocks\n task();\n}\n```", "```js\nimport * as fs from 'node:fs';\n\nfunction handleResult(err, result) {\n if (err) {\n console.error(err);\n return;\n }\n console.log(result); // (A)\n}\nfs.readFile('reminder.txt', 'utf-8',\n handleResult\n);\nconsole.log('AFTER'); // (B)\n```", "```js\nAFTER\nDon\u2019t forget!\n```", "```js\n() => handleResult(null, 'Don\u2019t forget!')\n```", "```js\n// server.mjs\nimport * as http from 'node:http';\n\nlet requestCount = 1;\nconst server = http.createServer(\n (_req, res) => { // (A)\n res.writeHead(200);\n res.end('This is request number ' + requestCount); // (B)\n requestCount++; // (C)\n }\n);\nserver.listen(8080);\n```", "```js\nfunction enqueueTasks() {\n Promise.resolve().then(() => console.log('Promise reaction 1'));\n queueMicrotask(() => console.log('queueMicrotask 1'));\n process.nextTick(() => console.log('nextTick 1'));\n setImmediate(() => console.log('setImmediate 1')); // (A)\n setTimeout(() => console.log('setTimeout 1'), 0);\n\n Promise.resolve().then(() => console.log('Promise reaction 2'));\n queueMicrotask(() => console.log('queueMicrotask 2'));\n process.nextTick(() => console.log('nextTick 2'));\n setImmediate(() => console.log('setImmediate 2')); // (B)\n setTimeout(() => console.log('setTimeout 2'), 0);\n}\n\nsetImmediate(enqueueTasks);\n```", "```js\nnextTick 1\nnextTick 2\nPromise reaction 1\nqueueMicrotask 1\nPromise reaction 2\nqueueMicrotask 2\nsetTimeout 1\nsetTimeout 2\nsetImmediate 1\nsetImmediate 2\n```", "```js\nsetImmediate(() => {\n setImmediate(() => console.log('setImmediate 1'));\n setTimeout(() => console.log('setTimeout 1'), 0);\n\n process.nextTick(() => {\n console.log('nextTick 1');\n process.nextTick(() => console.log('nextTick 2'));\n });\n\n queueMicrotask(() => {\n console.log('queueMicrotask 1');\n queueMicrotask(() => console.log('queueMicrotask 2'));\n process.nextTick(() => console.log('nextTick 3'));\n });\n});\n```", "```js\nnextTick 1\nnextTick 2\nqueueMicrotask 1\nqueueMicrotask 2\nnextTick 3\nsetTimeout 1\nsetImmediate 1\n```", "```js\nimport * as fs from 'node:fs/promises';\n\nfunction timers() { // OK\n setTimeout(() => timers(), 0);\n}\nfunction immediate() { // OK\n setImmediate(() => immediate());\n}\n\nfunction nextTick() { // starves I/O\n process.nextTick(() => nextTick());\n}\n\nfunction microtasks() { // starves I/O\n queueMicrotask(() => microtasks());\n}\n\ntimers();\nconsole.log('AFTER'); // always logged\nconsole.log(await fs.readFile('./file.txt', 'utf-8'));\n```", "```js\nfunction timeout(ms) {\n return new Promise(\n (resolve, _reject) => {\n setTimeout(resolve, ms); // (A)\n }\n );\n}\nawait timeout(3_000);\n```", "```js\nfunction foreverPending() {\n return new Promise(\n (_resolve, _reject) => {}\n );\n}\nawait foreverPending(); // (A)\n```"]