["```js\nclass DataContainer {\n #data; // (A)\n constructor() {\n Promise.resolve('downloaded')\n .then(data => this.#data = data); // (B)\n }\n getData() {\n return 'DATA: '+this.#data; // (C)\n }\n}\n```", "```js\nconst dc = new DataContainer();\nassert.equal(dc.getData(), 'DATA: undefined');\nsetTimeout(() => assert.equal(\n dc.getData(), 'DATA: downloaded'), 0);\n```", "```js\nclass DataContainer {\n #data;\n constructor() {\n return Promise.resolve('downloaded')\n .then(data => {\n this.#data = data;\n return this; // (A)\n });\n }\n getData() {\n return 'DATA: '+this.#data;\n }\n}\nnew DataContainer()\n .then(dc => assert.equal( // (B)\n dc.getData(), 'DATA: downloaded'));\n```", "```js\nconstructor() {\n return (async () => {\n this.#data = await Promise.resolve('downloaded');\n return this;\n })();\n}\n```", "```js\nclass DataContainer {\n #data;\n static async create() {\n const data = await Promise.resolve('downloaded');\n return new this(data);\n }\n constructor(data) {\n this.#data = data;\n }\n getData() {\n return 'DATA: '+this.#data;\n }\n}\nDataContainer.create()\n .then(dc => assert.equal(\n dc.getData(), 'DATA: downloaded'));\n```", "```js\nconst secretToken = Symbol('secretToken');\nclass DataContainer {\n #data;\n static async create() {\n const data = await Promise.resolve('downloaded');\n return new this(secretToken, data);\n }\n constructor(token, data) {\n if (token !== secretToken) {\n throw new Error('Constructor is private');\n }\n this.#data = data;\n }\n getData() {\n return 'DATA: '+this.#data;\n }\n}\nDataContainer.create()\n .then(dc => assert.equal(\n dc.getData(), 'DATA: downloaded'));\n```", "```js\nclass DataContainer {\n static async create() {\n const data = await Promise.resolve('downloaded');\n return Object.create(this.prototype)._init(data); // (A)\n }\n constructor() {\n throw new Error('Constructor is private');\n }\n _init(data) {\n this._data = data;\n return this;\n }\n getData() {\n return 'DATA: '+this._data;\n }\n}\nDataContainer.create()\n .then(dc => {\n assert.equal(dc instanceof DataContainer, true); // (B)\n assert.equal(\n dc.getData(), 'DATA: downloaded');\n });\n```", "```js\nclass DataContainer {\n #data;\n static async create() {\n const data = await Promise.resolve('downloaded');\n return new this().#init(data);\n }\n\n #active = false;\n constructor() {\n }\n #init(data) {\n this.#active = true;\n this.#data = data;\n return this;\n }\n getData() {\n this.#check();\n return 'DATA: '+this.#data;\n }\n #check() {\n if (!this.#active) {\n throw new Error('Not created by factory');\n }\n }\n}\nDataContainer.create()\n .then(dc => assert.equal(\n dc.getData(), 'DATA: downloaded'));\n```", "```js\nconst secretToken = Symbol('secretToken');\nclass DataContainer {\n #data;\n constructor(token, data) {\n if (token !== secretToken) {\n throw new Error('Constructor is private');\n }\n this.#data = data;\n }\n getData() {\n return 'DATA: '+this.#data;\n }\n}\n\nasync function createDataContainer() {\n const data = await Promise.resolve('downloaded');\n return new DataContainer(secretToken, data);\n}\n\ncreateDataContainer()\n .then(dc => assert.equal(\n dc.getData(), 'DATA: downloaded'));\n```", "```js\nclass DataContainer {\n #data;\n constructor() {\n return Promise.resolve('downloaded')\n .then(data => {\n this.#data = data;\n return this; // (A)\n });\n }\n getData() {\n return 'DATA: '+this.#data;\n }\n}\n\nclass SubDataContainer extends DataContainer {\n #moreData;\n constructor() {\n super();\n const promise = this;\n return promise\n .then(_this => {\n return Promise.resolve('more')\n .then(moreData => {\n _this.#moreData = moreData;\n return _this;\n });\n });\n }\n getData() {\n return super.getData() + ', ' + this.#moreData;\n }\n}\n```", "```js\nassert.rejects(\n () => new SubDataContainer(),\n {\n name: 'TypeError',\n message: 'Cannot write private member #moreData ' +\n 'to an object whose class did not declare it',\n }\n);\n```"]