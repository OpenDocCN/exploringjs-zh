- en: 12 Values
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12 值
- en: 原文：[https://exploringjs.com/impatient-js/ch_values.html](https://exploringjs.com/impatient-js/ch_values.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/impatient-js/ch_values.html](https://exploringjs.com/impatient-js/ch_values.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 12.1 [What’s a type?](ch_values.html#whats-a-type)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.1 [什么是类型？](ch_values.html#whats-a-type)
- en: 12.2 [JavaScript’s type hierarchy](ch_values.html#javascripts-type-hierarchy)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.2 [JavaScript的类型层次结构](ch_values.html#javascripts-type-hierarchy)
- en: 12.3 [The types of the language specification](ch_values.html#the-types-of-the-language-specification)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.3 语言规范的类型
- en: 12.4 [Primitive values vs. objects](ch_values.html#primitive-values-vs.-objects)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.4 [原始值 vs. 对象](ch_values.html#primitive-values-vs.-objects)
- en: '12.4.1 [Primitive values (short: primitives)](ch_values.html#primitive-values-short-primitives)'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.4.1 [原始值（简称：原始值）](ch_values.html#primitive-values-short-primitives)
- en: 12.4.2 [Objects](ch_values.html#objects)
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.4.2 对象
- en: '12.5 [The operators `typeof` and `instanceof`: what’s the type of a value?](ch_values.html#the-operators-typeof-and-instanceof-whats-the-type-of-a-value)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.5 [`typeof`和`instanceof`运算符：值的类型是什么？](ch_values.html#the-operators-typeof-and-instanceof-whats-the-type-of-a-value)
- en: 12.5.1 [`typeof`](ch_values.html#typeof)
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.5.1 [`typeof`](ch_values.html#typeof)
- en: 12.5.2 [`instanceof`](ch_values.html#instanceof)
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.5.2 [`instanceof`](ch_values.html#instanceof)
- en: 12.6 [Classes and constructor functions](ch_values.html#classes-and-constructor-functions)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.6 类和构造函数
- en: 12.6.1 [Constructor functions associated with primitive types](ch_values.html#constructor-functions-associated-with-primitive-types)
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.6.1 与原始类型相关的构造函数
- en: 12.7 [Converting between types](ch_values.html#converting-between-types)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.7 类型转换
- en: 12.7.1 [Explicit conversion between types](ch_values.html#explicit-conversion-between-types)
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.7.1 类型之间的显式转换
- en: 12.7.2 [Coercion (automatic conversion between types)](ch_values.html#coercion-automatic-conversion-between-types)
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.7.2 强制转换（类型之间的自动转换）
- en: '* * *'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In this chapter, we’ll examine what kinds of values JavaScript has.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究JavaScript具有哪些类型的值。
- en: '![](../Images/ec8e6930fbe484fc519f3aa7b812c3fd.png)  **Supporting tool: `===`**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/ec8e6930fbe484fc519f3aa7b812c3fd.png)  **支持工具：`===`**'
- en: In this chapter, we’ll occasionally use the strict equality operator. `a ===
    b` evaluates to `true` if `a` and `b` are equal. What exactly that means is explained
    in [§13.4.2 “Strict equality (`===` and `!==`)”](ch_operators.html#strict-equality).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们偶尔会使用严格相等运算符。`a === b`的结果为`true`，如果`a`和`b`相等。这究竟意味着什么，在[§13.4.2 “严格相等（`===`和`!==`）”](ch_operators.html#strict-equality)中有解释。
- en: 12.1 What’s a type?
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.1 什么是类型？
- en: For this chapter, I consider types to be sets of values – for example, the type
    `boolean` is the set { `false`, `true` }.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我认为类型是值的集合，例如，`boolean`类型是集合{ `false`，`true` }。
- en: 12.2 JavaScript’s type hierarchy
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.2 JavaScript的类型层次结构
- en: '![Figure 6: A partial hierarchy of JavaScript’s types. Missing are the classes
    for errors, the classes associated with primitive types, and more. The diagram
    hints at the fact that not all objects are instances of Object.](../Images/2368843b86b1f2ca6ddd0254e1bf1dab.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图6：JavaScript类型的部分层次结构。缺少错误类的类，与原始类型相关的类等。该图表暗示了并非所有对象都是`Object`的实例。](../Images/2368843b86b1f2ca6ddd0254e1bf1dab.png)'
- en: 'Figure 6: A partial hierarchy of JavaScript’s types. Missing are the classes
    for errors, the classes associated with primitive types, and more. The diagram
    hints at the fact that not all objects are instances of `Object`.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图6：JavaScript类型的部分层次结构。缺少错误类的类，与原始类型相关的类等。该图表暗示了并非所有对象都是`Object`的实例。
- en: Fig. [6](#fig:type_hierarchy) shows JavaScript’s type hierarchy. What do we
    learn from that diagram?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图[6](#fig:type_hierarchy)显示了JavaScript的类型层次结构。我们从该图中学到了什么？
- en: 'JavaScript distinguishes two kinds of values: primitive values and objects.
    We’ll see soon what the difference is.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript区分两种值：原始值和对象。我们很快就会看到它们之间的区别。
- en: The diagram differentiates objects and instances of class `Object`. Each instance
    of `Object` is also an object, but not vice versa. However, virtually all objects
    that you’ll encounter in practice are instances of `Object` – for example, objects
    created via object literals. More details on this topic are explained in [§29.7.3
    “Not all objects are instances of `Object`”](ch_classes.html#non-instances-of-object).
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该图表区分了对象和`Object`类的实例。`Object`的每个实例也是一个对象，但反之则不然。然而，在实践中，你遇到的几乎所有对象都是`Object`的实例，例如，通过对象字面量创建的对象。有关此主题的更多详细信息，请参阅[§29.7.3
    “并非所有对象都是`Object`的实例”](ch_classes.html#non-instances-of-object)。
- en: 12.3 The types of the language specification
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.3 语言规范的类型
- en: 'The ECMAScript specification only knows a total of eight types. The names of
    those types are (I’m using TypeScript’s names, not the spec’s names):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript规范只知道总共八种类型。这些类型的名称是（我使用的是TypeScript的名称，而不是规范的名称）：
- en: '`undefined` with the only element `undefined`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`undefined`，唯一元素为`undefined`'
- en: '`null` with the only element `null`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`null`，唯一元素为`null`'
- en: '`boolean` with the elements `false` and `true`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean`，元素为`false`和`true`'
- en: '`number` the type of all numbers (e.g., `-123`, `3.141`)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`number`所有数字的类型（例如，`-123`，`3.141`）'
- en: '`bigint` the type of all big integers (e.g., `-123n`)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bigint`所有大整数的类型（例如，`-123n`）'
- en: '`string` the type of all strings (e.g., `''abc''`)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string`所有字符串的类型（例如，`''abc''`）'
- en: '`symbol` the type of all symbols (e.g., `Symbol(''My Symbol'')`)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`symbol`所有符号的类型（例如，`Symbol(''My Symbol'')`）'
- en: '`object` the type of all objects (different from `Object`, the type of all
    instances of class `Object` and its subclasses)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object`所有对象的类型（不同于`Object`，`Object`类及其子类的所有实例的类型）'
- en: 12.4 Primitive values vs. objects
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.4 原始值 vs. 对象
- en: 'The specification makes an important distinction between values:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 规范对值进行了重要的区分：
- en: '*Primitive values* are the elements of the types `undefined`, `null`, `boolean`,
    `number`, `bigint`, `string`, `symbol`.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*原始值*是`undefined`、`null`、`boolean`、`number`、`bigint`、`string`、`symbol`类型的元素。'
- en: All other values are *objects*.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有其他值都是*对象*。
- en: 'In contrast to Java (that inspired JavaScript here), primitive values are not
    second-class citizens. The difference between them and objects is more subtle.
    In a nutshell:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与Java（在这里受到启发的JavaScript）不同，原始值不是二等公民。它们与对象之间的区别更加微妙。简而言之：
- en: 'Primitive values: are atomic building blocks of data in JavaScript.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始值：是JavaScript中的原子数据构建块。
- en: 'They are *passed by value*: when primitive values are assigned to variables
    or passed to functions, their contents are copied.'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是*通过值*传递的：当原始值分配给变量或传递给函数时，它们的内容被复制。
- en: 'They are *compared by value*: when comparing two primitive values, their contents
    are compared.'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是*通过值*比较的：当比较两个原始值时，它们的内容被比较。
- en: 'Objects: are compound pieces of data.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象：是复合数据。
- en: 'They are *passed by identity* (my term): when objects are assigned to variables
    or passed to functions, their *identities* (think pointers) are copied.'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是*通过标识*（我的术语）传递的：当对象被分配给变量或传递给函数时，它们的*标识*（想象指针）被复制。
- en: 'They are *compared by identity* (my term): when comparing two objects, their
    identities are compared.'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是*通过标识*（我的术语）比较的：当比较两个对象时，它们的标识被比较。
- en: 'Other than that, primitive values and objects are quite similar: they both
    have *properties* (key-value entries) and can be used in the same locations.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，原始值和对象非常相似：它们都有*属性*（键值条目）并且可以在相同的位置使用。
- en: Next, we’ll look at primitive values and objects in more depth.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，我们将更深入地了解原始值和对象。 '
- en: '12.4.1 Primitive values (short: primitives)'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.4.1 原始值（简称：原始值）
- en: 12.4.1.1 Primitives are immutable
  id: totrans-53
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 12.4.1.1 原始值是不可变的
- en: 'You can’t change, add, or remove properties of primitives:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您无法更改、添加或删除原始值的属性：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 12.4.1.2 Primitives are *passed by value*
  id: totrans-56
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 12.4.1.2 原始值是*通过值*传递的
- en: 'Primitives are *passed by value*: variables (including parameters) store the
    contents of the primitives. When assigning a primitive value to a variable or
    passing it as an argument to a function, its content is copied.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 原始值是*通过值*传递的：变量（包括参数）存储原始值的内容。将原始值分配给变量或将其作为参数传递给函数时，其内容被复制。
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/b666ba365e94edaf0ef510fd7e12c7de.png)  **Observing the difference
    between passing by value and passing by reference**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/b666ba365e94edaf0ef510fd7e12c7de.png) **观察通过值传递和通过引用传递的区别**'
- en: Due to primitive values being immutable and compared by value (see next subsection),
    there is no way to observe the difference between passing by value and passing
    by identity (as used for objects in JavaScript).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于原始值是不可变的并且按值比较（见下一小节），所以无法观察通过值传递和通过标识传递（在JavaScript中用于对象）之间的区别。
- en: 12.4.1.3 Primitives are *compared by value*
  id: totrans-61
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 12.4.1.3 原始值是*通过值*比较的
- en: 'Primitives are *compared by value*: when comparing two primitive values, we
    compare their contents.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 原始值是*通过值*比较的：当比较两个原始值时，我们比较它们的内容。
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To see what’s so special about this way of comparing, read on and find out how
    objects are compared.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解这种比较方式的特殊之处，请继续阅读并了解对象是如何比较的。
- en: 12.4.2 Objects
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.4.2 对象
- en: Objects are covered in detail in [§28 “Objects”](ch_objects.html) and the following
    chapter. Here, we mainly focus on how they differ from primitive values.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对象在[§28“对象”](ch_objects.html)和接下来的章节中有详细介绍。在这里，我们主要关注它们与原始值的区别。
- en: 'Let’s first explore two common ways of creating objects:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先探讨创建对象的两种常见方法：
- en: 'Object literal:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象文字：
- en: '[PRE3]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The object literal starts and ends with curly braces `{}`. It creates an object
    with two properties. The first property has the key `''first''` (a string) and
    the value `''Jane''`. The second property has the key `''last''` and the value
    `''Doe''`. For more information on object literals, consult [§28.3.1 “Object literals:
    properties”](ch_objects.html#object-literals).'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对象文字以大括号`{}`开始和结束。它创建一个具有两个属性的对象。第一个属性具有键`'first'`（字符串）和值`'Jane'`。第二个属性具有键`'last'`和值`'Doe'`。有关对象文字的更多信息，请参阅[§28.3.1“对象文字：属性”](ch_objects.html#object-literals)。
- en: 'Array literal:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组文字：
- en: '[PRE4]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The Array literal starts and ends with square brackets `[]`. It creates an
    Array with two *elements*: `''strawberry''` and `''apple''`. For more information
    on Array literals, consult [§31.3.1 “Creating, reading, writing Arrays”](ch_arrays.html#array-literals).'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数组文字以方括号`[]`开始和结束。它创建一个包含两个*元素*`'strawberry'`和`'apple'`的数组。有关数组文字的更多信息，请参阅[§31.3.1“创建、读取、写入数组”](ch_arrays.html#array-literals)。
- en: 12.4.2.1 Objects are mutable by default
  id: totrans-74
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 12.4.2.1 对象默认是可变的
- en: 'By default, you can freely change, add, and remove the properties of objects:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，您可以自由更改、添加和删除对象的属性：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 12.4.2.2 Objects are *passed by identity*
  id: totrans-77
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 12.4.2.2 对象是*通过标识*传递的
- en: 'Objects are *passed by identity* (my term): variables (including parameters)
    store the *identities* of objects.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对象是*通过标识*（我的术语）传递的：变量（包括参数）存储对象的*标识*。
- en: The identity of an object is like a pointer (or a transparent reference) to
    the object’s actual data on the *heap* (think shared main memory of a JavaScript
    engine).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的标识就像是指向对象在堆上实际数据的指针（或透明引用）（想象JavaScript引擎的共享主内存）。
- en: When assigning an object to a variable or passing it as an argument to a function,
    its identity is copied. Each object literal creates a fresh object on the heap
    and returns its identity.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将对象分配给变量或将其作为参数传递给函数时，其标识被复制。每个对象文字在堆上创建一个新对象并返回其标识。
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'JavaScript uses *garbage collection* to automatically manage memory:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript使用*垃圾回收*来自动管理内存：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now the old value `{ prop: ''value'' }` of `obj` is *garbage* (not used anymore).
    JavaScript will automatically *garbage-collect* it (remove it from memory), at
    some point in time (possibly never if there is enough free memory).'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '现在`obj`的旧值`{ prop: ''value'' }`是*垃圾*（不再使用）。JavaScript将自动*垃圾回收*它（从内存中删除），在某个时间点（可能永远不会，如果有足够的空闲内存）。'
- en: '![](../Images/b666ba365e94edaf0ef510fd7e12c7de.png)  **Details: passing by
    identity**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/b666ba365e94edaf0ef510fd7e12c7de.png) **详细信息：通过标识传递**'
- en: “Passing by identity” means that the identity of an object (a transparent reference)
    is passed by value. This approach is also called [“passing by sharing”](https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: “通过标识传递”意味着对象的标识（透明引用）是按值传递的。这种方法也称为[“通过共享传递”](https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing)。
- en: 12.4.2.3 Objects are *compared by identity*
  id: totrans-87
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 12.4.2.3 对象通过标识进行比较
- en: 'Objects are *compared by identity* (my term): two variables are only equal
    if they contain the same object identity. They are not equal if they refer to
    different objects with the same content.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对象通过标识进行比较（我的术语）：只有当两个变量包含相同的对象标识时，它们才相等。如果它们引用具有相同内容的不同对象，则它们不相等。
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '12.5 The operators `typeof` and `instanceof`: what’s the type of a value?'
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.5 `typeof`和`instanceof`运算符：值的类型是什么？
- en: 'The two operators `typeof` and `instanceof` let you determine what type a given
    value `x` has:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 两个运算符`typeof`和`instanceof`让您确定给定值`x`的类型：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How do they differ?
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 它们有何不同？
- en: '`typeof` distinguishes the 7 types of the specification (minus one omission,
    plus one addition).'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`typeof`区分规范中的7种类型（减去一个遗漏，加上一个添加）。'
- en: '`instanceof` tests which class created a given value.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instanceof`测试哪个类创建了给定的值。'
- en: '![](../Images/5fad46ca9f1c9224fc57d54750b4f1f4.png)  **Rule of thumb: `typeof`
    is for primitive values; `instanceof` is for objects**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/5fad46ca9f1c9224fc57d54750b4f1f4.png) **经验法则：`typeof`用于原始值；`instanceof`用于对象**'
- en: 12.5.1 `typeof`
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.5.1 `typeof`
- en: 'Table 2: The results of the `typeof` operator.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 表2：`typeof`运算符的结果。
- en: '| `x` | `typeof x` |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `x` | `typeof x` |'
- en: '| --- | --- |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `undefined` | `''undefined''` |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `undefined` | `''undefined''` |'
- en: '| `null` | `''object''` |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `null` | `''object''` |'
- en: '| Boolean | `''boolean''` |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 布尔值 | `''boolean''` |'
- en: '| Number | `''number''` |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 数字 | `''number''` |'
- en: '| Bigint | `''bigint''` |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| 大整数 | `''bigint''` |'
- en: '| String | `''string''` |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 字符串 | `''string''` |'
- en: '| Symbol | `''symbol''` |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 符号 | `''symbol''` |'
- en: '| Function | `''function''` |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | `''function''` |'
- en: '| All other objects | `''object''` |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 所有其他对象 | `''object''` |'
- en: 'Tbl. [2](#tbl:typeof-results) lists all results of `typeof`. They roughly correspond
    to the 7 types of the language specification. Alas, there are two differences,
    and they are language quirks:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Tbl. [2](#tbl:typeof-results)列出了`typeof`的所有结果。它们大致对应于语言规范的7种类型。遗憾的是，存在两个差异，它们是语言怪癖：
- en: '`typeof null` returns `''object''` and not `''null''`. That’s a bug. Unfortunately,
    it can’t be fixed. TC39 tried to do that, but it broke too much code on the web.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`typeof null`返回`''object''`而不是`''null''`。这是一个错误。不幸的是，它无法修复。TC39试图这样做，但它在网络上破坏了太多代码。'
- en: '`typeof` of a function should be `''object''` (functions are objects). Introducing
    a separate category for functions is confusing.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数的`typeof`应该是`'object'`（函数是对象）。为函数引入一个单独的类别是令人困惑的。
- en: 'These are a few examples of using `typeof`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用`typeof`的几个例子：
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Exercises: Two exercises
    on `typeof`**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png) **练习：关于`typeof`的两个练习**'
- en: '`exercises/values/typeof_exrc.mjs`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exercises/values/typeof_exrc.mjs`'
- en: 'Bonus: `exercises/values/is_object_test.mjs`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 奖励：`exercises/values/is_object_test.mjs`
- en: 12.5.2 `instanceof`
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.5.2 `instanceof`
- en: 'This operator answers the question: has a value `x` been created by a class
    `C`?'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此运算符回答问题：值`x`是否由类`C`创建？
- en: '[PRE11]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For example:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Primitive values are not instances of anything:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 原始值不是任何东西的实例：
- en: '[PRE13]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Exercise: `instanceof`**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png) **练习：`instanceof`**'
- en: '`exercises/values/instanceof_exrc.mjs`'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`exercises/values/instanceof_exrc.mjs`'
- en: 12.6 Classes and constructor functions
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.6 类和构造函数
- en: 'JavaScript’s original factories for objects are *constructor functions*: ordinary
    functions that return “instances” of themselves if you invoke them via the `new`
    operator.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的原始对象工厂是*构造函数*：普通函数，如果通过`new`运算符调用它们，则返回自己的“实例”。
- en: ES6 introduced *classes*, which are mainly better syntax for constructor functions.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: ES6引入了*类*，主要是构造函数的更好语法。
- en: In this book, I’m using the terms *constructor function* and *class* interchangeably.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将*构造函数*和*类*这两个术语互换使用。
- en: Classes can be seen as partitioning the single type `object` of the specification
    into subtypes – they give us more types than the limited 7 ones of the specification.
    Each class is the type of the objects that were created by it.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 类可以被视为将规范中的单一类型`object`分成子类型 - 它们给我们比规范中有限的7种类型更多的类型。每个类都是由它创建的对象的类型。
- en: 12.6.1 Constructor functions associated with primitive types
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.6.1 与原始类型相关联的构造函数
- en: 'Each primitive type (except for the spec-internal types for `undefined` and
    `null`) has an associated *constructor function* (think class):'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 每种原始类型（除了规范内部类型`undefined`和`null`）都有一个关联的*构造函数*（考虑类）：
- en: The constructor function `Boolean` is associated with booleans.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数`Boolean`与布尔值相关联。
- en: The constructor function `Number` is associated with numbers.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数`Number`与数字相关联。
- en: The constructor function `String` is associated with strings.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数`String`与字符串相关联。
- en: The constructor function `Symbol` is associated with symbols.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数`Symbol`与符号相关联。
- en: 'Each of these functions plays several roles – for example, `Number`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数各自扮演多个角色 - 例如，`Number`：
- en: 'You can use it as a function and convert values to numbers:'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以将其作为函数使用并将值转换为数字：
- en: '[PRE14]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`Number.prototype` provides the properties for numbers – for example, method
    `.toString()`:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Number.prototype`提供了数字的属性 - 例如，方法`.toString()`：'
- en: '[PRE15]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`Number` is a namespace/container object for tool functions for numbers – for
    example:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Number`是用于数字的工具函数的命名空间/容器对象 - 例如：'
- en: '[PRE16]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Lastly, you can also use `Number` as a class and create number objects. These
    objects are different from real numbers and should be avoided.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，您还可以将`Number`用作类并创建数字对象。这些对象与实际数字不同，应该避免使用。
- en: '[PRE17]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 12.6.1.1 Wrapping primitive values
  id: totrans-147
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 12.6.1.1 包装原始值
- en: The constructor functions related to primitive types are also called *wrapper
    types* because they provide the canonical way of converting primitive values to
    objects. In the process, primitive values are “wrapped” in objects.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 与原始类型相关的构造函数也称为*包装类型*，因为它们提供了将原始值转换为对象的规范方式。在这个过程中，原始值被“包装”在对象中。
- en: '[PRE18]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Wrapping rarely matters in practice, but it is used internally in the language
    specification, to give primitives properties.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 包装在实践中很少重要，但在语言规范中内部使用，以赋予原始属性。
- en: 12.7 Converting between types
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.7 类型之间的转换
- en: 'There are two ways in which values are converted to other types in JavaScript:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，有两种方式将值转换为其他类型：
- en: 'Explicit conversion: via functions such as `String()`.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显式转换：通过诸如`String()`之类的函数。
- en: '*Coercion* (automatic conversion): happens when an operation receives operands/parameters
    that it can’t work with.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*强制转换*（自动转换）：当操作接收到无法处理的操作数/参数时发生。'
- en: 12.7.1 Explicit conversion between types
  id: totrans-155
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.7.1 显式类型转换
- en: 'The function associated with a primitive type explicitly converts values to
    that type:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 与原始类型相关联的函数明确地将值转换为该类型：
- en: '[PRE19]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can also use `Object()` to convert values to objects:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用`Object()`将值转换为对象：
- en: '[PRE20]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following table describes in more detail how this conversion works:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格更详细地描述了这种转换方式：
- en: '| `x` | `Object(x)` |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `x` | `Object(x)` |'
- en: '| --- | --- |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `undefined` | `{}` |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `undefined` | `{}` |'
- en: '| `null` | `{}` |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `null` | `{}` |'
- en: '| boolean | `new Boolean(x)` |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| boolean | `new Boolean(x)` |'
- en: '| number | `new Number(x)` |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| number | `new Number(x)` |'
- en: '| bigint | An instance of `BigInt` (`new` throws `TypeError`) |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| bigint | `BigInt`的一个实例（`new`抛出`TypeError`）|'
- en: '| string | `new String(x)` |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| string | `new String(x)` |'
- en: '| symbol | An instance of `Symbol` (`new` throws `TypeError`) |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| symbol | `Symbol`的一个实例（`new`抛出`TypeError`）|'
- en: '| object | `x` |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| object | `x` |'
- en: 12.7.2 Coercion (automatic conversion between types)
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.7.2 强制转换（类型之间的自动转换）
- en: For many operations, JavaScript automatically converts the operands/parameters
    if their types don’t fit. This kind of automatic conversion is called *coercion*.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多操作，如果它们的类型不匹配，JavaScript会自动转换操作数/参数。这种自动转换称为*强制转换*。
- en: 'For example, the multiplication operator coerces its operands to numbers:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，乘法运算符将其操作数强制转换为数字：
- en: '[PRE21]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Many built-in functions coerce, too. For example, `Number.parseInt()` coerces
    its parameter to a string before parsing it. That explains the following result:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 许多内置函数也会进行强制转换。例如，`Number.parseInt()`在解析之前会将其参数强制转换为字符串。这解释了以下结果：
- en: '[PRE22]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The number `123.45` is converted to the string `'123.45'` before it is parsed.
    Parsing stops before the first non-digit character, which is why the result is
    `123`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 数字`123.45`在解析之前被转换为字符串`'123.45'`。解析在第一个非数字字符之前停止，这就是为什么结果是`123`。
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Exercise: Converting
    values to primitives**'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png) **练习：将值转换为原始值**'
- en: '`exercises/values/conversion_exrc.mjs`'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`exercises/values/conversion_exrc.mjs`'
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz**'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png) **测验**'
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[测验应用程序](ch_quizzes-exercises.html#quizzes)。
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/7)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/impatient-js/issues/7)'
