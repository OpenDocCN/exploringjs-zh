- en: 15 Running cross-platform tasks via npm package scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://exploringjs.com/nodejs-shell-scripting/ch_package-scripts.html](https://exploringjs.com/nodejs-shell-scripting/ch_package-scripts.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 15.1 [npm package scripts](ch_package-scripts.html#npm-package-scripts)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.1.1 [Shorter npm commands for running package scripts](ch_package-scripts.html#shorter-npm-commands-for-running-package-scripts)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.1.2 [Which shell is used to run package scripts?](ch_package-scripts.html#which-shell-is-used-to-run-package-scripts)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.1.3 [Preventing package scripts from being run automatically](ch_package-scripts.html#preventing-package-scripts-from-being-run-automatically)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.1.4 [Getting tab completion for package scripts on Unix](ch_package-scripts.html#getting-tab-completion-for-package-scripts-on-unix)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.1.5 [Listing and organizing package scripts](ch_package-scripts.html#listing-and-organizing-package-scripts)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.2 [Kinds of package scripts](ch_package-scripts.html#kinds-of-package-scripts)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.2.1 [Pre and post scripts](ch_package-scripts.html#pre-and-post-scripts)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.2.2 [Life cycle scripts](ch_package-scripts.html#life-cycle-scripts)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.3 [The shell environment in which package scripts are run](ch_package-scripts.html#the-shell-environment-in-which-package-scripts-are-run)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.3.1 [The current directory](ch_package-scripts.html#the-current-directory)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.3.2 [The shell PATH](ch_package-scripts.html#the-shell-path)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.4 [Using environment variables in package scripts](ch_package-scripts.html#using-environment-variables-in-package-scripts)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.4.1 [Getting and setting environment variables](ch_package-scripts.html#getting-and-setting-environment-variables)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.4.2 [Setting up environment variables via `.env` files](ch_package-scripts.html#setting-up-environment-variables-via-.env-files)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.5 [Arguments for package scripts](ch_package-scripts.html#arguments-for-package-scripts)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.6 [The npm log level (how much output is produced)](ch_package-scripts.html#npm-log-level)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.6.1 [Log levels and information printed to the terminal](ch_package-scripts.html#log-levels-and-information-printed-to-the-terminal)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.6.2 [Log levels and information written to the npm log](ch_package-scripts.html#log-levels-and-information-written-to-the-npm-log)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.6.3 [Configuring logging](ch_package-scripts.html#configuring-logging)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.6.4 [Output of life cycle scripts that run during `npm install`](ch_package-scripts.html#output-of-life-cycle-scripts-that-run-during-npm-install)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.6.5 [Observations of how npm logging works](ch_package-scripts.html#observations-of-how-npm-logging-works)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.7 [Cross-platform shell scripting](ch_package-scripts.html#cross-platform-shell-scripting)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.7.1 [Paths and quoting](ch_package-scripts.html#paths-and-quoting)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.7.2 [Chaining commands](ch_package-scripts.html#chaining-commands)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.7.3 [The exit codes of package scripts](ch_package-scripts.html#the-exit-codes-of-package-scripts)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.7.4 [Piping and redirecting input and output](ch_package-scripts.html#piping-and-redirecting-input-and-output)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.7.5 [Commands that work on both platforms](ch_package-scripts.html#commands-that-work-on-both-platforms)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.7.6 [Running bin scripts and package-internal modules](ch_package-scripts.html#running-bin-scripts-and-package-internal-modules)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.7.7 [`node --eval` and `node --print`](ch_package-scripts.html#node-eval-node-print)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.8 [Helper packages for common operations](ch_package-scripts.html#helper-packages-for-common-operations)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.8.1 [Running package scripts from a command line](ch_package-scripts.html#running-package-scripts-from-a-command-line)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.8.2 [Running multiple scripts concurrently or sequentially](ch_package-scripts.html#running-multiple-scripts-concurrently-or-sequentially)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.8.3 [File system operations](ch_package-scripts.html#file-system-operations)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.8.4 [Putting files or directories into the trash](ch_package-scripts.html#putting-files-or-directories-into-the-trash)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.8.5 [Copying trees of files](ch_package-scripts.html#copying-trees-of-files)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.8.6 [Watching files](ch_package-scripts.html#watching-files)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.8.7 [Miscellaneous functionality](ch_package-scripts.html#miscellaneous-functionality)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.8.8 [HTTP servers](ch_package-scripts.html#http-servers)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.9 [Expanding the capabilities of package scripts](ch_package-scripts.html#expanding-the-capabilities-of-package-scripts)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '15.9.1 [`per-env`: switching between scripts, depending on `$NODE_ENV`](ch_package-scripts.html#per-env-switching-between-scripts-depending-on-node_env)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.9.2 [Defining operating-system-specific scripts](ch_package-scripts.html#defining-operating-system-specific-scripts)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.10 [Sources of this chapter](ch_package-scripts.html#sources-of-this-chapter-1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '`package.json` has the property `"scripts"` which lets us define *package scripts*,
    small shell scripts that perform package-related tasks such as compiling artifacts
    or running tests. This chapter explains them and how we can write them so that
    they work on both Windows and Unixes (macOS, Linux, etc.).'
  prefs: []
  type: TYPE_NORMAL
- en: 15.1 npm package scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*npm package scripts* are defined via property `"scripts"` of `package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The value of `"scripts"` is an object where each property defines a package
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: The property key defines the name of the script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The property value defines what to do when the script is run.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'then npm executes the script whose name is `script-name` in a shell. For example,
    we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'to run the following command in a shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In this chapter, we will occasionally use the `npm` option `-s`, which is an
    abbreviation for `--silent` and tells `npm run` to produce less output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This option is covered in more detail in [the section on logging](ch_package-scripts.html#npm-log-level).
  prefs: []
  type: TYPE_NORMAL
- en: 15.1.1 Shorter npm commands for running package scripts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Some package scripts can be run via shorter npm commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Commands | Equivalent |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `npm test`, `npm t` | `npm run test` |'
  prefs: []
  type: TYPE_TB
- en: '| `npm start` | `npm run start` |'
  prefs: []
  type: TYPE_TB
- en: '| `npm stop` | `npm run stop` |'
  prefs: []
  type: TYPE_TB
- en: '| `npm restart` | `npm run restart` |'
  prefs: []
  type: TYPE_TB
- en: '`npm start`: If there is no package script `"start"`, npm runs `node server.js`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm restart`: If there is no package script `"restart"`, npm runs `"prerestart"`,
    `"stop"`, `"start"`, `"postrestart"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[More information on `npm restart`.](https://docs.npmjs.com/cli/v8/commands/npm-restart)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.1.2 Which shell is used to run package scripts?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: By default, npm runs package scripts via `cmd.exe` on Windows and via `/bin/sh`
    on Unix. We can change that via [the npm configuration setting `script-shell`](https://docs.npmjs.com/cli/v8/using-npm/config#script-shell).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, doing so is rarely a good idea: Many existing cross-platform scripts
    are written for `sh` and `cmd.exe` and will stop working.'
  prefs: []
  type: TYPE_NORMAL
- en: 15.1.3 Preventing package scripts from being run automatically
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Some script names are reserved for *life cycle scripts* which npm runs whenever
    we execute certain npm commands.
  prefs: []
  type: TYPE_NORMAL
- en: For example, npm runs the script `"postinstall"` whenever we execute `npm install`
    (without arguments). [Life cycle scripts are covered in more detail later.](ch_package-scripts.html#life-cycle-scripts)
  prefs: []
  type: TYPE_NORMAL
- en: '[If the configuration setting `ignore-scripts`](https://docs.npmjs.com/cli/v8/using-npm/config#ignore-scripts)
    is `true`, npm will never run scripts automatically, only if we invoke them directly.'
  prefs: []
  type: TYPE_NORMAL
- en: 15.1.4 Getting tab completion for package scripts on Unix
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'On Unix, npm supports tab completion for commands and package script names
    via [`npm completion`](https://docs.npmjs.com/cli/v8/commands/npm-completion).
    We can install it by adding this line to our `.profile` / `.zprofile` / `.bash_profile`
    / etc.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you need tab completion for non-Unix platforms, do a web search such as “npm
    tab completion PowerShell”.
  prefs: []
  type: TYPE_NORMAL
- en: 15.1.5 Listing and organizing package scripts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`npm run` without a name lists the available scripts. If the following scripts
    exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then they are listed like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 15.1.5.1 Adding separators
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'If there are many package scripts, we can misuse script names as separators
    (script `"help"` will be explained in the next subsection):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the scripts are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note that the trick of prepending newlines (`\n`) works on Unix and on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 15.1.5.2 Printing help information
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The package script `"help"` prints help information via the bin script `scripts-help`
    from [package `@rauschma/scripts-help`](https://github.com/rauschma/scripts-help).
    We provide descriptions via the `package.json` property `"scripts-help"` (the
    value of `"tscwatch"` is abbreviated so that it fits into a single line):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what the help information looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 15.2 Kinds of package scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If certain names are used for scripts, they are run automatically in some situations:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Pre scripts* and *post scripts* are run before and after scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Life cycle scripts* are run when a user performs an action such as `npm install`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All other scripts are called *directly-run scripts*.
  prefs: []
  type: TYPE_NORMAL
- en: 15.2.1 Pre and post scripts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Whenever npm runs a package script `PS`, it automatically runs the following
    scripts – if they exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '`prePS` beforehand (a *pre script*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postPS` afterward (a *post script*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following scripts contain the pre script `prehello` and the post script
    `posthello`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what happens if we run `hello`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 15.2.2 Life cycle scripts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'npm runs *life cycle scripts* during npm commands such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`npm publish` (which uploads packages to the npm registry)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm pack` (which creates archives for registry packages, package directories,
    etc.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm install` (which is used without arguments to install dependencies for
    packages that were downloaded from sources other than the npm registry)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If any of the life cycle scripts fail, the whole command stops immediately with
    an error.
  prefs: []
  type: TYPE_NORMAL
- en: What are use cases for life cycle scripts?
  prefs: []
  type: TYPE_NORMAL
- en: 'Compiling TypeScript: If a package contains TypeScript code, we normally compile
    it to JavaScript code before we use it. While the latter code is often not checked
    into version control, it has to be uploaded to the npm registry, so that the package
    can be used from JavaScript. A life cycle script lets us compile the TypeScript
    code before `npm publish` uploads the package. That ensures that in the npm registry,
    the JavaScript code is always in sync with our TypeScript code. It also ensures
    that our TypeScript code has no static type errors because compilation (and therefore
    publishing) stops when those are encountered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Running tests: We can also use a life cycle script to run tests before publishing
    a package. If the tests fail, the package won’t be published.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These are the most important life cycle scripts (for detailed information on
    all life cycle scripts, see [the npm documentation](https://docs.npmjs.com/cli/v8/using-npm/scripts#life-cycle-scripts)):'
  prefs: []
  type: TYPE_NORMAL
- en: '`"prepare"`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Runs before a package archive (a `.tgz` file) is created:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: During `npm publish`
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: During `npm pack`
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Runs when a package is installed from git or a local path.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Runs when `npm install` is used without arguments or when a package is installed
    globally.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"prepack"` runs before a package archive (a `.tgz` file) is created:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During `npm publish`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: During `npm pack`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"prepublishOnly"` only runs during `npm publish`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"install"` runs when `npm install` is used without arguments or when a package
    is installed globally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that we can also create a pre script `"preinstall"` and/or a post script
    `"postinstall"`. Their names make it clearer when npm runs them.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following table summarizes when these life cycle scripts are run:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | `prepublishOnly` | `prepack` | `prepare` | `install` |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `npm publish` | `✔` | `✔` | `✔` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `npm pack` |  | `✔` | `✔` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `npm install` |  |  | `✔` | `✔` |'
  prefs: []
  type: TYPE_TB
- en: '| global install |  |  | `✔` | `✔` |'
  prefs: []
  type: TYPE_TB
- en: '| install via git, path |  |  | `✔` |  |'
  prefs: []
  type: TYPE_TB
- en: '**Caveat:** Doing things automatically is always a bit tricky. I usually follow
    these rules:'
  prefs: []
  type: TYPE_NORMAL
- en: I automate for myself (e.g. via `prepublishOnly`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I don’t automate for others (e.g. via `postinstall`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.3 The shell environment in which package scripts are run
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we’ll occasionally use
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'which runs the JavaScript code in `expr` and prints the result to the terminal
    - for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 15.3.1 The current directory
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When a package script runs, the current directory is always the package directory,
    independently of where we are in the directory tree whose root it is. We can confirm
    that by adding the following script to `package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s try out `cwd` on Unix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Changing the current directory in this manner, helps with writing package scripts
    because we can use paths that are relative to the package directory.
  prefs: []
  type: TYPE_NORMAL
- en: 15.3.2 The shell PATH
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When a module `M` imports from a module whose specifier starts with the name
    of a package `P`, Node.js goes through `node_modules` directories until it finds
    the directory of `P`:'
  prefs: []
  type: TYPE_NORMAL
- en: First `node_modules` in the parent directory of `M` (if it exists)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second `node_modules` in the parent of the parent directory of `M` (if it exists)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And so on, until it reaches the root of the file system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That is, `M` inherits the `node_modules` directories of its ancestor directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'A similar kind of inheritance happens with bin scripts, which are stored in
    `node_modules/.bin` when we install a package. `npm run` temporarily adds entries
    to the shell PATH variable (`$PATH` on Unix, `%Path%` on Windows):'
  prefs: []
  type: TYPE_NORMAL
- en: '`node_modules/.bin` in the package directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`node_modules/.bin` in the package directory’s parent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To see these additions, we can use the following package script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '`JS` stands for a single line with this JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'On Unix, we get the following output if we run `bin-dirs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows, we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 15.4 Using environment variables in package scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In task runners such as Make, Grunt, and Gulp, variables are important because
    they help reduce redundancy. Alas, while package scripts don’t have their own
    variables, we can work around that deficiency by using *environment variables*
    (which are also called *shell variables*).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the following commands to list platform-specific environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unix: `env`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Windows Command shell: `SET`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Both platforms: `node -p process.env`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On macOS, the result looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Windows Command shell, the result looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, npm temporarily adds more environment variables before it runs
    a package script. To see what the end result looks like, we can use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This command invokes a built-in package script. Let’s try it out for this `package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The names of all of npm’s temporary variables start with `npm_`. Let’s only
    print those, in alphabetical order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The `npm_` variables have a hierarchical structure. Under `npm_lifecycle_`,
    we find the name and the definition of the currently running package script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: On Windows, `npm_lifecycle_script` would `SET` in this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under prefix `npm_config_`, we can see some of npm’s configuration settings
    ([which are described in the npm documentation](https://docs.npmjs.com/cli/v8/using-npm/config)).
    These are a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The prefix `npm_package_` gives us access to the contents of `package.json`.
    Its top level looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Under `npm_package_bin_`, we can find the properties of the `package.json`
    property `"bin"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The `npm_package_config_` entries give us access to the properties of `"config"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: That means that `"config"` lets us set up variables that we can use in package
    scripts. The next subsection explores that further.
  prefs: []
  type: TYPE_NORMAL
- en: Note the object was converted to “nested” entries (line 2 and line 3), while
    the Array (line 1) and the numbers (line 2 and line 3) were converted to strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the remaining `npm_` environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 15.4.1 Getting and setting environment variables
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following `package.json` demonstrates how we can access variables defined
    via `"config"` in package scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Alas, there is no built-in cross-platform way of accessing environment variables
    from package scripts.
  prefs: []
  type: TYPE_NORMAL
- en: There are, however, packages with bin scripts that can help us.
  prefs: []
  type: TYPE_NORMAL
- en: '[Package `env-var`](https://github.com/rauschma/env-var) lets us get environment
    variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[Package `cross-env`](https://github.com/kentcdodds/cross-env) lets us set
    environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 15.4.2 Setting up environment variables via `.env` files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are also packages that let us set up environment variables via `.env`
    files. These files have the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Using a file that is separate from `package.json` enables us to keep that data
    out of version control.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are packages that support `.env` files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Package `dotenv`](https://github.com/motdotla/dotenv) supports them for JavaScript
    modules. We can preload it:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And we can import it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[Package `node-env-run`](https://github.com/dkundel/node-env-run) lets us use
    `.env` files via a shell command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[Package `env-cmd`](https://github.com/toddbluhm/env-cmd) is an alternative
    to the previous package:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The package has more features: switching between sets of variables, more file
    formats, etc.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 15.5 Arguments for package scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s explore how arguments are passed on to shell commands that we invoke
    via package scripts. We’ll use the following `package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The bin script `log-args` looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Positional arguments work as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '`npm run` consumes options and creates environment variables for them. They
    are not added to `process.argv`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want options to show up in `process.argv`, we have to use the *option
    terminator* `--`. That terminator is usually inserted after the name of the package
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'But we can also insert it before that name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 15.6 The npm log level (how much output is produced)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'npm supports the following log levels:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Log level | `npm` option | Aliases |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| silent | `--loglevel silent` | `-s --silent` |'
  prefs: []
  type: TYPE_TB
- en: '| error | `--loglevel error` |  |'
  prefs: []
  type: TYPE_TB
- en: '| warn | `--loglevel warn` | `-q --quiet` |'
  prefs: []
  type: TYPE_TB
- en: '| notice | `--loglevel notice` |  |'
  prefs: []
  type: TYPE_TB
- en: '| http | `--loglevel http` |  |'
  prefs: []
  type: TYPE_TB
- en: '| timing | `--loglevel timing` |  |'
  prefs: []
  type: TYPE_TB
- en: '| info | `--loglevel info` | `-d` |'
  prefs: []
  type: TYPE_TB
- en: '| verbose | `--loglevel verbose` | `-dd --verbose` |'
  prefs: []
  type: TYPE_TB
- en: '| silly | `--loglevel silly` | `-ddd` |'
  prefs: []
  type: TYPE_TB
- en: 'Logging refers to two kinds of activities:'
  prefs: []
  type: TYPE_NORMAL
- en: Printing information to the terminal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing information to npm logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following subsections describe:'
  prefs: []
  type: TYPE_NORMAL
- en: How log levels affect these activities. In principle, `silent` logs least, while
    `silly` logs most.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to configure logging. The previous table shows how to temporarily change
    the log level via command line options, but there are more settings. And we can
    change them either temporarily or permanently.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.6.1 Log levels and information printed to the terminal
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'By default, package scripts are relatively verbose when it comes to terminal
    output. Take, for example, the following `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what happens if the log level is higher than `silent` and the package
    script exits without errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what happens if the log level is higher than `silent` and the package
    script fails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'With log level `silent`, the output becomes less cluttered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Some errors are swallowed by `-s`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'We need at least log level `error` to see them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfortunately, log level `silent` also suppresses the output of `npm run` (without
    arguments):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 15.6.2 Log levels and information written to the npm log
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'By default, the logs are written to the npm cache directory, whose path we
    can get via `npm config`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The contents of the log directory look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Each line in a log starts with a line index and a log level. This is an example
    of a log that was written with log level `notice`. Interestingly, even log levels
    that are “more verbose” than `notice` (such as `silly`) show up in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'If `npm run` returns with an error, the corresponding log ends like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is no error, the corresponding log ends like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 15.6.3 Configuring logging
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`npm config list --long` prints default values for various settings. These
    are the default values for logging-related settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: If the value of `logs-dir` is `null`, npm uses directory `_logs` inside the
    npm cache directory (as mentioned previously).
  prefs: []
  type: TYPE_NORMAL
- en: '`logs-dir` lets us override the default so that npm writes its logs to a directory
    of our choosing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logs-max` lets us configure how many files are written to the log directory
    before npm deletes old files. If we set `logs-max` to 0, no logs are ever written.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loglevel` lets us configure npm’s log level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To permanently change these settings, we also use `npm config` – for example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Getting the current log level:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Permanently setting the current log level:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Permanently resetting the log level to the built-in default:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can also temporarily change settings via command line options – for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Other ways of changing settings (such as using environment variables) are explained
    by [the npm documentation](https://docs.npmjs.com/cli/v8/using-npm/config).
  prefs: []
  type: TYPE_NORMAL
- en: 15.6.4 Output of life cycle scripts that run during `npm install`
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The output of life cycle scripts than run during `npm install` (without arguments)
    is hidden. We can change that by (temporarily or permanently) setting `foreground-scripts`
    to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 15.6.5 Observations of how npm logging works
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Only log level `silent` turns off extra output when using `npm run`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The log levels have no effect on whether log files are created and on what is
    written to them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error messages are not written to the logs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.7 Cross-platform shell scripting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The two shells that are most commonly used for package scripts are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sh` on Unix'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cmd.exe` on Windows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we examine constructs that work in both shells.
  prefs: []
  type: TYPE_NORMAL
- en: 15.7.1 Paths and quoting
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Tips:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use relative paths whose segments are separated by slashes: Windows accepts
    slashes as separators even though you’d normally use backslashes on that platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Double-quote arguments: While `sh` supports single quotes, the Windows Command
    shell doesn’t. Unfortunately, we have to escape double quotes when we use them
    in package script definitions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 15.7.2 Chaining commands
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are two ways in which we can chain commands that work on both platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: A command after `&&` is only executed if the previous command succeeded (exit
    code is 0).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A command after `||` is only executed if the previous command failed (exit code
    is not 0).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Chaining while ignoring the exit code differs between platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unix: `;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Windows Command shell: `&`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following interaction demonstrates how `&&` and `||` work on Unix (on Windows,
    we’d use `dir` instead of `ls`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 15.7.3 The exit codes of package scripts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The exit code can be accessed via a shell variable:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unix: `$?`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Windows Command shell: `%errorlevel%`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run` returns with the same exit code as the last shell script that was
    executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'The following interaction happens on Unix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 15.7.4 Piping and redirecting input and output
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Piping between commands: `|`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Writing output to a file: `cmd > stdout-saved-to-file.txt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Reading input from a file: `cmd < stdin-from-file.txt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.7.5 Commands that work on both platforms
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following commands exist on both platforms (but differ when it comes to
    options):'
  prefs: []
  type: TYPE_NORMAL
- en: '`cd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`echo`. Caveat on Windows: double quotes are printed, not ignored'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mkdir`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`more`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rmdir`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.7.6 Running bin scripts and package-internal modules
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following `package.json` demonstrates three ways of invoking bin scripts
    in dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`hi1`: Bin scripts in dependencies are installed in the directory `node_modules/.bin`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hi2`: As we have seen, npm adds `node_modules/.bin` to the shell PATH while
    it executes package scripts. That means that we can use local bin scripts as if
    they were installed globally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hi3`: When `npx` runs a script, it also adds `node_modules/.bin` to the shell
    PATH.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On Unix, we can invoke package-local scripts directly – if they have hashbangs
    and are executable. However that doesn’t work on Windows, which is why it is better
    to invoke them via `node`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 15.7.7 `node --eval` and `node --print`
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When the functionality of a package script becomes too complex, it’s often a
    good idea to implement it via a Node.js module – which makes it easy to write
    cross-platform code.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we can also use the `node` command to run small JavaScript snippets,
    which is useful for performing small tasks in a cross-platform manner. The relevant
    options are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`node --eval <expr>`](https://nodejs.org/api/cli.html#-e---eval-script) evaluates
    the JavaScript expression `expr`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Abbreviation: `node -e`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`node --print <expr>`](https://nodejs.org/api/cli.html#-p---print-script)
    evaluates the JavaScript expression `expr` and prints the result to the terminal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Abbreviation: `node -p`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following commands work on both Unix and Windows (only the comments are
    Unix-specific):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'If we need platform-specific line terminators, we can use `os.EOL` – for example,
    we could replace `''Text content''` in the previous command with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Observations:'
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to put the JavaScript code in double quotes if it contains parentheses
    – otherwise Unix will complain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All built-in modules can be accessed via variables. That’s why we don’t need
    to import `os` or `fs`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fs` supports more file system operations. These are documented in [§8 “Working
    with the file system on Node.js”](ch_nodejs-file-system.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.8 Helper packages for common operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 15.8.1 Running package scripts from a command line
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[npm-quick-run](https://github.com/bahmutov/npm-quick-run) provides a bin script
    `nr` that lets us use abbreviations to run package scripts – for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nr m -w` executes `"npm run mocha -- -w"` (if `"mocha"` is the first package
    scripts whose name starts with an “m”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nr c:o` runs the package script `"cypress:open"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.8.2 Running multiple scripts concurrently or sequentially
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Running shell scripts concurrently:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unix: `&`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Windows Command shell: `start`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following two packages give us cross-platform options for that and for
    related functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[concurrently](https://github.com/open-cli-tools/concurrently) runs multiple
    shell commands concurrently – for example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[npm-run-all](https://github.com/mysticatea/npm-run-all/) provides several
    kinds of functionality – for example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A more convenient way of invoking package scripts sequentially. The following
    two commands are equivalent:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Running package scripts concurrently:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Using a wildcard to run multiple scripts – for example, `watch:*` stands for
    all package scripts whose names start with `watch:` (`watch:html`, `watch:js`,
    etc.):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 15.8.3 File system operations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Package `shx`](https://github.com/shelljs/shx) lets us use “Unix syntax” to
    run various file system operations. Everything it does, works on Unix and Windows.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Removing a directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Clearing a directory (double quotes to be safe w.r.t. the wildcard symbol `*`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Copying a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Removing a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '`shx` is based on the JavaScript library ShellJS, whose repository lists [all
    supported commands](https://github.com/shelljs/shelljs#command-reference). In
    addition to the Unix commands we have already seen, it also emulates: `cat`, `chmod`,
    `echo`, `find`, `grep`, `head`, `ln`, `ls`, `mv`, `pwd`, `sed`, `sort`, `tail`,
    `touch`, `uniq`, and others.'
  prefs: []
  type: TYPE_NORMAL
- en: 15.8.4 Putting files or directories into the trash
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Package `trash-cli`](https://github.com/sindresorhus/trash-cli) works on macOS
    (10.12+), Linux, and Windows (8+). It puts files and directories into the trash
    and supports paths and glob patterns. These are examples of using it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 15.8.5 Copying trees of files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Package `copyfiles`](https://github.com/calvinmetcalf/copyfiles) lets us copy
    trees of files.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a use case for `copyfiles`: In TypeScript, we can import non-code
    assets such as CSS and images. The TypeScript compiler compiles the code to a
    “dist” (output) directory but ignores non-code assets. This cross-platform shell
    command copies them to the dist directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'TypeScript compiles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '`copy-assets` copies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 15.8.6 Watching files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Package `onchange`](https://github.com/Qard/onchange) watches files and runs
    a shell command every time they change – for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'One common alternative (among many others):'
  prefs: []
  type: TYPE_NORMAL
- en: '[`nodemon`](https://github.com/remy/nodemon)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.8.7 Miscellaneous functionality
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[cli-error-notifier](https://github.com/micromata/cli-error-notifier) shows
    a native desktop notification if a script fails (has a non-zero exit code). It
    supports many operating systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.8.8 HTTP servers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'During development, it’s often useful to have an HTTP server. The following
    packages (among many others) can help:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`http-server`](https://github.com/http-party/http-server)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`live-server`](https://github.com/tapio/live-server)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`serve`](https://github.com/vercel/serve)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.9 Expanding the capabilities of package scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '15.9.1 `per-env`: switching between scripts, depending on `$NODE_ENV`'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[The bin script `per-env`](https://github.com/ericclemmons/per-env) lets us
    run a package script `SCRIPT` and automatically switches between (e.g.) `SCRIPT:development`,
    `SCRIPT:staging`, and `SCRIPT:production`, depending on the value of the environment
    variable `NODE_ENV`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 15.9.2 Defining operating-system-specific scripts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[The bin script `cross-os`](https://github.com/milewski/cross-os) switches
    between scripts depending on the current operating system.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Supported property values are: `darwin`, `freebsd`, `linux`, `sunos`, `win32`.'
  prefs: []
  type: TYPE_NORMAL
- en: 15.10 Sources of this chapter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[npm documentation](https://docs.npmjs.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Node.js documentation](https://nodejs.org/api/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Awesome npm scripts”](https://github.com/RyanZim/awesome-npm-scripts) by
    [Ryan Zimmerman](https://github.com/RyanZim) and [Michael Kühnel](https://github.com/mischah)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Three Things You Didn’t Know You Could Do with npm Scripts”](https://www.twilio.com/blog/npm-scripts)
    by [Dominik Kundel](https://twitter.com/dkundel)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[“Helpers and tips for npm run scripts”](https://michael-kuehnel.de/tooling/2018/03/22/helpers-and-tips-for-npm-run-scripts.html)
    by [Michael Kühnel](https://twitter.com/mkuehnel)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Comments](https://github.com/rauschma/nodejs-shell-scripting/issues/15)'
  prefs: []
  type: TYPE_NORMAL
