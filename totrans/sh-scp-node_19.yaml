- en: 15 Running cross-platform tasks via npm package scripts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15 [通过npm包脚本运行跨平台任务]
- en: 原文：[https://exploringjs.com/nodejs-shell-scripting/ch_package-scripts.html](https://exploringjs.com/nodejs-shell-scripting/ch_package-scripts.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/nodejs-shell-scripting/ch_package-scripts.html](https://exploringjs.com/nodejs-shell-scripting/ch_package-scripts.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 15.1 [npm package scripts](ch_package-scripts.html#npm-package-scripts)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.1 [npm包脚本](ch_package-scripts.html#npm-package-scripts)
- en: 15.1.1 [Shorter npm commands for running package scripts](ch_package-scripts.html#shorter-npm-commands-for-running-package-scripts)
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.1.1 [运行包脚本的缩写npm命令](ch_package-scripts.html#shorter-npm-commands-for-running-package-scripts)
- en: 15.1.2 [Which shell is used to run package scripts?](ch_package-scripts.html#which-shell-is-used-to-run-package-scripts)
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.1.2 [用于运行包脚本的shell](ch_package-scripts.html#which-shell-is-used-to-run-package-scripts)
- en: 15.1.3 [Preventing package scripts from being run automatically](ch_package-scripts.html#preventing-package-scripts-from-being-run-automatically)
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.1.3 [防止自动运行包脚本](ch_package-scripts.html#preventing-package-scripts-from-being-run-automatically)
- en: 15.1.4 [Getting tab completion for package scripts on Unix](ch_package-scripts.html#getting-tab-completion-for-package-scripts-on-unix)
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.1.4 [在Unix上为包脚本获取选项完成](ch_package-scripts.html#getting-tab-completion-for-package-scripts-on-unix)
- en: 15.1.5 [Listing and organizing package scripts](ch_package-scripts.html#listing-and-organizing-package-scripts)
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.1.5 [列出和组织包脚本](ch_package-scripts.html#listing-and-organizing-package-scripts)
- en: 15.2 [Kinds of package scripts](ch_package-scripts.html#kinds-of-package-scripts)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.2 [包脚本的种类](ch_package-scripts.html#kinds-of-package-scripts)
- en: 15.2.1 [Pre and post scripts](ch_package-scripts.html#pre-and-post-scripts)
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.2.1 [预先和后置脚本](ch_package-scripts.html#pre-and-post-scripts)
- en: 15.2.2 [Life cycle scripts](ch_package-scripts.html#life-cycle-scripts)
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.2.2 [生命周期脚本](ch_package-scripts.html#life-cycle-scripts)
- en: 15.3 [The shell environment in which package scripts are run](ch_package-scripts.html#the-shell-environment-in-which-package-scripts-are-run)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.3 [运行包脚本的shell环境](ch_package-scripts.html#the-shell-environment-in-which-package-scripts-are-run)
- en: 15.3.1 [The current directory](ch_package-scripts.html#the-current-directory)
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.3.1 [当前目录](ch_package-scripts.html#the-current-directory)
- en: 15.3.2 [The shell PATH](ch_package-scripts.html#the-shell-path)
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.3.2 [shell路径](ch_package-scripts.html#the-shell-path)
- en: 15.4 [Using environment variables in package scripts](ch_package-scripts.html#using-environment-variables-in-package-scripts)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.4 [在包脚本中使用环境变量](ch_package-scripts.html#using-environment-variables-in-package-scripts)
- en: 15.4.1 [Getting and setting environment variables](ch_package-scripts.html#getting-and-setting-environment-variables)
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.4.1 [获取和设置环境变量](ch_package-scripts.html#getting-and-setting-environment-variables)
- en: 15.4.2 [Setting up environment variables via `.env` files](ch_package-scripts.html#setting-up-environment-variables-via-.env-files)
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.4.2 [通过`.env`文件设置环境变量](ch_package-scripts.html#setting-up-environment-variables-via-.env-files)
- en: 15.5 [Arguments for package scripts](ch_package-scripts.html#arguments-for-package-scripts)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.5 [包脚本的参数](ch_package-scripts.html#arguments-for-package-scripts)
- en: 15.6 [The npm log level (how much output is produced)](ch_package-scripts.html#npm-log-level)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.6 [npm日志级别（产生多少输出）](ch_package-scripts.html#npm-log-level)
- en: 15.6.1 [Log levels and information printed to the terminal](ch_package-scripts.html#log-levels-and-information-printed-to-the-terminal)
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.6.1 [日志级别和打印到终端的信息](ch_package-scripts.html#log-levels-and-information-printed-to-the-terminal)
- en: 15.6.2 [Log levels and information written to the npm log](ch_package-scripts.html#log-levels-and-information-written-to-the-npm-log)
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.6.2 [日志级别和写入npm日志的信息](ch_package-scripts.html#log-levels-and-information-written-to-the-npm-log)
- en: 15.6.3 [Configuring logging](ch_package-scripts.html#configuring-logging)
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.6.3 [配置日志](ch_package-scripts.html#configuring-logging)
- en: 15.6.4 [Output of life cycle scripts that run during `npm install`](ch_package-scripts.html#output-of-life-cycle-scripts-that-run-during-npm-install)
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.6.4 [在`npm install`期间运行的生命周期脚本的输出](ch_package-scripts.html#output-of-life-cycle-scripts-that-run-during-npm-install)
- en: 15.6.5 [Observations of how npm logging works](ch_package-scripts.html#observations-of-how-npm-logging-works)
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.6.5 [观察npm日志的工作方式](ch_package-scripts.html#observations-of-how-npm-logging-works)
- en: 15.7 [Cross-platform shell scripting](ch_package-scripts.html#cross-platform-shell-scripting)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.7 [跨平台shell脚本](ch_package-scripts.html#cross-platform-shell-scripting)
- en: 15.7.1 [Paths and quoting](ch_package-scripts.html#paths-and-quoting)
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.7.1 [路径和引用](ch_package-scripts.html#paths-and-quoting)
- en: 15.7.2 [Chaining commands](ch_package-scripts.html#chaining-commands)
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.7.2 [链接命令](ch_package-scripts.html#chaining-commands)
- en: 15.7.3 [The exit codes of package scripts](ch_package-scripts.html#the-exit-codes-of-package-scripts)
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.7.3 [包脚本的退出代码](ch_package-scripts.html#the-exit-codes-of-package-scripts)
- en: 15.7.4 [Piping and redirecting input and output](ch_package-scripts.html#piping-and-redirecting-input-and-output)
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.7.4 [管道和重定向输入和输出](ch_package-scripts.html#piping-and-redirecting-input-and-output)
- en: 15.7.5 [Commands that work on both platforms](ch_package-scripts.html#commands-that-work-on-both-platforms)
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.7.5 [适用于两个平台的命令](ch_package-scripts.html#commands-that-work-on-both-platforms)
- en: 15.7.6 [Running bin scripts and package-internal modules](ch_package-scripts.html#running-bin-scripts-and-package-internal-modules)
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.7.6 [运行bin脚本和包内模块](ch_package-scripts.html#running-bin-scripts-and-package-internal-modules)
- en: 15.7.7 [`node --eval` and `node --print`](ch_package-scripts.html#node-eval-node-print)
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.7.7 [`node --eval`和`node --print`](ch_package-scripts.html#node-eval-node-print)
- en: 15.8 [Helper packages for common operations](ch_package-scripts.html#helper-packages-for-common-operations)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.8 [常见操作的辅助包](ch_package-scripts.html#helper-packages-for-common-operations)
- en: 15.8.1 [Running package scripts from a command line](ch_package-scripts.html#running-package-scripts-from-a-command-line)
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.8.1 [从命令行运行包脚本](ch_package-scripts.html#running-package-scripts-from-a-command-line)
- en: 15.8.2 [Running multiple scripts concurrently or sequentially](ch_package-scripts.html#running-multiple-scripts-concurrently-or-sequentially)
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.8.2 [并行或顺序运行多个脚本](ch_package-scripts.html#running-multiple-scripts-concurrently-or-sequentially)
- en: 15.8.3 [File system operations](ch_package-scripts.html#file-system-operations)
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.8.3 [文件系统操作](ch_package-scripts.html#file-system-operations)
- en: 15.8.4 [Putting files or directories into the trash](ch_package-scripts.html#putting-files-or-directories-into-the-trash)
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.8.4 [将文件或目录放入垃圾箱](ch_package-scripts.html#putting-files-or-directories-into-the-trash)
- en: 15.8.5 [Copying trees of files](ch_package-scripts.html#copying-trees-of-files)
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.8.5 [复制文件树](ch_package-scripts.html#copying-trees-of-files)
- en: 15.8.6 [Watching files](ch_package-scripts.html#watching-files)
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.8.6 [监视文件](ch_package-scripts.html#watching-files)
- en: 15.8.7 [Miscellaneous functionality](ch_package-scripts.html#miscellaneous-functionality)
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.8.7 [其他功能](ch_package-scripts.html#miscellaneous-functionality)
- en: 15.8.8 [HTTP servers](ch_package-scripts.html#http-servers)
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.8.8 [HTTP服务器](ch_package-scripts.html#http-servers)
- en: 15.9 [Expanding the capabilities of package scripts](ch_package-scripts.html#expanding-the-capabilities-of-package-scripts)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.9 [扩展包脚本的功能](ch_package-scripts.html#expanding-the-capabilities-of-package-scripts)
- en: '15.9.1 [`per-env`: switching between scripts, depending on `$NODE_ENV`](ch_package-scripts.html#per-env-switching-between-scripts-depending-on-node_env)'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '15.9.1 [`per-env`: 根据`$NODE_ENV`在脚本之间切换](ch_package-scripts.html#per-env-switching-between-scripts-depending-on-node_env)'
- en: 15.9.2 [Defining operating-system-specific scripts](ch_package-scripts.html#defining-operating-system-specific-scripts)
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.9.2 [定义特定操作系统的脚本](ch_package-scripts.html#defining-operating-system-specific-scripts)
- en: 15.10 [Sources of this chapter](ch_package-scripts.html#sources-of-this-chapter-1)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.10 [本章的来源](ch_package-scripts.html#sources-of-this-chapter-1)
- en: '* * *'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '`package.json` has the property `"scripts"` which lets us define *package scripts*,
    small shell scripts that perform package-related tasks such as compiling artifacts
    or running tests. This chapter explains them and how we can write them so that
    they work on both Windows and Unixes (macOS, Linux, etc.).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json`有一个属性`"scripts"`，让我们定义*包脚本*，执行与包相关的任务，如编译构件或运行测试的小型shell脚本。本章解释了它们以及我们如何编写它们，使它们在Windows和Unix（macOS，Linux等）上都能工作。'
- en: 15.1 npm package scripts
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.1 npm包脚本
- en: '*npm package scripts* are defined via property `"scripts"` of `package.json`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*npm包脚本*通过`package.json`的属性`"scripts"`来定义：'
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The value of `"scripts"` is an object where each property defines a package
    script:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`"scripts"`的值是一个对象，其中每个属性定义了一个包脚本：'
- en: The property key defines the name of the script.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性键定义了脚本的名称。
- en: The property value defines what to do when the script is run.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性值定义了脚本运行时要执行的操作。
- en: 'If we type:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们输入：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'then npm executes the script whose name is `script-name` in a shell. For example,
    we can use:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后npm在shell中执行名称为`script-name`的脚本。例如，我们可以使用：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'to run the following command in a shell:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在shell中运行以下命令：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this chapter, we will occasionally use the `npm` option `-s`, which is an
    abbreviation for `--silent` and tells `npm run` to produce less output:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们偶尔会使用`npm`选项`-s`，它是`--silent`的缩写，并告诉`npm run`产生更少的输出：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This option is covered in more detail in [the section on logging](ch_package-scripts.html#npm-log-level).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项在[日志部分](ch_package-scripts.html#npm-log-level)中有更详细的介绍。
- en: 15.1.1 Shorter npm commands for running package scripts
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.1.1 运行包脚本的更短的npm命令
- en: 'Some package scripts can be run via shorter npm commands:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一些包脚本可以通过更短的npm命令运行：
- en: '| Commands | Equivalent |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 命令 | 等效 |'
- en: '| --- | --- |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `npm test`, `npm t` | `npm run test` |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `npm test`, `npm t` | `npm run test` |'
- en: '| `npm start` | `npm run start` |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `npm start` | `npm run start` |'
- en: '| `npm stop` | `npm run stop` |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `npm stop` | `npm run stop` |'
- en: '| `npm restart` | `npm run restart` |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `npm restart` | `npm run restart` |'
- en: '`npm start`: If there is no package script `"start"`, npm runs `node server.js`.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm start`: 如果没有包脚本`"start"`，npm会运行`node server.js`。'
- en: '`npm restart`: If there is no package script `"restart"`, npm runs `"prerestart"`,
    `"stop"`, `"start"`, `"postrestart"`.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm restart`: 如果没有包脚本`"restart"`，npm会运行`"prerestart"`，`"stop"`，`"start"`，`"postrestart"`。'
- en: '[More information on `npm restart`.](https://docs.npmjs.com/cli/v8/commands/npm-restart)'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[更多关于`npm restart`的信息。](https://docs.npmjs.com/cli/v8/commands/npm-restart)'
- en: 15.1.2 Which shell is used to run package scripts?
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.1.2 用于运行包脚本的shell是哪个？
- en: By default, npm runs package scripts via `cmd.exe` on Windows and via `/bin/sh`
    on Unix. We can change that via [the npm configuration setting `script-shell`](https://docs.npmjs.com/cli/v8/using-npm/config#script-shell).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，npm通过`cmd.exe`在Windows上运行包脚本，在Unix上通过`/bin/sh`运行。我们可以通过[npm配置设置`script-shell`](https://docs.npmjs.com/cli/v8/using-npm/config#script-shell)来更改。
- en: 'However, doing so is rarely a good idea: Many existing cross-platform scripts
    are written for `sh` and `cmd.exe` and will stop working.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这样做很少是一个好主意：许多现有的跨平台脚本都是为`sh`和`cmd.exe`编写的，将停止工作。
- en: 15.1.3 Preventing package scripts from being run automatically
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.1.3 防止包脚本自动运行
- en: Some script names are reserved for *life cycle scripts* which npm runs whenever
    we execute certain npm commands.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一些脚本名称保留用于*生命周期脚本*，当我们执行特定的npm命令时，npm会运行它们。
- en: For example, npm runs the script `"postinstall"` whenever we execute `npm install`
    (without arguments). [Life cycle scripts are covered in more detail later.](ch_package-scripts.html#life-cycle-scripts)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当我们执行`npm install`（不带参数）时，npm会运行脚本`"postinstall"`。[生命周期脚本将在后面更详细地介绍。](ch_package-scripts.html#life-cycle-scripts)
- en: '[If the configuration setting `ignore-scripts`](https://docs.npmjs.com/cli/v8/using-npm/config#ignore-scripts)
    is `true`, npm will never run scripts automatically, only if we invoke them directly.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[如果配置设置`ignore-scripts`](https://docs.npmjs.com/cli/v8/using-npm/config#ignore-scripts)为`true`，npm永远不会自动运行脚本，只有在我们直接调用它们时才会运行。'
- en: 15.1.4 Getting tab completion for package scripts on Unix
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.1.4 在Unix上为包脚本获取tab补全
- en: 'On Unix, npm supports tab completion for commands and package script names
    via [`npm completion`](https://docs.npmjs.com/cli/v8/commands/npm-completion).
    We can install it by adding this line to our `.profile` / `.zprofile` / `.bash_profile`
    / etc.:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix上，npm支持通过[`npm completion`](https://docs.npmjs.com/cli/v8/commands/npm-completion)为命令和包脚本名称进行tab补全。我们可以通过将以下行添加到我们的`.profile`
    / `.zprofile` / `.bash_profile` /等来安装它。
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you need tab completion for non-Unix platforms, do a web search such as “npm
    tab completion PowerShell”.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要非Unix平台的tab补全，请搜索“npm tab completion PowerShell”等。
- en: 15.1.5 Listing and organizing package scripts
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.1.5 列出和组织包脚本
- en: '`npm run` without a name lists the available scripts. If the following scripts
    exist:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 没有名称的`npm run`会列出可用的脚本。如果存在以下脚本：
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then they are listed like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它们会像这样列出：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 15.1.5.1 Adding separators
  id: totrans-90
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 15.1.5.1 添加分隔符
- en: 'If there are many package scripts, we can misuse script names as separators
    (script `"help"` will be explained in the next subsection):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有很多包脚本，我们可以滥用脚本名称作为分隔符（脚本 `"help"` 将在下一小节中解释）：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now the scripts are listed as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在脚本列出如下：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that the trick of prepending newlines (`\n`) works on Unix and on Windows.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在 Unix 和 Windows 上都可以使用换行符（`\n`）的技巧。
- en: 15.1.5.2 Printing help information
  id: totrans-96
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 15.1.5.2 打印帮助信息
- en: 'The package script `"help"` prints help information via the bin script `scripts-help`
    from [package `@rauschma/scripts-help`](https://github.com/rauschma/scripts-help).
    We provide descriptions via the `package.json` property `"scripts-help"` (the
    value of `"tscwatch"` is abbreviated so that it fits into a single line):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 包脚本 `"help"` 通过 [package `@rauschma/scripts-help`](https://github.com/rauschma/scripts-help)
    的 bin 脚本 `scripts-help` 打印帮助信息。我们通过 `package.json` 属性 `"scripts-help"` 提供描述（`"tscwatch"`
    的值被缩写以适应单行）：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This is what the help information looks like:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助信息如下所示：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 15.2 Kinds of package scripts
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.2 包脚本的种类
- en: 'If certain names are used for scripts, they are run automatically in some situations:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某些名称用于脚本，则在某些情况下会自动运行：
- en: '*Pre scripts* and *post scripts* are run before and after scripts.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Pre 脚本* 和 *post 脚本* 在脚本之前和之后运行。'
- en: '*Life cycle scripts* are run when a user performs an action such as `npm install`.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*生命周期脚本* 在用户执行诸如 `npm install` 之类的操作时运行。'
- en: All other scripts are called *directly-run scripts*.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他脚本都被称为 *直接运行脚本*。
- en: 15.2.1 Pre and post scripts
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.2.1 Pre 和 post 脚本
- en: 'Whenever npm runs a package script `PS`, it automatically runs the following
    scripts – if they exist:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 每当 npm 运行包脚本 `PS` 时，它会自动运行以下脚本 - 如果它们存在的话：
- en: '`prePS` beforehand (a *pre script*)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prePS` 之前（*pre 脚本*）'
- en: '`postPS` afterward (a *post script*)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postPS` 之后（*post 脚本*）'
- en: 'The following scripts contain the pre script `prehello` and the post script
    `posthello`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下脚本包含预先脚本 `prehello` 和后置脚本 `posthello`：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This is what happens if we run `hello`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们运行 `hello` 时会发生的事情：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 15.2.2 Life cycle scripts
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.2.2 生命周期脚本
- en: 'npm runs *life cycle scripts* during npm commands such as:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: npm 在执行 `npm publish` 等命令期间运行 *生命周期脚本*：
- en: '`npm publish` (which uploads packages to the npm registry)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm publish`（上传包到 npm 注册表）'
- en: '`npm pack` (which creates archives for registry packages, package directories,
    etc.)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm pack`（为注册表包、包目录等创建归档）'
- en: '`npm install` (which is used without arguments to install dependencies for
    packages that were downloaded from sources other than the npm registry)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm install`（无参数使用，用于安装从 npm 注册表以外的来源下载的包的依赖项）'
- en: If any of the life cycle scripts fail, the whole command stops immediately with
    an error.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何生命周期脚本失败，整个命令将立即停止并显示错误。
- en: What are use cases for life cycle scripts?
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 生命周期脚本有哪些用例？
- en: 'Compiling TypeScript: If a package contains TypeScript code, we normally compile
    it to JavaScript code before we use it. While the latter code is often not checked
    into version control, it has to be uploaded to the npm registry, so that the package
    can be used from JavaScript. A life cycle script lets us compile the TypeScript
    code before `npm publish` uploads the package. That ensures that in the npm registry,
    the JavaScript code is always in sync with our TypeScript code. It also ensures
    that our TypeScript code has no static type errors because compilation (and therefore
    publishing) stops when those are encountered.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译 TypeScript：如果一个包包含 TypeScript 代码，我们通常会在使用之前将其编译为 JavaScript 代码。虽然后者的代码通常不会被检入版本控制，但它必须上传到
    npm 注册表，以便从 JavaScript 中使用该包。生命周期脚本让我们在 `npm publish` 上传包之前编译 TypeScript 代码。这确保了在
    npm 注册表中，JavaScript 代码始终与我们的 TypeScript 代码同步。它还确保我们的 TypeScript 代码没有静态类型错误，因为当遇到这些错误时，编译（因此发布）会停止。
- en: 'Running tests: We can also use a life cycle script to run tests before publishing
    a package. If the tests fail, the package won’t be published.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行测试：我们还可以使用生命周期脚本在发布包之前运行测试。如果测试失败，包将不会被发布。
- en: 'These are the most important life cycle scripts (for detailed information on
    all life cycle scripts, see [the npm documentation](https://docs.npmjs.com/cli/v8/using-npm/scripts#life-cycle-scripts)):'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是最重要的生命周期脚本（有关所有生命周期脚本的详细信息，请参阅 [npm 文档](https://docs.npmjs.com/cli/v8/using-npm/scripts#life-cycle-scripts)）：
- en: '`"prepare"`:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"prepare"`:'
- en: 'Runs before a package archive (a `.tgz` file) is created:'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在创建包归档（`.tgz` 文件）之前运行：
- en: During `npm publish`
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `npm publish` 期间
- en: During `npm pack`
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `npm pack` 期间
- en: Runs when a package is installed from git or a local path.
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在从 git 或本地路径安装包时运行。
- en: Runs when `npm install` is used without arguments or when a package is installed
    globally.
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在没有参数使用 `npm install` 或者全局安装包时运行。
- en: '`"prepack"` runs before a package archive (a `.tgz` file) is created:'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"prepack"` 在创建包归档（`.tgz` 文件）之前运行：'
- en: During `npm publish`
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `npm publish` 期间
- en: During `npm pack`
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `npm pack` 期间
- en: '`"prepublishOnly"` only runs during `npm publish`.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"prepublishOnly"` 仅在 `npm publish` 期间运行。'
- en: '`"install"` runs when `npm install` is used without arguments or when a package
    is installed globally.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"install"` 在没有参数使用 `npm install` 或者全局安装包时运行。'
- en: Note that we can also create a pre script `"preinstall"` and/or a post script
    `"postinstall"`. Their names make it clearer when npm runs them.
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，我们还可以创建一个预先脚本 `"preinstall"` 和/或一个后置脚本 `"postinstall"`。它们的名称使得在 npm 运行它们时更清晰。
- en: 'The following table summarizes when these life cycle scripts are run:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格总结了这些生命周期脚本何时运行：
- en: '|  | `prepublishOnly` | `prepack` | `prepare` | `install` |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '|  | `prepublishOnly` | `prepack` | `prepare` | `install` |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| `npm publish` | `✔` | `✔` | `✔` |  |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `npm publish` | `✔` | `✔` | `✔` |  |'
- en: '| `npm pack` |  | `✔` | `✔` |  |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `npm pack` |  | `✔` | `✔` |  |'
- en: '| `npm install` |  |  | `✔` | `✔` |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `npm install` |  |  | `✔` | `✔` |'
- en: '| global install |  |  | `✔` | `✔` |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| 全局安装 |  |  | `✔` | `✔` |'
- en: '| install via git, path |  |  | `✔` |  |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| 通过 git、路径安装 |  |  | `✔` |  |'
- en: '**Caveat:** Doing things automatically is always a bit tricky. I usually follow
    these rules:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 自动执行事务总是有点棘手。我通常遵循以下规则：'
- en: I automate for myself (e.g. via `prepublishOnly`).
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我为自己自动化（例如通过 `prepublishOnly`）。
- en: I don’t automate for others (e.g. via `postinstall`).
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我不为其他人自动化（例如通过 `postinstall`）。
- en: 15.3 The shell environment in which package scripts are run
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.3 包脚本运行的shell环境
- en: In this section, we’ll occasionally use
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们偶尔会使用
- en: '[PRE14]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'which runs the JavaScript code in `expr` and prints the result to the terminal
    - for example:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令调用`expr`中的JavaScript代码，并将结果打印到终端 - 例如：
- en: '[PRE15]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 15.3.1 The current directory
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.3.1 当前目录
- en: 'When a package script runs, the current directory is always the package directory,
    independently of where we are in the directory tree whose root it is. We can confirm
    that by adding the following script to `package.json`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当包脚本运行时，当前目录始终是包目录，与我们在其根目录的目录树中的位置无关。我们可以通过将以下脚本添加到`package.json`来确认：
- en: '[PRE16]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let’s try out `cwd` on Unix:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Unix上尝试`cwd`：
- en: '[PRE17]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Changing the current directory in this manner, helps with writing package scripts
    because we can use paths that are relative to the package directory.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式改变当前目录有助于编写包脚本，因为我们可以使用相对于包目录的路径。
- en: 15.3.2 The shell PATH
  id: totrans-158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.3.2 shell PATH
- en: 'When a module `M` imports from a module whose specifier starts with the name
    of a package `P`, Node.js goes through `node_modules` directories until it finds
    the directory of `P`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当模块`M`从以包`P`的名称开头的模块导入时，Node.js会遍历`node_modules`目录，直到找到`P`的目录：
- en: First `node_modules` in the parent directory of `M` (if it exists)
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`M`的父目录中的第一个`node_modules`（如果存在）'
- en: Second `node_modules` in the parent of the parent directory of `M` (if it exists)
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`M`的父目录的父目录中的第二个`node_modules`（如果存在）'
- en: And so on, until it reaches the root of the file system.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依此类推，直到达到文件系统的根目录。
- en: That is, `M` inherits the `node_modules` directories of its ancestor directories.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，`M`继承了其祖先目录的`node_modules`目录。
- en: 'A similar kind of inheritance happens with bin scripts, which are stored in
    `node_modules/.bin` when we install a package. `npm run` temporarily adds entries
    to the shell PATH variable (`$PATH` on Unix, `%Path%` on Windows):'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的继承方式也发生在bin脚本中，当我们安装一个包时，它们存储在`node_modules/.bin`中。`npm run`会临时将条目添加到shell
    PATH变量（Unix上为`$PATH`，Windows上为`%Path%`）：
- en: '`node_modules/.bin` in the package directory'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包目录中的`node_modules/.bin`
- en: '`node_modules/.bin` in the package directory’s parent'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包目录的父目录中的`node_modules/.bin`
- en: Etc.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等等。
- en: 'To see these additions, we can use the following package script:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这些添加，我们可以使用以下包脚本：
- en: '[PRE18]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`JS` stands for a single line with this JavaScript code:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`JS`代表一行JavaScript代码：'
- en: '[PRE19]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'On Unix, we get the following output if we run `bin-dirs`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix上，如果我们运行`bin-dirs`，我们会得到以下输出：
- en: '[PRE20]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'On Windows, we get:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，我们得到：
- en: '[PRE21]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 15.4 Using environment variables in package scripts
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.4 在包脚本中使用环境变量
- en: In task runners such as Make, Grunt, and Gulp, variables are important because
    they help reduce redundancy. Alas, while package scripts don’t have their own
    variables, we can work around that deficiency by using *environment variables*
    (which are also called *shell variables*).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在诸如Make、Grunt和Gulp之类的任务运行器中，变量很重要，因为它们有助于减少冗余。遗憾的是，虽然包脚本没有自己的变量，但我们可以通过使用*环境变量*（也称为*shell变量*）来解决这个缺陷。
- en: 'We can use the following commands to list platform-specific environment variables:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令列出特定于平台的环境变量：
- en: 'Unix: `env`'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unix：`env`
- en: 'Windows Command shell: `SET`'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows命令shell：`SET`
- en: 'Both platforms: `node -p process.env`'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个平台：`node -p process.env`
- en: 'On macOS, the result looks like this:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上，结果看起来像这样：
- en: '[PRE22]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the Windows Command shell, the result looks like this:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows命令shell中，结果看起来像这样：
- en: '[PRE23]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Additionally, npm temporarily adds more environment variables before it runs
    a package script. To see what the end result looks like, we can use the following
    command:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，npm在运行包脚本之前会临时添加更多的环境变量。为了查看最终结果是什么样子，我们可以使用以下命令：
- en: '[PRE24]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This command invokes a built-in package script. Let’s try it out for this `package.json`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令调用了一个内置的包脚本。让我们尝试一下这个`package.json`：
- en: '[PRE25]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The names of all of npm’s temporary variables start with `npm_`. Let’s only
    print those, in alphabetical order:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 所有npm的临时变量的名称都以`npm_`开头。让我们按字母顺序打印这些变量：
- en: '[PRE26]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `npm_` variables have a hierarchical structure. Under `npm_lifecycle_`,
    we find the name and the definition of the currently running package script:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm_`变量具有分层结构。在`npm_lifecycle_`下，我们找到了当前运行的包脚本的名称和定义：'
- en: '[PRE27]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: On Windows, `npm_lifecycle_script` would `SET` in this case.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，`npm_lifecycle_script`在这种情况下会`SET`。
- en: 'Under prefix `npm_config_`, we can see some of npm’s configuration settings
    ([which are described in the npm documentation](https://docs.npmjs.com/cli/v8/using-npm/config)).
    These are a few examples:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在前缀`npm_config_`下，我们可以看到一些npm的配置设置（[在npm文档中有描述](https://docs.npmjs.com/cli/v8/using-npm/config)）。以下是一些例子：
- en: '[PRE28]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The prefix `npm_package_` gives us access to the contents of `package.json`.
    Its top level looks like this:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 前缀`npm_package_`让我们可以访问`package.json`的内容。其顶层看起来像这样：
- en: '[PRE29]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Under `npm_package_bin_`, we can find the properties of the `package.json`
    property `"bin"`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在`npm_package_bin_`下，我们可以找到`package.json`属性`"bin"`的属性：
- en: '[PRE30]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `npm_package_config_` entries give us access to the properties of `"config"`:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm_package_config_`条目让我们可以访问`"config"`的属性：'
- en: '[PRE31]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: That means that `"config"` lets us set up variables that we can use in package
    scripts. The next subsection explores that further.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着`"config"`让我们设置可以在包脚本中使用的变量。下一小节将进一步探讨这一点。
- en: Note the object was converted to “nested” entries (line 2 and line 3), while
    the Array (line 1) and the numbers (line 2 and line 3) were converted to strings.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对象被转换为“嵌套”条目（第2行和第3行），而数组（第1行）和数字（第2行和第3行）被转换为字符串。
- en: 'These are the remaining `npm_` environment variables:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是剩下的`npm_`环境变量：
- en: '[PRE32]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 15.4.1 Getting and setting environment variables
  id: totrans-207
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.4.1 获取和设置环境变量
- en: 'The following `package.json` demonstrates how we can access variables defined
    via `"config"` in package scripts:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的`package.json`演示了我们如何在包脚本中访问通过`"config"`定义的变量：
- en: '[PRE33]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Alas, there is no built-in cross-platform way of accessing environment variables
    from package scripts.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，没有内置的跨平台方式可以从包脚本中访问环境变量。
- en: There are, however, packages with bin scripts that can help us.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一些带有bin脚本的包可以帮助我们。
- en: '[Package `env-var`](https://github.com/rauschma/env-var) lets us get environment
    variables:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '[Package `env-var`](https://github.com/rauschma/env-var)让我们获取环境变量：'
- en: '[PRE34]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[Package `cross-env`](https://github.com/kentcdodds/cross-env) lets us set
    environment variables:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '[Package `cross-env`](https://github.com/kentcdodds/cross-env)让我们设置环境变量：'
- en: '[PRE35]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 15.4.2 Setting up environment variables via `.env` files
  id: totrans-216
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.4.2 通过`.env`文件设置环境变量
- en: 'There are also packages that let us set up environment variables via `.env`
    files. These files have the following format:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些包可以让我们通过`.env`文件设置环境变量。这些文件具有以下格式：
- en: '[PRE36]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Using a file that is separate from `package.json` enables us to keep that data
    out of version control.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与`package.json`分开的文件使我们能够将数据排除在版本控制之外。
- en: 'These are packages that support `.env` files:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是支持`.env`文件的包：
- en: '[Package `dotenv`](https://github.com/motdotla/dotenv) supports them for JavaScript
    modules. We can preload it:'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Package `dotenv`](https://github.com/motdotla/dotenv)支持JavaScript模块的`.env`文件。我们可以预加载它：'
- en: '[PRE37]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'And we can import it:'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以导入它：
- en: '[PRE38]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[Package `node-env-run`](https://github.com/dkundel/node-env-run) lets us use
    `.env` files via a shell command:'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Package `node-env-run`](https://github.com/dkundel/node-env-run)让我们通过shell命令使用`.env`文件：'
- en: '[PRE39]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[Package `env-cmd`](https://github.com/toddbluhm/env-cmd) is an alternative
    to the previous package:'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Package `env-cmd`](https://github.com/toddbluhm/env-cmd)是前一个包的替代品：'
- en: '[PRE40]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The package has more features: switching between sets of variables, more file
    formats, etc.'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该包还具有更多功能：在变量集之间切换，更多文件格式等。
- en: 15.5 Arguments for package scripts
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.5 包脚本的参数
- en: 'Let’s explore how arguments are passed on to shell commands that we invoke
    via package scripts. We’ll use the following `package.json`:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探讨如何将参数传递给我们通过包脚本调用的shell命令。我们将使用以下`package.json`：
- en: '[PRE41]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The bin script `log-args` looks like this:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: bin脚本`log-args`如下所示：
- en: '[PRE42]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Positional arguments work as expected:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 位置参数按预期工作：
- en: '[PRE43]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '`npm run` consumes options and creates environment variables for them. They
    are not added to `process.argv`:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm run`使用选项并为它们创建环境变量。它们不会添加到`process.argv`中：'
- en: '[PRE44]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'If we want options to show up in `process.argv`, we have to use the *option
    terminator* `--`. That terminator is usually inserted after the name of the package
    script:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望选项出现在`process.argv`中，我们必须使用*选项终结符*`--`。该终结符通常在包脚本名称之后插入：
- en: '[PRE45]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'But we can also insert it before that name:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们也可以在该名称之前插入它：
- en: '[PRE46]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 15.6 The npm log level (how much output is produced)
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.6 npm日志级别（产生多少输出）
- en: 'npm supports the following log levels:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: npm支持以下日志级别：
- en: '| Log level | `npm` option | Aliases |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| 日志级别 | `npm`选项 | 别名 |'
- en: '| --- | --- | --- |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| silent | `--loglevel silent` | `-s --silent` |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| 静默 | `--loglevel silent` | `-s --silent` |'
- en: '| error | `--loglevel error` |  |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| 错误 | `--loglevel error` |  |'
- en: '| warn | `--loglevel warn` | `-q --quiet` |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| 警告 | `--loglevel warn` | `-q --quiet` |'
- en: '| notice | `--loglevel notice` |  |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| 注意 | `--loglevel notice` |  |'
- en: '| http | `--loglevel http` |  |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| http | `--loglevel http` |  |'
- en: '| timing | `--loglevel timing` |  |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| 时间 | `--loglevel timing` |  |'
- en: '| info | `--loglevel info` | `-d` |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| 信息 | `--loglevel info` | `-d` |'
- en: '| verbose | `--loglevel verbose` | `-dd --verbose` |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| 详细 | `--loglevel verbose` | `-dd --verbose` |'
- en: '| silly | `--loglevel silly` | `-ddd` |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| 荒谬 | `--loglevel silly` | `-ddd` |'
- en: 'Logging refers to two kinds of activities:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录指的是两种活动：
- en: Printing information to the terminal
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将信息打印到终端
- en: Writing information to npm logs
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将信息写入npm日志
- en: 'The following subsections describe:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各小节描述：
- en: How log levels affect these activities. In principle, `silent` logs least, while
    `silly` logs most.
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志级别如何影响这些活动。原则上，`silent`记录最少，而`silly`记录最多。
- en: How to configure logging. The previous table shows how to temporarily change
    the log level via command line options, but there are more settings. And we can
    change them either temporarily or permanently.
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何配置日志记录。前表显示了如何通过命令行选项临时更改日志级别，但还有更多设置。我们可以将它们临时或永久更改。
- en: 15.6.1 Log levels and information printed to the terminal
  id: totrans-262
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.6.1 日志级别和打印到终端的信息
- en: 'By default, package scripts are relatively verbose when it comes to terminal
    output. Take, for example, the following `package.json` file:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，包脚本在终端输出方面相对冗长。例如，以下`package.json`文件：
- en: '[PRE47]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'This is what happens if the log level is higher than `silent` and the package
    script exits without errors:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如果日志级别高于`silent`且包脚本在没有错误的情况下退出，则会发生以下情况：
- en: '[PRE48]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This is what happens if the log level is higher than `silent` and the package
    script fails:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果日志级别高于`silent`且包脚本失败，则会发生以下情况：
- en: '[PRE49]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'With log level `silent`, the output becomes less cluttered:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 使用日志级别`silent`，输出变得不那么混乱：
- en: '[PRE50]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Some errors are swallowed by `-s`:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 一些错误被`-s`吞没：
- en: '[PRE51]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'We need at least log level `error` to see them:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们至少需要日志级别`error`才能看到它们：
- en: '[PRE52]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Unfortunately, log level `silent` also suppresses the output of `npm run` (without
    arguments):'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，日志级别`silent`也会抑制`npm run`的输出（无参数）：
- en: '[PRE53]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 15.6.2 Log levels and information written to the npm log
  id: totrans-277
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.6.2 日志级别和写入npm日志的信息
- en: 'By default, the logs are written to the npm cache directory, whose path we
    can get via `npm config`:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，日志将被写入npm缓存目录，我们可以通过`npm config`获取其路径：
- en: '[PRE54]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The contents of the log directory look like this:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 日志目录的内容如下：
- en: '[PRE55]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Each line in a log starts with a line index and a log level. This is an example
    of a log that was written with log level `notice`. Interestingly, even log levels
    that are “more verbose” than `notice` (such as `silly`) show up in it:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 日志中的每一行都以行索引和日志级别开头。这是一个使用日志级别`notice`写入的日志的示例。有趣的是，即使是比`notice`更详细的日志级别（如`silly`）也会显示出来：
- en: '[PRE56]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'If `npm run` returns with an error, the corresponding log ends like this:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`npm run`返回错误，相应的日志以这种方式结束：
- en: '[PRE57]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'If there is no error, the corresponding log ends like this:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误，相应的日志记录以这种方式结束：
- en: '[PRE58]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 15.6.3 Configuring logging
  id: totrans-288
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.6.3 配置日志记录
- en: '`npm config list --long` prints default values for various settings. These
    are the default values for logging-related settings:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm config list --long`打印各种设置的默认值。这些是与日志记录相关的设置的默认值：'
- en: '[PRE59]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: If the value of `logs-dir` is `null`, npm uses directory `_logs` inside the
    npm cache directory (as mentioned previously).
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`logs-dir`的值为`null`，npm将使用npm缓存目录内的目录`_logs`（如前所述）。
- en: '`logs-dir` lets us override the default so that npm writes its logs to a directory
    of our choosing.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logs-dir`允许我们覆盖默认设置，使npm将其日志写入我们选择的目录。'
- en: '`logs-max` lets us configure how many files are written to the log directory
    before npm deletes old files. If we set `logs-max` to 0, no logs are ever written.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logs-max`允许我们配置npm在删除旧文件之前写入日志目录的文件数。如果将`logs-max`设置为0，则不会写入任何日志。'
- en: '`loglevel` lets us configure npm’s log level.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loglevel`允许我们配置npm的日志级别。'
- en: 'To permanently change these settings, we also use `npm config` – for example:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 要永久更改这些设置，我们还可以使用`npm config` - 例如：
- en: 'Getting the current log level:'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取当前的日志级别：
- en: '[PRE60]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Permanently setting the current log level:'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永久设置当前的日志级别：
- en: '[PRE61]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Permanently resetting the log level to the built-in default:'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永久重置日志级别为内置默认值：
- en: '[PRE62]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We can also temporarily change settings via command line options – for example:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过命令行选项临时更改设置 - 例如：
- en: '[PRE63]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Other ways of changing settings (such as using environment variables) are explained
    by [the npm documentation](https://docs.npmjs.com/cli/v8/using-npm/config).
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 其他更改设置的方式（例如使用环境变量）由[npm文档](https://docs.npmjs.com/cli/v8/using-npm/config)解释。
- en: 15.6.4 Output of life cycle scripts that run during `npm install`
  id: totrans-305
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.6.4 在`npm install`期间运行的生命周期脚本的输出
- en: The output of life cycle scripts than run during `npm install` (without arguments)
    is hidden. We can change that by (temporarily or permanently) setting `foreground-scripts`
    to `true`.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在`npm install`期间运行的生命周期脚本的输出（无参数）是隐藏的。我们可以通过（临时或永久）将`foreground-scripts`设置为`true`来更改这一点。
- en: 15.6.5 Observations of how npm logging works
  id: totrans-307
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.6.5 npm日志工作的观察
- en: Only log level `silent` turns off extra output when using `npm run`.
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有日志级别为`silent`时，使用`npm run`时才会关闭额外的输出。
- en: The log levels have no effect on whether log files are created and on what is
    written to them.
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志级别对于是否创建日志文件以及写入到日志文件中的内容没有影响。
- en: Error messages are not written to the logs.
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误消息不会被写入日志。
- en: 15.7 Cross-platform shell scripting
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.7 跨平台shell脚本
- en: 'The two shells that are most commonly used for package scripts are:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 用于包脚本的两个最常用的shell是：
- en: '`sh` on Unix'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unix上的`sh`
- en: '`cmd.exe` on Windows'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows上的`cmd.exe`
- en: In this section, we examine constructs that work in both shells.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们研究了在两个shell中都有效的构造。
- en: 15.7.1 Paths and quoting
  id: totrans-316
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.7.1 路径和引用
- en: 'Tips:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：
- en: 'Use relative paths whose segments are separated by slashes: Windows accepts
    slashes as separators even though you’d normally use backslashes on that platform.'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用由斜杠分隔的相对路径段：Windows接受斜杠作为分隔符，即使在该平台上通常使用反斜杠。
- en: 'Double-quote arguments: While `sh` supports single quotes, the Windows Command
    shell doesn’t. Unfortunately, we have to escape double quotes when we use them
    in package script definitions:'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双引号参数：虽然`sh`支持单引号，但Windows命令shell不支持。不幸的是，当我们在包脚本定义中使用双引号时，我们必须对其进行转义：
- en: '[PRE64]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 15.7.2 Chaining commands
  id: totrans-321
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.7.2 链接命令
- en: 'There are two ways in which we can chain commands that work on both platforms:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方式可以链接在两个平台上都有效的命令：
- en: A command after `&&` is only executed if the previous command succeeded (exit
    code is 0).
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`&&`之后的命令仅在前一个命令成功时执行（退出代码为0）。'
- en: A command after `||` is only executed if the previous command failed (exit code
    is not 0).
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`||`之后的命令仅在前一个命令失败时执行（退出代码不为0）。'
- en: 'Chaining while ignoring the exit code differs between platforms:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略退出代码的链接在不同平台上有所不同：
- en: 'Unix: `;`'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unix：`;`
- en: 'Windows Command shell: `&`'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows命令shell：`&`
- en: 'The following interaction demonstrates how `&&` and `||` work on Unix (on Windows,
    we’d use `dir` instead of `ls`):'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 以下交互演示了在Unix上`&&`和`||`的工作方式（在Windows上，我们会使用`dir`而不是`ls`）：
- en: '[PRE65]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 15.7.3 The exit codes of package scripts
  id: totrans-330
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.7.3 包脚本的退出代码
- en: 'The exit code can be accessed via a shell variable:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 退出代码可以通过shell变量访问：
- en: 'Unix: `$?`'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unix：`$?`
- en: 'Windows Command shell: `%errorlevel%`'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows命令shell：`%errorlevel%`
- en: '`npm run` returns with the same exit code as the last shell script that was
    executed:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm run`返回与上次执行的shell脚本相同的退出代码：'
- en: '[PRE66]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The following interaction happens on Unix:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 以下交互发生在Unix上：
- en: '[PRE67]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 15.7.4 Piping and redirecting input and output
  id: totrans-338
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.7.4 管道和重定向输入和输出
- en: 'Piping between commands: `|`'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在命令之间进行管道传输：`|`
- en: 'Writing output to a file: `cmd > stdout-saved-to-file.txt`'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将输出写入文件：`cmd > stdout-saved-to-file.txt`
- en: 'Reading input from a file: `cmd < stdin-from-file.txt`'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从文件中读取输入：`cmd < stdin-from-file.txt`
- en: 15.7.5 Commands that work on both platforms
  id: totrans-342
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.7.5 在两个平台上都有效的命令
- en: 'The following commands exist on both platforms (but differ when it comes to
    options):'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令在两个平台上都存在（但在选项方面有所不同）：
- en: '`cd`'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cd`'
- en: '`echo`. Caveat on Windows: double quotes are printed, not ignored'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`echo`。在Windows上要注意：双引号会被打印出来，而不是被忽略。'
- en: '`exit`'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit`'
- en: '`mkdir`'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mkdir`'
- en: '`more`'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`more`'
- en: '`rmdir`'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rmdir`'
- en: '`sort`'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort`'
- en: 15.7.6 Running bin scripts and package-internal modules
  id: totrans-351
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.7.6 运行bin脚本和包内部模块
- en: 'The following `package.json` demonstrates three ways of invoking bin scripts
    in dependencies:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的`package.json`演示了在依赖项中调用bin脚本的三种方式：
- en: '[PRE68]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Explanations:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 解释：
- en: '`hi1`: Bin scripts in dependencies are installed in the directory `node_modules/.bin`.'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hi1`：依赖项中的bin脚本安装在目录`node_modules/.bin`中。'
- en: '`hi2`: As we have seen, npm adds `node_modules/.bin` to the shell PATH while
    it executes package scripts. That means that we can use local bin scripts as if
    they were installed globally.'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hi2`：正如我们所见，npm在执行包脚本时会将`node_modules/.bin`添加到shell PATH中。这意味着我们可以像全局安装一样使用本地bin脚本。'
- en: '`hi3`: When `npx` runs a script, it also adds `node_modules/.bin` to the shell
    PATH.'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hi3`：当`npx`运行脚本时，它还会将`node_modules/.bin`添加到shell PATH中。'
- en: 'On Unix, we can invoke package-local scripts directly – if they have hashbangs
    and are executable. However that doesn’t work on Windows, which is why it is better
    to invoke them via `node`:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix上，我们可以直接调用包本地脚本 - 如果它们有hashbangs并且是可执行的。然而，在Windows上这种方法行不通，这就是为什么最好通过`node`来调用它们：
- en: '[PRE69]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 15.7.7 `node --eval` and `node --print`
  id: totrans-360
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.7.7 `node --eval`和`node --print`
- en: When the functionality of a package script becomes too complex, it’s often a
    good idea to implement it via a Node.js module – which makes it easy to write
    cross-platform code.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个包脚本的功能变得太复杂时，通常最好通过Node.js模块来实现它 - 这样可以轻松编写跨平台代码。
- en: 'However, we can also use the `node` command to run small JavaScript snippets,
    which is useful for performing small tasks in a cross-platform manner. The relevant
    options are:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们也可以使用`node`命令来运行小的JavaScript片段，这对于以跨平台的方式执行小任务非常有用。相关的选项是：
- en: '[`node --eval <expr>`](https://nodejs.org/api/cli.html#-e---eval-script) evaluates
    the JavaScript expression `expr`.'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`node --eval <expr>`](https://nodejs.org/api/cli.html#-e---eval-script)评估JavaScript表达式`expr`。'
- en: 'Abbreviation: `node -e`'
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩写：`node -e`
- en: '[`node --print <expr>`](https://nodejs.org/api/cli.html#-p---print-script)
    evaluates the JavaScript expression `expr` and prints the result to the terminal.'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`node --print <expr>`](https://nodejs.org/api/cli.html#-p---print-script)评估JavaScript表达式`expr`并将结果打印到终端。'
- en: 'Abbreviation: `node -p`'
  id: totrans-366
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩写：`node -p`
- en: 'The following commands work on both Unix and Windows (only the comments are
    Unix-specific):'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令在Unix和Windows上都适用（只有注释是Unix特定的）：
- en: '[PRE70]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'If we need platform-specific line terminators, we can use `os.EOL` – for example,
    we could replace `''Text content''` in the previous command with:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要特定于平台的行终止符，我们可以使用`os.EOL`，例如，我们可以在前一个命令中用`'Text content'`替换：
- en: '[PRE71]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Observations:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 观察：
- en: It’s important to put the JavaScript code in double quotes if it contains parentheses
    – otherwise Unix will complain.
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果JavaScript代码包含括号，将其放在双引号中很重要，否则Unix会报错。
- en: All built-in modules can be accessed via variables. That’s why we don’t need
    to import `os` or `fs`.
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有内置模块都可以通过变量访问。这就是为什么我们不需要导入`os`或`fs`。
- en: '`fs` supports more file system operations. These are documented in [§8 “Working
    with the file system on Node.js”](ch_nodejs-file-system.html).'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fs`支持更多的文件系统操作。这些在[§8“在Node.js上使用文件系统”](ch_nodejs-file-system.html)中有文档记录。'
- en: 15.8 Helper packages for common operations
  id: totrans-375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.8 常见操作的辅助软件包
- en: 15.8.1 Running package scripts from a command line
  id: totrans-376
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.8.1 从命令行运行软件包脚本
- en: '[npm-quick-run](https://github.com/bahmutov/npm-quick-run) provides a bin script
    `nr` that lets us use abbreviations to run package scripts – for example:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '[npm-quick-run](https://github.com/bahmutov/npm-quick-run)提供了一个bin脚本`nr`，让我们可以使用缩写来运行软件包脚本，例如：'
- en: '`nr m -w` executes `"npm run mocha -- -w"` (if `"mocha"` is the first package
    scripts whose name starts with an “m”).'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nr m -w`执行`"npm run mocha -- -w"`（如果`"mocha"`是以“m”开头的第一个软件包脚本）。'
- en: '`nr c:o` runs the package script `"cypress:open"`.'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nr c:o`运行软件包脚本`"cypress:open"`。'
- en: Etc.
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等等。
- en: 15.8.2 Running multiple scripts concurrently or sequentially
  id: totrans-381
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.8.2 同时或顺序运行多个脚本
- en: 'Running shell scripts concurrently:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 同时运行shell脚本：
- en: 'Unix: `&`'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unix：`&`
- en: 'Windows Command shell: `start`'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows命令shell：`start`
- en: 'The following two packages give us cross-platform options for that and for
    related functionality:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两个软件包为我们提供了跨平台的选项和相关功能：
- en: '[concurrently](https://github.com/open-cli-tools/concurrently) runs multiple
    shell commands concurrently – for example:'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[concurrently](https://github.com/open-cli-tools/concurrently)同时运行多个shell命令，例如：'
- en: '[PRE72]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[npm-run-all](https://github.com/mysticatea/npm-run-all/) provides several
    kinds of functionality – for example:'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[npm-run-all](https://github.com/mysticatea/npm-run-all/)提供了几种功能，例如：'
- en: 'A more convenient way of invoking package scripts sequentially. The following
    two commands are equivalent:'
  id: totrans-389
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用软件包脚本的更方便的方式。以下两个命令是等价的：
- en: '[PRE73]'
  id: totrans-390
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Running package scripts concurrently:'
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时运行软件包脚本：
- en: '[PRE74]'
  id: totrans-392
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Using a wildcard to run multiple scripts – for example, `watch:*` stands for
    all package scripts whose names start with `watch:` (`watch:html`, `watch:js`,
    etc.):'
  id: totrans-393
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用通配符运行多个脚本，例如，`watch:*`代表所有以`watch:`开头的软件包脚本（`watch:html`、`watch:js`等）：
- en: '[PRE75]'
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 15.8.3 File system operations
  id: totrans-395
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.8.3 文件系统操作
- en: '[Package `shx`](https://github.com/shelljs/shx) lets us use “Unix syntax” to
    run various file system operations. Everything it does, works on Unix and Windows.'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '[Package `shx`](https://github.com/shelljs/shx)让我们可以使用“Unix语法”来运行各种文件系统操作。它在Unix和Windows上的所有操作都有效。'
- en: 'Creating a directory:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 创建目录：
- en: '[PRE76]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Removing a directory:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 删除目录：
- en: '[PRE77]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Clearing a directory (double quotes to be safe w.r.t. the wildcard symbol `*`):'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 清空目录（双引号是为了安全起见，关于通配符`*`）：
- en: '[PRE78]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Copying a file:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 复制文件：
- en: '[PRE79]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Removing a file:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 删除文件：
- en: '[PRE80]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '`shx` is based on the JavaScript library ShellJS, whose repository lists [all
    supported commands](https://github.com/shelljs/shelljs#command-reference). In
    addition to the Unix commands we have already seen, it also emulates: `cat`, `chmod`,
    `echo`, `find`, `grep`, `head`, `ln`, `ls`, `mv`, `pwd`, `sed`, `sort`, `tail`,
    `touch`, `uniq`, and others.'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '`shx`基于JavaScript库ShellJS，其存储库列出了[所有支持的命令](https://github.com/shelljs/shelljs#command-reference)。除了我们已经看到的Unix命令之外，它还模拟：`cat`、`chmod`、`echo`、`find`、`grep`、`head`、`ln`、`ls`、`mv`、`pwd`、`sed`、`sort`、`tail`、`touch`、`uniq`等。'
- en: 15.8.4 Putting files or directories into the trash
  id: totrans-408
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.8.4 将文件或目录放入垃圾箱
- en: '[Package `trash-cli`](https://github.com/sindresorhus/trash-cli) works on macOS
    (10.12+), Linux, and Windows (8+). It puts files and directories into the trash
    and supports paths and glob patterns. These are examples of using it:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '[Package `trash-cli`](https://github.com/sindresorhus/trash-cli)适用于macOS（10.12+）、Linux和Windows（8+）。它将文件和目录放入垃圾箱，并支持路径和glob模式。以下是使用它的示例：'
- en: '[PRE81]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 15.8.5 Copying trees of files
  id: totrans-411
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.8.5 复制文件树
- en: '[Package `copyfiles`](https://github.com/calvinmetcalf/copyfiles) lets us copy
    trees of files.'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '[Package `copyfiles`](https://github.com/calvinmetcalf/copyfiles)让我们可以复制文件树。'
- en: 'The following is a use case for `copyfiles`: In TypeScript, we can import non-code
    assets such as CSS and images. The TypeScript compiler compiles the code to a
    “dist” (output) directory but ignores non-code assets. This cross-platform shell
    command copies them to the dist directory:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '`copyfiles`的用例如下：在TypeScript中，我们可以导入非代码资产，如CSS和图像。TypeScript编译器将代码编译到“dist”（输出）目录，但忽略非代码资产。这个跨平台的shell命令将它们复制到dist目录：'
- en: '[PRE82]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'TypeScript compiles:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript编译：
- en: '[PRE83]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '`copy-assets` copies:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '`copy-assets`复制：'
- en: '[PRE84]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 15.8.6 Watching files
  id: totrans-419
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.8.6 监视文件
- en: '[Package `onchange`](https://github.com/Qard/onchange) watches files and runs
    a shell command every time they change – for example:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '[Package `onchange`](https://github.com/Qard/onchange)监视文件并在每次更改时运行shell命令，例如：'
- en: '[PRE85]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'One common alternative (among many others):'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的替代方案（还有许多其他）：
- en: '[`nodemon`](https://github.com/remy/nodemon)'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`nodemon`](https://github.com/remy/nodemon)'
- en: 15.8.7 Miscellaneous functionality
  id: totrans-424
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.8.7 其他功能
- en: '[cli-error-notifier](https://github.com/micromata/cli-error-notifier) shows
    a native desktop notification if a script fails (has a non-zero exit code). It
    supports many operating systems.'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[cli-error-notifier](https://github.com/micromata/cli-error-notifier) 如果脚本失败（具有非零退出代码），则显示本机桌面通知。它支持许多操作系统。'
- en: 15.8.8 HTTP servers
  id: totrans-426
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.8.8 HTTP 服务器
- en: 'During development, it’s often useful to have an HTTP server. The following
    packages (among many others) can help:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，通常需要一个HTTP服务器。以下包（以及许多其他包）可以帮助：
- en: '[`http-server`](https://github.com/http-party/http-server)'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`http-server`](https://github.com/http-party/http-server)'
- en: '[`live-server`](https://github.com/tapio/live-server)'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`live-server`](https://github.com/tapio/live-server)'
- en: '[`serve`](https://github.com/vercel/serve)'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`serve`](https://github.com/vercel/serve)'
- en: 15.9 Expanding the capabilities of package scripts
  id: totrans-431
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.9 扩展包脚本的功能
- en: '15.9.1 `per-env`: switching between scripts, depending on `$NODE_ENV`'
  id: totrans-432
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '15.9.1 `per-env`: 根据 `$NODE_ENV` 在不同脚本之间切换'
- en: '[The bin script `per-env`](https://github.com/ericclemmons/per-env) lets us
    run a package script `SCRIPT` and automatically switches between (e.g.) `SCRIPT:development`,
    `SCRIPT:staging`, and `SCRIPT:production`, depending on the value of the environment
    variable `NODE_ENV`:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '[The bin script `per-env`](https://github.com/ericclemmons/per-env) 允许我们运行一个包脚本
    `SCRIPT`，并根据环境变量 `NODE_ENV` 的值自动在 `SCRIPT:development`、`SCRIPT:staging` 和 `SCRIPT:production`
    之间切换：'
- en: '[PRE86]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 15.9.2 Defining operating-system-specific scripts
  id: totrans-435
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.9.2 定义特定操作系统的脚本
- en: '[The bin script `cross-os`](https://github.com/milewski/cross-os) switches
    between scripts depending on the current operating system.'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '[The bin script `cross-os`](https://github.com/milewski/cross-os) 根据当前操作系统在不同脚本之间切换。'
- en: '[PRE87]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Supported property values are: `darwin`, `freebsd`, `linux`, `sunos`, `win32`.'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 支持的属性值有：`darwin`、`freebsd`、`linux`、`sunos`、`win32`。
- en: 15.10 Sources of this chapter
  id: totrans-439
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.10 本章的来源
- en: '[npm documentation](https://docs.npmjs.com)'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[npm documentation](https://docs.npmjs.com)'
- en: '[Node.js documentation](https://nodejs.org/api/)'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Node.js documentation](https://nodejs.org/api/)'
- en: '[“Awesome npm scripts”](https://github.com/RyanZim/awesome-npm-scripts) by
    [Ryan Zimmerman](https://github.com/RyanZim) and [Michael Kühnel](https://github.com/mischah)'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Awesome npm scripts”](https://github.com/RyanZim/awesome-npm-scripts) 由 [Ryan
    Zimmerman](https://github.com/RyanZim) 和 [Michael Kühnel](https://github.com/mischah)
    编写'
- en: '[“Three Things You Didn’t Know You Could Do with npm Scripts”](https://www.twilio.com/blog/npm-scripts)
    by [Dominik Kundel](https://twitter.com/dkundel)'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Three Things You Didn’t Know You Could Do with npm Scripts”](https://www.twilio.com/blog/npm-scripts)
    由 [Dominik Kundel](https://twitter.com/dkundel)'
- en: '[“Helpers and tips for npm run scripts”](https://michael-kuehnel.de/tooling/2018/03/22/helpers-and-tips-for-npm-run-scripts.html)
    by [Michael Kühnel](https://twitter.com/mkuehnel)'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“Helpers and tips for npm run scripts”](https://michael-kuehnel.de/tooling/2018/03/22/helpers-and-tips-for-npm-run-scripts.html)
    由 [Michael Kühnel](https://twitter.com/mkuehnel)'
- en: '[Comments](https://github.com/rauschma/nodejs-shell-scripting/issues/15)'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '[Comments](https://github.com/rauschma/nodejs-shell-scripting/issues/15)'
