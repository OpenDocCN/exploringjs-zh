["```js\nfunction func() { // (A)\n const aVariable = 1;\n if (true) { // (B)\n const anotherVariable = 2;\n }\n}\n```", "```js\n<iframe src=\"iframe.html?first\"></iframe>\n<script>\n const iframe = document.querySelector('iframe');\n const icw = iframe.contentWindow; // `globalThis` of iframe\n\n iframe.onload = () => {\n // Access properties of global object of iframe\n const firstGlobalThis = icw.globalThis;\n const firstArray = icw.Array;\n console.log(icw.iframeName); // 'first'\n\n iframe.onload = () => {\n const secondGlobalThis = icw.globalThis;\n const secondArray = icw.Array;\n\n // The global object is different\n console.log(icw.iframeName); // 'second'\n console.log(secondArray === firstArray); // false\n\n // But globalThis is still the same\n console.log(firstGlobalThis === secondGlobalThis); // true\n };\n iframe.src = 'iframe.html?second';\n };\n</script>\n```", "```js\n<script>\n globalThis.iframeName = location.search.slice(1);\n</script>\n```", "```js\n{ // Global scope (scope of *all* scripts)\n\n // (Global variables)\n\n { // Scope of module 1\n \u00b7\u00b7\u00b7\n }\n { // Scope of module 2\n \u00b7\u00b7\u00b7\n }\n // (More module scopes)\n}\n```", "```js\n<script>\n const one = 1;\n var two = 2;\n</script>\n<script>\n // All scripts share the same top-level scope:\n console.log(one); // 1\n console.log(two); // 2\n\n // Not all declarations create properties of the global object:\n console.log(globalThis.one); // undefined\n console.log(globalThis.two); // 2\n</script>\n```", "```js\n<script>\n let myGlobalVariable = 1; // declarative environment record\n globalThis.myGlobalVariable = 2; // object environment record\n\n console.log(myGlobalVariable); // 1 (declarative record wins)\n console.log(globalThis.myGlobalVariable); // 2\n</script>\n```", "```js\n// Changes the location of the current document:\nvar location = 'https://example.com';\n\n// Shadows window.location, doesn\u2019t change it:\nlet location = 'https://example.com';\n```"]