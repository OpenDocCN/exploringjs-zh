["```js\n// Creating an Array\nconst arr = ['a', 'b', 'c']; // Array literal\nassert.deepEqual(\n arr,\n [ // Array literal\n 'a',\n 'b',\n 'c', // trailing commas are ignored\n ]\n);\n\n// Reading elements\nassert.equal(\n arr[0], 'a' // negative indices don\u2019t work\n);\nassert.equal(\n arr.at(-1), 'c' // negative indices work\n);\n\n// Writing an element\narr[0] = 'x';\nassert.deepEqual(\n arr, ['x', 'b', 'c']\n);\n```", "```js\nconst arr = ['a', 'b', 'c'];\nassert.equal(\n arr.length, 3 // number of elements\n);\narr.length = 1; // removing elements\nassert.deepEqual(\n arr, ['a']\n);\narr[arr.length] = 'b'; // adding an element\nassert.deepEqual(\n arr, ['a', 'b']\n);\n```", "```js\nconst arr = ['a', 'b'];\n\narr.push('c'); // adding an element\nassert.deepEqual(\n arr, ['a', 'b', 'c']\n);\n\n// Pushing Arrays (used as arguments via spreading (...)):\narr.push(...['d', 'e']);\nassert.deepEqual(\n arr, ['a', 'b', 'c', 'd', 'e']\n);\n```", "```js\nconst arr1 = ['a', 'b'];\nconst arr2 = ['c'];\nassert.deepEqual(\n [...arr1, ...arr2, 'd', 'e'],\n ['a', 'b', 'c', 'd', 'e']\n);\n```", "```js\n// Destructive \u2013 affects everyone referring to the Array:\nconst arr1 = ['a', 'b', 'c'];\narr1.length = 0;\nassert.deepEqual(\n arr1, []\n);\n\n// Non-destructive \u2013 does not affect others referring to the Array:\nlet arr2 = ['a', 'b', 'c'];\narr2 = [];\nassert.deepEqual(\n arr2, []\n);\n```", "```js\nconst arr = ['a', 'b', 'c'];\nfor (const value of arr) {\n console.log(value);\n}\n\n// Output:\n// 'a'\n// 'b'\n// 'c'\n```", "```js\nconst arr = ['a', 'b', 'c'];\nfor (const [index, value] of arr.entries()) {\n console.log(index, value);\n}\n\n// Output:\n// 0, 'a'\n// 1, 'b'\n// 2, 'c'\n```", "```js\nconst four = 4;\n\n// Empty Array that we\u2019ll fill later\nassert.deepEqual(\n new Array(four),\n [ , , , ,] // four holes; last comma is ignored\n);\n\n// An Array filled with a primitive value\nassert.deepEqual(\n new Array(four).fill(0),\n [0, 0, 0, 0]\n);\n\n// An Array filled with objects\n// Why not .fill()? We\u2019d get single object, shared multiple times.\nassert.deepEqual(\n Array.from({length: four}, () => ({})),\n [{}, {}, {}, {}]\n);\n\n// A range of integers\nassert.deepEqual(\n Array.from({length: four}, (_, i) => i),\n [0, 1, 2, 3]\n);\n```", "```js\n> ['\u25a0','\u25cf','\u25b2'].slice(1, 3)\n['\u25cf','\u25b2']\n> ['\u25a0','\u25cf','\u25a0'].filter(x => x==='\u25a0') \n['\u25a0','\u25a0']\n\n> ['\u25b2','\u25cf'].map(x => x+x)\n['\u25b2\u25b2','\u25cf\u25cf']\n> ['\u25b2','\u25cf'].flatMap(x => [x,x])\n['\u25b2','\u25b2','\u25cf','\u25cf']\n```", "```js\n// .filter(): remove non-destructively\nconst arr1 = ['\u25a0','\u25cf','\u25b2'];\nassert.deepEqual(\n arr1.filter((_, index) => index !== 1),\n ['\u25a0','\u25b2']\n);\nassert.deepEqual(\n arr1, ['\u25a0','\u25cf','\u25b2'] // unchanged\n);\n\n// .splice(): remove destructively\nconst arr2 = ['\u25a0','\u25cf','\u25b2'];\narr2.splice(1, 1); // start at 1, delete 1 element\nassert.deepEqual(\n arr2, ['\u25a0','\u25b2'] // changed\n);\n```", "```js\n> ['\u25a0','\u25cf','\u25b2'].some(x => x==='\u25cf')\ntrue\n> ['\u25a0','\u25cf','\u25b2'].every(x => x==='\u25cf')\nfalse\n\n> ['\u25a0','\u25cf','\u25b2'].join('-')\n'\u25a0-\u25cf-\u25b2'\n\n> ['\u25a0','\u25b2'].reduce((result,x) => result+x, '\u25cf')\n'\u25cf\u25a0\u25b2'\n> ['\u25a0','\u25b2'].reduceRight((result,x) => result+x, '\u25cf')\n'\u25cf\u25b2\u25a0'\n```", "```js\n// .reverse() changes and returns `arr`\nconst arr = ['\u25a0','\u25cf','\u25b2'];\nassert.deepEqual(\n arr.reverse(), arr\n);\n// `arr` was changed:\nassert.deepEqual(\n arr, ['\u25b2','\u25cf','\u25a0']\n);\n\n// .fill() works the same way:\nassert.deepEqual(\n ['\u25a0','\u25cf','\u25b2'].fill('\u25cf'),\n ['\u25cf','\u25cf','\u25cf']\n);\n```", "```js\n// By default, string representations of the Array elements\n// are sorted lexicographically:\nassert.deepEqual(\n [200, 3, 10].sort(),\n [10, 200, 3]\n);\n\n// Sorting can be customized via a callback:\nassert.deepEqual(\n [200, 3, 10].sort((a,b) => a - b), // sort numerically\n [ 3, 10, 200 ]\n);\n```", "```js\n> ['\u25a0','\u25cf','\u25a0'].includes('\u25a0')\ntrue\n> ['\u25a0','\u25cf','\u25a0'].indexOf('\u25a0')\n0\n> ['\u25a0','\u25cf','\u25a0'].lastIndexOf('\u25a0')\n2\n> ['\u25a0','\u25cf','\u25a0'].find(x => x==='\u25a0')\n'\u25a0'\n> ['\u25a0','\u25cf','\u25a0'].findIndex(x => x==='\u25a0')\n0\n```", "```js\n// Adding and removing at the start\nconst arr1 = ['\u25a0','\u25cf'];\narr1.unshift('\u25b2');\nassert.deepEqual(\n arr1, ['\u25b2','\u25a0','\u25cf']\n);\narr1.shift();\nassert.deepEqual(\n arr1, ['\u25a0','\u25cf']\n);\n\n// Adding and removing at the end\nconst arr2 = ['\u25a0','\u25cf'];\narr2.push('\u25b2');\nassert.deepEqual(\n arr2, ['\u25a0','\u25cf','\u25b2']\n);\narr2.pop();\nassert.deepEqual(\n arr2, ['\u25a0','\u25cf']\n);\n```", "```js\nconst arr = ['a', 'b', 'c'];\n```", "```js\nconst arr = [\n 'a',\n 'b',\n 'c',\n];\n```", "```js\nconst arr = ['a', 'b', 'c'];\nassert.equal(arr[0], 'a');\n```", "```js\nconst arr = ['a', 'b', 'c'];\narr[0] = 'x';\nassert.deepEqual(arr, ['x', 'b', 'c']);\n```", "```js\n> const arr = ['a', 'b'];\n> arr.length\n2\n```", "```js\n> arr[arr.length] = 'c';\n> arr\n[ 'a', 'b', 'c' ]\n> arr.length\n3\n```", "```js\n> arr.push('d');\n> arr\n[ 'a', 'b', 'c', 'd' ]\n```", "```js\n> arr.length = 1;\n> arr\n[ 'a' ]\n```", "```js\n> const arr = ['a', 'b', 'c'];\n> arr.slice(-1)\n[ 'c' ]\n> arr.slice(arr.length - 1)\n[ 'c' ]\n```", "```js\n> ['a', 'b', 'c'].at(0)\n'a'\n> ['a', 'b', 'c'].at(-1)\n'c'\n```", "```js\nconst arr = ['a', 'b', 'c'];\n\narr[-1] = 'non-element property';\n// The Array elements didn\u2019t change:\nassert.deepEqual(\n Array.from(arr), // copy just the Array elements\n ['a', 'b', 'c']\n);\n\nassert.equal(\n arr[-1], 'non-element property'\n);\n```", "```js\nconst arr = ['a', 'b', 'c'];\narr.length = 0;\nassert.deepEqual(arr, []);\n```", "```js\nlet arr = ['a', 'b', 'c'];\narr = [];\nassert.deepEqual(arr, []);\n```", "```js\n> const iterable = ['b', 'c'];\n> ['a', ...iterable, 'd']\n[ 'a', 'b', 'c', 'd' ]\n```", "```js\nconst original = ['a', 'b', 'c'];\n\nconst copy = [...original];\n\nconst iterable = original.keys();\nassert.deepEqual(\n [...iterable], [0, 1, 2]\n);\n```", "```js\nconst copy2 = Array.from(original);\n\nassert.deepEqual(\n Array.from(original.keys()), [0, 1, 2]\n);\n```", "```js\nconst arr1 = ['a', 'b'];\nconst arr2 = ['c', 'd'];\n\nconst concatenated = [...arr1, ...arr2, 'e'];\nassert.deepEqual(\n concatenated,\n ['a', 'b', 'c', 'd', 'e']);\n```", "```js\n> [...'abc'] // strings are iterable\n[ 'a', 'b', 'c' ]\n> [...123]\nTypeError: 123 is not iterable\n> [...undefined]\nTypeError: undefined is not iterable\n```", "```js\nconst arr = ['a', 'b'];\nassert.deepEqual(\n Array.from(arr.keys()), // (A)\n [0, 1]);\n```", "```js\nconst arr = ['a', 'b'];\narr.prop = true;\n\nassert.deepEqual(\n Object.keys(arr),\n ['0', '1', 'prop']);\n```", "```js\nconst arr = ['a', 'b'];\nassert.deepEqual(\n Array.from(arr.entries()),\n [[0, 'a'], [1, 'b']]);\n```", "```js\n> [] instanceof Array\ntrue\n> Array.isArray([])\ntrue\n```", "```js\n> typeof []\n'object'\n```", "```js\nfor (const element of ['a', 'b']) {\n console.log(element);\n}\n// Output:\n// 'a'\n// 'b'\n```", "```js\nfor (const element of ['a', 'b'].keys()) {\n console.log(element);\n}\n// Output:\n// 0\n// 1\n```", "```js\nfor (const [index, element] of ['a', 'b'].entries()) {\n console.log(index, element);\n}\n// Output:\n// 0, 'a'\n// 1, 'b'\n```", "```js\n// If we omit .length, it is interpreted as 0\nassert.deepEqual(\n Array.from({}),\n []);\n\nassert.deepEqual(\n Array.from({length:2, 0:'a', 1:'b'}),\n [ 'a', 'b' ]);\n```", "```js\ninterface ArrayLike<T> {\n length: number;\n [n: number]: T;\n}\n```", "```js\n// Get an Array-like collection from a web browser\u2019s DOM\nconst domCollection = document.querySelectorAll('a');\n\n// Alas, the collection is missing many Array methods\nassert.equal('map' in domCollection, false);\n\n// Solution: convert it to an Array\nconst arr = [...domCollection];\nassert.deepEqual(\n arr.map(x => x.href),\n ['https://2ality.com', 'https://exploringjs.com']);\n```", "```js\n.from<T>(iterable: Iterable<T> | ArrayLike<T>): T[]\n```", "```js\n> Array.from(new Set(['a', 'b']))\n[ 'a', 'b' ]\n> Array.from({length: 2, 0:'a', 1:'b'})\n[ 'a', 'b' ]\n```", "```js\n.from<T, U>(\n iterable: Iterable<T> | ArrayLike<T>,\n mapFunc: (v: T, i: number) => U,\n thisArg?: any)\n : U[]\n```", "```js\n> Array.from(new Set(['a', 'b']), x => x + x)\n[ 'aa', 'bb' ]\n```", "```js\n> new Array(3)\n[ , , ,]\n```", "```js\n> new Array(3).fill(0)\n[0, 0, 0]\n```", "```js\nconst arr = new Array(3).fill({});\narr[0].prop = true;\nassert.deepEqual(\n arr, [\n {prop: true},\n {prop: true},\n {prop: true},\n ]);\n```", "```js\n> new Array(3).fill(0)\n[0, 0, 0]\n```", "```js\n> Array.from({length: 3}, () => ({}))\n[{}, {}, {}]\n```", "```js\nfunction createRange(start, end) {\n return Array.from({length: end-start}, (_, i) => i+start);\n}\nassert.deepEqual(\n createRange(2, 5),\n [2, 3, 4]);\n```", "```js\n/** Returns an iterable */\nfunction createRange(end) {\n return new Array(end).keys();\n}\nassert.deepEqual(\n Array.from(createRange(4)),\n [0, 1, 2, 3]);\n```", "```js\nfunction initMultiArray(...dimensions) {\n function initMultiArrayRec(dimIndex) {\n if (dimIndex >= dimensions.length) {\n return 0;\n } else {\n const dim = dimensions[dimIndex];\n const arr = [];\n for (let i=0; i<dim; i++) {\n arr.push(initMultiArrayRec(dimIndex+1));\n }\n return arr;\n }\n }\n return initMultiArrayRec(0);\n}\n\nconst arr = initMultiArray(4, 3, 2);\narr[3][2][1] = 'X'; // last in each dimension\nassert.deepEqual(arr, [\n [ [ 0, 0 ], [ 0, 0 ], [ 0, 0 ] ],\n [ [ 0, 0 ], [ 0, 0 ], [ 0, 0 ] ],\n [ [ 0, 0 ], [ 0, 0 ], [ 0, 0 ] ],\n [ [ 0, 0 ], [ 0, 0 ], [ 0, 'X' ] ],\n]);\n```", "```js\nconst arr = ['a', 'b'];\narr.prop = 123;\nassert.deepEqual(\n Object.keys(arr),\n ['0', '1', 'prop']); // (A)\n\nassert.equal(arr[0], 'a');  // (B)\nassert.equal(arr['0'], 'a'); // (C)\n```", "```js\nToString(ToUint32(str)) === str\n```", "```js\nconst arr = [];\narr.prop = true;\narr[1] = 'b';\narr[0] = 'a';\n\nassert.deepEqual(\n Object.keys(arr),\n ['0', '1', 'prop']);\n```", "```js\nassert.equal(arr.length, 2);\nassert.deepEqual(\n Array.from(arr.keys()), [0, 1]);\nassert.deepEqual(\n Array.from(arr.entries()), [[0, 'a'], [1, 'b']]);\n```", "```js\nconst arr = [];\narr[0] = 'a';\narr[2] = 'c';\n\nassert.deepEqual(Object.keys(arr), ['0', '2']); // (A)\n\nassert.equal(0 in arr, true); // element\nassert.equal(1 in arr, false); // hole\n```", "```js\nconst arr = ['a', , 'c'];\n\nassert.deepEqual(Object.keys(arr), ['0', '2']);\n```", "```js\nconst arr = ['a', 'b', 'c'];\nassert.deepEqual(Object.keys(arr), ['0', '1', '2']);\ndelete arr[1];\nassert.deepEqual(Object.keys(arr), ['0', '2']);\n```", "```js\n> ['a',,'b'].filter(x => true)\n[ 'a', 'b' ]\n```", "```js\n> ['a', ,'a'].every(x => x === 'a')\ntrue\n```", "```js\n> ['a',,'b'].map(x => 'c')\n[ 'c', , 'c' ]\n```", "```js\n> Array.from(['a',,'b'], x => x)\n[ 'a', undefined, 'b' ]\n> Array.from(['a',,'b'].entries())\n[[0, 'a'], [1, undefined], [2, 'b']]\n```", "```js\n> Array.from(['a',,'b'].keys())\n[ 0, 1, 2 ]\n> Object.keys(['a',,'b'])\n[ '0', '2' ]\n```", "```js\nconst arr1 = ['a', 'b'];\narr1.unshift('x', 'y'); // prepend single elements\nassert.deepEqual(arr1, ['x', 'y', 'a', 'b']);\n\nconst arr2 = ['a', 'b'];\narr2.unshift(...['x', 'y']); // prepend Array\nassert.deepEqual(arr2, ['x', 'y', 'a', 'b']);\n```", "```js\nconst arr1 = ['a', 'b'];\nassert.deepEqual(\n ['x', 'y', ...arr1], // prepend single elements\n ['x', 'y', 'a', 'b']);\nassert.deepEqual(arr1, ['a', 'b']); // unchanged!\n\nconst arr2 = ['a', 'b'];\nassert.deepEqual(\n [...['x', 'y'], ...arr2], // prepend Array\n ['x', 'y', 'a', 'b']);\nassert.deepEqual(arr2, ['a', 'b']); // unchanged!\n```", "```js\nconst arr1 = ['a', 'b'];\narr1.push('x', 'y'); // append single elements\nassert.deepEqual(arr1, ['a', 'b', 'x', 'y']);\n\nconst arr2 = ['a', 'b'];\narr2.push(...['x', 'y']); // (A) append Array\nassert.deepEqual(arr2, ['a', 'b', 'x', 'y']);\n```", "```js\nconst arr1 = ['a', 'b'];\nassert.deepEqual(\n [...arr1, 'x', 'y'], // append single elements\n ['a', 'b', 'x', 'y']);\nassert.deepEqual(arr1, ['a', 'b']); // unchanged!\n\nconst arr2 = ['a', 'b'];\nassert.deepEqual(\n [...arr2, ...['x', 'y']], // append Array\n ['a', 'b', 'x', 'y']);\nassert.deepEqual(arr2, ['a', 'b']); // unchanged!\n```", "```js\n// Destructively remove first element:\nconst arr1 = ['a', 'b', 'c'];\nassert.equal(arr1.shift(), 'a');\nassert.deepEqual(arr1, ['b', 'c']);\n\n// Destructively remove last element:\nconst arr2 = ['a', 'b', 'c'];\nassert.equal(arr2.pop(), 'c');\nassert.deepEqual(arr2, ['a', 'b']);\n\n// Remove one or more elements anywhere:\nconst arr3 = ['a', 'b', 'c', 'd'];\nassert.deepEqual(arr3.splice(1, 2), ['b', 'c']);\nassert.deepEqual(arr3, ['a', 'd']);\n```", "```js\nconst arr1 = ['a', 'b', 'c'];\n// Ignore first element, extract remaining elements\nconst [, ...arr2] = arr1;\n\nassert.deepEqual(arr2, ['b', 'c']);\nassert.deepEqual(arr1, ['a', 'b', 'c']); // unchanged!\n```", "```js\ncallback: (value: T, index: number, array: Array<T>) => boolean\n```", "```js\n    > ['a', 'b', 'c'].map(x => x + x)\n    [ 'aa', 'bb', 'cc' ]\n    ```", "```js\n    > ['a', 'bb', 'ccc'].find(str => str.length >= 2)\n    'bb'\n    ```", "```js\n> [6, -5, 8].find(x => x < 0)\n-5\n> [6, 5, 8].find(x => x < 0)\nundefined\n```", "```js\n> [6, -5, 8].findIndex(x => x < 0)\n1\n> [6, 5, 8].findIndex(x => x < 0)\n-1\n```", "```js\nfunction findIndex(arr, callback) {\n for (const [i, x] of arr.entries()) {\n if (callback(x, i, arr)) {\n return i;\n }\n }\n return -1;\n}\n```", "```js\n> [1, 2, 3].map(x => x * 3)\n[ 3, 6, 9 ]\n> ['how', 'are', 'you'].map(str => str.toUpperCase())\n[ 'HOW', 'ARE', 'YOU' ]\n> [true, true, true].map((_x, index) => index)\n[ 0, 1, 2 ]\n```", "```js\nfunction map(arr, mapFunc) {\n const result = [];\n for (const [i, x] of arr.entries()) {\n result.push(mapFunc(x, i, arr));\n }\n return result;\n}\n```", "```js\n.flatMap<U>(\n callback: (value: T, index: number, array: T[]) => U|Array<U>,\n thisValue?: any\n): U[]\n```", "```js\n> ['a', 'b', 'c'].flatMap(x => [x,x])\n[ 'a', 'a', 'b', 'b', 'c', 'c' ]\n> ['a', 'b', 'c'].flatMap(x => [x])\n[ 'a', 'b', 'c' ]\n> ['a', 'b', 'c'].flatMap(x => [])\n[]\n```", "```js\nfunction processArray(arr, callback) {\n return arr.map(x => {\n try {\n return { value: callback(x) };\n } catch (e) {\n return { error: e };\n }\n });\n}\n```", "```js\nconst results = processArray([1, -5, 6], throwIfNegative);\nassert.deepEqual(results, [\n { value: 1 },\n { error: new Error('Illegal value: -5') },\n { value: 6 },\n]);\n\nfunction throwIfNegative(value) {\n if (value < 0) {\n throw new Error('Illegal value: '+value);\n }\n return value;\n}\n```", "```js\nconst values = results.flatMap(\n result => result.value ? [result.value] : []);\nassert.deepEqual(values, [1, 6]);\n\nconst errors = results.flatMap(\n result => result.error ? [result.error] : []);\nassert.deepEqual(errors, [new Error('Illegal value: -5')]);\n```", "```js\n> stringsToCodePoints(['many', 'a', 'moon'])\n['m', 'a', 'n', 'y', 'a', 'm', 'o', 'o', 'n']\n```", "```js\nfunction stringsToCodePoints(strs) {\n return strs.flatMap(str => Array.from(str));\n}\n```", "```js\nfunction flatMap(arr, mapFunc) {\n const result = [];\n for (const [index, elem] of arr.entries()) {\n const x = mapFunc(elem, index, arr);\n // We allow mapFunc() to return non-Arrays\n if (Array.isArray(x)) {\n result.push(...x);\n } else {\n result.push(x);\n }\n }\n return result;\n}\n```", "```js\n> [-1, 2, 5, -7, 6].filter(x => x >= 0)\n[ 2, 5, 6 ]\n> ['a', 'b', 'c', 'd'].filter((_x,i) => (i%2)===0)\n[ 'a', 'c' ]\n```", "```js\nfunction filter(arr, filterFunc) {\n const result = [];\n for (const [i, x] of arr.entries()) {\n if (filterFunc(x, i, arr)) {\n result.push(x);\n }\n }\n return result;\n}\n```", "```js\n.reduce<U>(\n callback: (accumulator: U, element: T, index: number, array: T[]) => U,\n init?: U)\n : U\n```", "```js\nconst accumulator_0 = callback(init, arr[0]);\nconst accumulator_1 = callback(accumulator_0, arr[1]);\nconst accumulator_2 = callback(accumulator_1, arr[2]);\n// Etc.\n```", "```js\nfunction addAll(arr) {\n const startSum = 0;\n const callback = (sum, element) => sum + element;\n return arr.reduce(callback, startSum);\n}\nassert.equal(addAll([1,  2, 3]), 6); // (A)\nassert.equal(addAll([7, -4, 2]), 5);\n```", "```js\ncallback(0, 1) --> 1\ncallback(1, 2) --> 3\ncallback(3, 3) --> 6\n```", "```js\nfunction addAll(arr) {\n let sum = 0;\n for (const element of arr) {\n sum = sum + element;\n }\n return sum;\n}\n```", "```js\nconst NOT_FOUND = -1;\nfunction indexOf(arr, searchValue) {\n return arr.reduce(\n (result, elem, index) => {\n if (result !== NOT_FOUND) {\n // We have already found something: don\u2019t change anything\n return result;\n } else if (elem === searchValue) {\n return index;\n } else {\n return NOT_FOUND;\n }\n },\n NOT_FOUND);\n}\nassert.equal(indexOf(['a', 'b', 'c'], 'b'), 1);\nassert.equal(indexOf(['a', 'b', 'c'], 'x'), -1);\n```", "```js\nfunction double(inArr) {\n return inArr.reduce(\n (outArr, element) => {\n outArr.push(element * 2);\n return outArr;\n },\n []);\n}\nassert.deepEqual(\n double([1, 2, 3]),\n [2, 4, 6]);\n```", "```js\nfunction double(inArr) {\n return inArr.reduce(\n // Don\u2019t change `outArr`, return a fresh Array\n (outArr, element) => [...outArr, element * 2],\n []);\n}\nassert.deepEqual(\n double([1, 2, 3]),\n [2, 4, 6]);\n```", "```js\nsort(compareFunc?: (a: T, b: T) => number): this\n```", "```js\n> [200, 3, 10].sort()\n[ 10, 200, 3 ]\n```", "```js\n> ['pie', 'cookie', '\u00e9clair', 'Pie', 'Cookie', '\u00c9clair'].sort()\n[ 'Cookie', 'Pie', 'cookie', 'pie', '\u00c9clair', '\u00e9clair' ]\n```", "```js\n> const arr = ['a', 'c', 'b'];\n> arr.sort() === arr\ntrue\n> arr\n[ 'a', 'b', 'c' ]\n```", "```js\nfunction compareNumbers(a, b) {\n if (a < b) {\n return -1;\n } else if (a === b) {\n return 0;\n } else {\n return 1;\n }\n}\nassert.deepEqual(\n [200, 3, 10].sort(compareNumbers),\n [3, 10, 200]);\n```", "```js\n> [200, 3, 10].sort((a,b) => a - b)\n[ 3, 10, 200 ]\n```", "```js\nconst arr = [ {age: 200}, {age: 3}, {age: 10} ];\nassert.deepEqual(\n arr.sort((obj1, obj2) => obj1.age - obj2.age),\n [{ age: 3 }, { age: 10 }, { age: 200 }] );\n```", "```js\n// Trailing commas are always ignored.\n// Therefore: number of commas = number of holes\nassert.deepEqual(new Array(3), [,,,]);\n```", "```js\n    > Array.from(new Set(['a', 'b'])) // iterable\n    [ 'a', 'b' ]\n    > Array.from({length: 2, 0:'a', 1:'b'}) // Array-like object\n    [ 'a', 'b' ]\n    ```", "```js\n    class MyArray extends Array {}\n\n    assert.equal(\n     MyArray.of('a', 'b') instanceof MyArray, true);\n    ```", "```js\n    > ['a', 'b', 'c'].at(0)\n    'a'\n    > ['a', 'b', 'c'].at(-1)\n    'c'\n    ```", "```js\n    > ['a'].concat('b', ['c', 'd'])\n    [ 'a', 'b', 'c', 'd' ]\n    ```", "```js\n    > ['a', 'b', 'c', 'd'].copyWithin(0, 2, 4)\n    [ 'c', 'd', 'c', 'd' ]\n    ```", "```js\n    > Array.from(['a', 'b'].entries())\n    [ [ 0, 'a' ], [ 1, 'b' ] ]\n    ```", "```js\n    > [1, 2, 3].every(x => x > 0)\n    true\n    > [1, -2, 3].every(x => x > 0)\n    false\n    ```", "```js\n    > [0, 1, 2].fill('a')\n    [ 'a', 'a', 'a' ]\n    ```", "```js\n    > [1, -2, 3].filter(x => x > 0)\n    [ 1, 3 ]\n    ```", "```js\n    > [1, -2, 3].find(x => x < 0)\n    -2\n    > [1, 2, 3].find(x => x < 0)\n    undefined\n    ```", "```js\n    > [1, -2, 3].findIndex(x => x < 0)\n    1\n    > [1, 2, 3].findIndex(x => x < 0)\n    -1\n    ```", "```js\n    > [ 1,2, [3,4], [[5,6]] ].flat(0) // no change\n    [ 1, 2, [3,4], [[5,6]] ]\n\n    > [ 1,2, [3,4], [[5,6]] ].flat(1)\n    [1, 2, 3, 4, [5,6]]\n\n    > [ 1,2, [3,4], [[5,6]] ].flat(2)\n    [1, 2, 3, 4, 5, 6]\n    ```", "```js\n    > ['a', 'b', 'c'].flatMap(x => [x,x])\n    [ 'a', 'a', 'b', 'b', 'c', 'c' ]\n    > ['a', 'b', 'c'].flatMap(x => [x])\n    [ 'a', 'b', 'c' ]\n    > ['a', 'b', 'c'].flatMap(x => [])\n    []\n    ```", "```js\n    ['a', 'b'].forEach((x, i) => console.log(x, i))\n\n    // Output:\n    // 'a', 0\n    // 'b', 1\n    ```", "```js\n    > [0, 1, 2].includes(1)\n    true\n    > [0, 1, 2].includes(5)\n    false\n    ```", "```js\n    > ['a', 'b', 'a'].indexOf('a')\n    0\n    > ['a', 'b', 'a'].indexOf('a', 1)\n    2\n    > ['a', 'b', 'a'].indexOf('c')\n    -1\n    ```", "```js\n    > ['a', 'b', 'c'].join('##')\n    'a##b##c'\n    > ['a', 'b', 'c'].join()\n    'a,b,c'\n    ```", "```js\n    > Array.from(['a', 'b'].keys())\n    [ 0, 1 ]\n    ```", "```js\n    > ['a', 'b', 'a'].lastIndexOf('a')\n    2\n    > ['a', 'b', 'a'].lastIndexOf('a', 1)\n    0\n    > ['a', 'b', 'a'].lastIndexOf('c')\n    -1\n    ```", "```js\n    > [1, 2, 3].map(x => x * 2)\n    [ 2, 4, 6 ]\n    > ['a', 'b', 'c'].map((x, i) => i)\n    [ 0, 1, 2 ]\n    ```", "```js\n    > const arr = ['a', 'b', 'c'];\n    > arr.pop()\n    'c'\n    > arr\n    [ 'a', 'b' ]\n    ```", "```js\n    > const arr = ['a', 'b'];\n    > arr.push('c', 'd')\n    4\n    > arr\n    [ 'a', 'b', 'c', 'd' ]\n    ```", "```js\n    > const arr = ['x'];\n    > arr.push(...['y', 'z'])\n    3\n    > arr\n    [ 'x', 'y', 'z' ] \n    ```", "```js\n    const accumulator_0 = callback(init, arr[0]);\n    const accumulator_1 = callback(accumulator_0, arr[1]);\n    const accumulator_2 = callback(accumulator_1, arr[2]);\n    // Etc.\n    ```", "```js\n    > [1, 2, 3].reduce((accu, x) => accu + x, 0)\n    6\n    > [1, 2, 3].reduce((accu, x) => accu + String(x), '')\n    '123'\n    ```", "```js\n    > [1, 2, 3].reduceRight((accu, x) => accu + String(x), '')\n    '321'\n    ```", "```js\n    > const arr = ['a', 'b', 'c'];\n    > arr.reverse()\n    [ 'c', 'b', 'a' ]\n    > arr\n    [ 'c', 'b', 'a' ]\n    ```", "```js\n    > const arr = ['a', 'b', 'c'];\n    > arr.shift()\n    'a'\n    > arr\n    [ 'b', 'c' ]\n    ```", "```js\n    > ['a', 'b', 'c', 'd'].slice(1, 3)\n    [ 'b', 'c' ]\n    > ['a', 'b'].slice() // shallow copy\n    [ 'a', 'b' ]\n    ```", "```js\n    > ['a', 'b', 'c'].slice(-2)\n    [ 'b', 'c' ]\n    ```", "```js\n    > [1, 2, 3].some(x => x < 0)\n    false\n    > [1, -2, 3].some(x => x < 0)\n    true\n    ```", "```js\n    > ['pie', 'cookie', '\u00e9clair', 'Pie', 'Cookie', '\u00c9clair'].sort()\n    [ 'Cookie', 'Pie', 'cookie', 'pie', '\u00c9clair', '\u00e9clair' ]\n    > [200, 3, 10].sort()\n    [ 10, 200, 3 ]\n    ```", "```js\n    > [200, 3, 10].sort((a, b) => a - b)\n    [ 3, 10, 200 ]\n    ```", "```js\n    > const arr = ['a', 'b', 'c', 'd'];\n    > arr.splice(1, 2, 'x', 'y')\n    [ 'b', 'c' ]\n    > arr\n    [ 'a', 'x', 'y', 'd' ]\n    ```", "```js\n    > ['a', 'b', 'c'].splice(-2, 2)\n    [ 'b', 'c' ]\n    ```", "```js\n    > [1, 2, 3].toString()\n    '1,2,3'\n    > ['1', '2', '3'].toString()\n    '1,2,3'\n    > [].toString()\n    ''\n    ```", "```js\n    > const arr = ['c', 'd'];\n    > arr.unshift('e', 'f')\n    4\n    > arr\n    [ 'e', 'f', 'c', 'd' ]\n    ```", "```js\n    > Array.from(['a', 'b'].values())\n    [ 'a', 'b' ]\n    ```"]