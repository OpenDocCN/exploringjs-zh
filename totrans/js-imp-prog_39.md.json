["```js\nconst buf = new ArrayBuffer(4); // length in bytes\n // buf is initialized with zeros\n```", "```js\n// Argument: Typed Array or Array-like object\nconst ta1 = new Uint8Array([0, 1, 2]);\n\nconst ta2 = Uint8Array.of(0, 1, 2);\n\nconst ta3 = new Uint8Array(3); // length of Typed Array\nta3[0] = 0;\nta3[1] = 1;\nta3[2] = 2;\n\nassert.deepEqual(ta1, ta2);\nassert.deepEqual(ta1, ta3);\n```", "```js\nconst typedArray = new Int16Array(2); // 2 elements\nassert.equal(typedArray.length, 2);\n\nassert.deepEqual(\n typedArray.buffer, new ArrayBuffer(4)); // 4 bytes\n```", "```js\nconst typedArray = new Int16Array(2);\n\nassert.equal(typedArray[1], 0); // initialized with 0\ntypedArray[1] = 72;\nassert.equal(typedArray[1], 72);\n```", "```js\nconst dataView = new DataView(new ArrayBuffer(4));\nassert.equal(dataView.getInt16(0), 0);\nassert.equal(dataView.getUint8(0), 0);\ndataView.setUint8(0, 5);\n```", "```js\nfunction setAndGet(typedArray, value) {\n typedArray[0] = value;\n return typedArray[0];\n}\n```", "```js\nconst uint8 = new Uint8Array(1);\n\n// Highest value of range\nassert.equal(setAndGet(uint8, 255), 255);\n// Overflow\nassert.equal(setAndGet(uint8, 256), 0);\n\n// Lowest value of range\nassert.equal(setAndGet(uint8, 0), 0);\n// Underflow\nassert.equal(setAndGet(uint8, -1), 255);\n```", "```js\nconst int8 = new Int8Array(1);\n\n// Highest value of range\nassert.equal(setAndGet(int8, 127), 127);\n// Overflow\nassert.equal(setAndGet(int8, 128), -128);\n\n// Lowest value of range\nassert.equal(setAndGet(int8, -128), -128);\n// Underflow\nassert.equal(setAndGet(int8, -129), 127);\n```", "```js\nconst uint8c = new Uint8ClampedArray(1);\n\n// Highest value of range\nassert.equal(setAndGet(uint8c, 255), 255);\n// Overflow\nassert.equal(setAndGet(uint8c, 256), 255);\n\n// Lowest value of range\nassert.equal(setAndGet(uint8c, 0), 0);\n// Underflow\nassert.equal(setAndGet(uint8c, -1), 0);\n```", "```js\n.from<S>(\n source: Iterable<S>|ArrayLike<S>,\n mapfn?: S => ElementType, thisArg?: any)\n : \u00abElementType\u00bbArray\n```", "```js\nassert.deepEqual(\n Uint16Array.from([0, 1, 2]),\n Uint16Array.of(0, 1, 2));\n```", "```js\nassert.deepEqual(\n Uint16Array.from(Uint8Array.of(0, 1, 2)),\n Uint16Array.of(0, 1, 2));\n```", "```js\nassert.deepEqual(\n Uint16Array.from({0:0, 1:1, 2:2, length: 3}),\n Uint16Array.of(0, 1, 2));\n```", "```js\nconst typedArray = Int8Array.of(127, 126, 125);\nassert.deepEqual(\n Int16Array.from(typedArray, x => x * 2),\n Int16Array.of(254, 252, 250));\n\nassert.deepEqual(\n Int16Array.from(typedArray).map(x => x * 2),\n Int16Array.of(254, 252, 250)); // OK\nassert.deepEqual(\n Int16Array.from(typedArray.map(x => x * 2)),\n Int16Array.of(-2, -4, -6)); // wrong\n```", "```js\nassert.deepEqual(\n Int8Array.from(Int16Array.of(254, 252, 250), x => x / 2),\n Int8Array.of(127, 126, 125));\n\nassert.deepEqual(\n Int8Array.from(Int16Array.of(254, 252, 250).map(x => x / 2)),\n Int8Array.of(127, 126, 125)); // OK\nassert.deepEqual(\n Int8Array.from(Int16Array.of(254, 252, 250)).map(x => x / 2),\n Int8Array.of(-1, -2, -3)); // wrong\n```", "```js\nconst ui8 = Uint8Array.of(0, 1, 2);\nfor (const byte of ui8) {\n console.log(byte);\n}\n// Output:\n// 0\n// 1\n// 2\n```", "```js\n    const ta = new Uint16Array(2); // 2 elements\n    assert.deepEqual(\n     ta.buffer, new ArrayBuffer(4)); // 4 bytes\n    ```", "```js\n    assert.deepEqual(new Uint8Array(4), Uint8Array.of(0, 0, 0, 0));\n    ```", "```js\n        const ta = new Uint8Array(1);\n\n        ta[0] = 257;\n        assert.equal(ta[0], 1); // 257 % 256 (overflow)\n\n        ta[0] = '2';\n        assert.equal(ta[0], 2);\n        ```", "```js\n        const ta = new Uint8Array(1);\n        assert.equal(ta[0], 0);\n        assert.equal(typeof ta[0], 'number');\n        ```", "```js\nconst ta1 = new Uint8Array([0, 1, 2]);\nconst ta2 = Uint8Array.from([0, 1, 2]);\nassert.deepEqual(ta1, ta2);\n```", "```js\nassert.deepEqual(\n [...Uint8Array.of(0, 1, 2)], [0, 1, 2]\n);\nassert.deepEqual(\n Array.from(Uint8Array.of(0, 1, 2)), [0, 1, 2]\n);\n```", "```js\n.set(typedArray: TypedArray, offset=0): void\n.set(arrayLike: ArrayLike<number>, offset=0): void\n```", "```js\nfunction concatenate(resultConstructor, ...arrays) {\n let totalLength = 0;\n for (const arr of arrays) {\n totalLength += arr.length;\n }\n const result = new resultConstructor(totalLength);\n let offset = 0;\n for (const arr of arrays) {\n result.set(arr, offset);\n offset += arr.length;\n }\n return result;\n}\nassert.deepEqual(\n concatenate(Uint8Array, Uint8Array.of(1, 2), [3, 4]),\n Uint8Array.of(1, 2, 3, 4));\n```", "```js\n    const arr = [6, 7];\n    arr[-1] = 5;\n    assert.deepEqual(\n     Object.keys(arr), ['0', '1', '-1']);\n    ```", "```js\n    const tarr = Uint8Array.of(6, 7);\n    tarr[-1] = 5;\n    assert.deepEqual(\n     Object.keys(tarr), ['0', '1']);\n    ```", "```js\n    const ui8 = Uint8Array.of(0, 1, 2);\n    assert.deepEqual(ui8.slice(-1), Uint8Array.of(2));\n    ```", "```js\n    const dataView = new DataView(new ArrayBuffer(4));\n    assert.throws(\n     () => dataView.getUint8(-1),\n     {\n     name: 'RangeError',\n     message: 'Offset is outside the bounds of the DataView',\n     });\n    ```", "```js\nnew ArrayBuffer(length: number)\n```", "```js\n    assert.deepEqual(\n     Uint16Array.from([0, 1, 2]),\n     Uint16Array.of(0, 1, 2));\n    ```", "```js\n    assert.deepEqual(\n     Int16Array.from(Int8Array.of(127, 126, 125), x => x * 2),\n     Int16Array.of(254, 252, 250));\n    ```", "```js\n    assert.deepEqual(\n     Int16Array.of(-1234, 5, 67),\n     new Int16Array([-1234, 5, 67]) );\n    ```", "```js\n    length * \u00abElementType\u00bbArray.BYTES_PER_ELEMENT\n    ```", "```js\n    > Uint8Array.BYTES_PER_ELEMENT\n    1\n    > Int16Array.BYTES_PER_ELEMENT\n    2\n    > Float64Array.BYTES_PER_ELEMENT\n    8\n    ```"]