["```js\nconst str1 = 'Don\\'t say \"goodbye\"'; // string literal\nconst str2 = \"Don't say \\\"goodbye\\\"\"; // string literals\nassert.equal(\n `As easy as ${123}!`, // template literal\n 'As easy as 123!',\n);\n```", "```js\nassert.equal(\n String.raw`\\ \\n\\t`, // (A)\n '\\\\  \\\\n\\\\t',\n);\n```", "```js\n> String(undefined)\n'undefined'\n> String(null)\n'null'\n> String(123.45)\n'123.45'\n> String(true)\n'true'\n```", "```js\n// There is no type for characters;\n// reading characters produces strings:\nconst str3 = 'abc';\nassert.equal(\n str3[2], 'c' // no negative indices allowed\n);\nassert.equal(\n str3.at(-1), 'c' // negative indices allowed\n);\n\n// Copying more than one character:\nassert.equal(\n 'abc'.slice(0, 2), 'ab'\n);\n```", "```js\nassert.equal(\n 'I bought ' + 3 + ' apples',\n 'I bought 3 apples',\n);\n\nlet str = '';\nstr += 'I bought ';\nstr += 3;\nstr += ' apples';\nassert.equal(\n str, 'I bought 3 apples',\n);\n```", "```js\nassert.equal(\n 'A'.length, 1\n);\nassert.equal(\n '\ud83d\ude42'.length, 2\n);\n```", "```js\n> 'abca'.includes('a')\ntrue\n> 'abca'.startsWith('ab')\ntrue\n> 'abca'.endsWith('ca')\ntrue\n\n> 'abca'.indexOf('a')\n0\n> 'abca'.lastIndexOf('a')\n3\n```", "```js\nassert.deepEqual(\n 'a, b,c'.split(/, ?/),\n ['a', 'b', 'c']\n);\nassert.equal(\n ['a', 'b', 'c'].join(', '),\n 'a, b, c'\n);\n```", "```js\n> '7'.padStart(3, '0')\n'007'\n> 'yes'.padEnd(6, '!')\n'yes!!!'\n\n> '\\t abc\\n '.trim()\n'abc'\n> '\\t abc\\n '.trimStart()\n'abc\\n '\n> '\\t abc\\n '.trimEnd()\n'\\t abc'\n```", "```js\n> '*'.repeat(5)\n'*****'\n> '= b2b ='.toUpperCase()\n'= B2B ='\n> '\u0391\u0392\u0393'.toLowerCase()\n'\u03b1\u03b2\u03b3'\n```", "```js\nconst str1 = 'abc';\nconst str2 = \"abc\";\nassert.equal(str1, str2);\n```", "```js\nassert.equal(\n 'She said: \"Let\\'s go!\"',\n \"She said: \\\"Let's go!\\\"\");\n```", "```js\nconst str = 'abc';\n\n// Reading a JavaScript character at a given index\nassert.equal(str[1], 'b');\n\n// Counting the JavaScript characters in a string:\nassert.equal(str.length, 3);\n```", "```js\n> '\ud83d\ude42'.length\n2\n```", "```js\nassert.equal(3 + ' times ' + 4, '3 times 4');\n```", "```js\nlet str = ''; // must be `let`!\nstr += 'Say it';\nstr += ' one more';\nstr += ' time';\n\nassert.equal(str, 'Say it one more time');\n```", "```js\nassert.equal(String(undefined), 'undefined');\nassert.equal(String(null), 'null');\n\nassert.equal(String(false), 'false');\nassert.equal(String(true), 'true');\n\nassert.equal(String(123.45), '123.45');\n```", "```js\n> String(false)\n'false'\n> Boolean('false')\ntrue\n```", "```js\n> String({a: 1})\n'[object Object]'\n```", "```js\n> String(['a', 'b'])\n'a,b'\n> String(['a', ['b']])\n'a,b'\n\n> String([1, 2])\n'1,2'\n> String(['1', '2'])\n'1,2'\n\n> String([true])\n'true'\n> String(['true'])\n'true'\n> String(true)\n'true'\n```", "```js\n> String(function f() {return 4})\n'function f() {return 4}'\n```", "```js\nconst obj = {\n toString() {\n return 'hello';\n }\n};\n\nassert.equal(String(obj), 'hello');\n```", "```js\n> JSON.stringify({a: 1})\n'{\"a\":1}'\n> JSON.stringify(['a', ['b']])\n'[\"a\",[\"b\"]]'\n```", "```js\nconsole.log(JSON.stringify({first: 'Jane', last: 'Doe'}, null, 2));\n```", "```js\n{\n  \"first\": \"Jane\",\n  \"last\": \"Doe\"\n}\n```", "```js\n< <= > >=\n```", "```js\n> 'A' < 'B' // ok\ntrue\n> 'a' < 'B' // not ok\nfalse\n> '\u00e4' < 'b' // not ok\nfalse\n```", "```js\n// 3 code points, 3 JavaScript characters:\nassert.equal('abc'.length, 3);\n\n// 1 code point, 2 JavaScript characters:\nassert.equal('\ud83d\ude42'.length, 2);\n```", "```js\n> '\\u{1F642}'\n'\ud83d\ude42'\n```", "```js\n> String.fromCodePoint(0x1F642)\n'\ud83d\ude42'\n```", "```js\n> '\ud83d\ude42'.codePointAt(0).toString(16)\n'1f642'\n```", "```js\nconst str = '\ud83d\ude42a';\nassert.equal(str.length, 3);\n\nfor (const codePointChar of str) {\n console.log(codePointChar);\n}\n\n// Output:\n// '\ud83d\ude42'\n// 'a'\n```", "```js\n> Array.from('\ud83d\ude42a')\n[ '\ud83d\ude42', 'a' ]\n```", "```js\n> Array.from('\ud83d\ude42a').length\n2\n> '\ud83d\ude42a'.length\n3\n```", "```js\n> '\\uD83D\\uDE42'\n'\ud83d\ude42'\n```", "```js\n> String.fromCharCode(0xD83D) + String.fromCharCode(0xDE42)\n'\ud83d\ude42'\n```", "```js\n> '\ud83d\ude42'.charCodeAt(0).toString(16)\n'd83d'\n```", "```js\n> 'He\\x6C\\x6Co'\n'Hello'\n```", "```js\n    > 'foo.txt'.endsWith('.txt')\n    true\n    > 'abcde'.endsWith('cd', 4)\n    true\n    ```", "```js\n    > 'abc'.includes('b')\n    true\n    > 'abc'.includes('b', 2)\n    false\n    ```", "```js\n    > 'abab'.indexOf('a')\n    0\n    > 'abab'.indexOf('a', 1)\n    2\n    > 'abab'.indexOf('c')\n    -1\n    ```", "```js\n    > 'abab'.lastIndexOf('ab', 2)\n    2\n    > 'abab'.lastIndexOf('ab', 1)\n    0\n    > 'abab'.lastIndexOf('ab')\n    2\n    ```", "```js\n    interface RegExpMatchArray extends Array<string> {\n     index: number;\n     input: string;\n     groups: undefined | {\n     [key: string]: string\n     };\n    }\n    ```", "```js\n    > 'ababb'.match(/a(b+)/)\n    { 0: 'ab', 1: 'b', index: 0, input: 'ababb', groups: undefined }\n    > 'ababb'.match(/a(?<foo>b+)/)\n    { 0: 'ab', 1: 'b', index: 0, input: 'ababb', groups: { foo: 'b' } }\n    > 'abab'.match(/x/)\n    null\n    ```", "```js\n    > 'ababb'.match(/a(b+)/g)\n    [ 'ab', 'abb' ]\n    > 'ababb'.match(/a(?<foo>b+)/g)\n    [ 'ab', 'abb' ]\n    > 'abab'.match(/x/g)\n    null\n    ```", "```js\n    > 'a2b'.search(/[0-9]/)\n    1\n    > 'a2b'.search('[0-9]')\n    1\n    ```", "```js\n    > '.gitignore'.startsWith('.')\n    true\n    > 'abcde'.startsWith('bc', 1)\n    true\n    ```", "```js\n    > 'abc'.slice(1, 3)\n    'bc'\n    > 'abc'.slice(1)\n    'bc'\n    > 'abc'.slice(-2)\n    'bc'\n    ```", "```js\n    > 'abc'.at(0)\n    'a'\n    > 'abc'.at(-1)\n    'c'\n    ```", "```js\n    > 'a | b | c'.split('|')\n    [ 'a ', ' b ', ' c' ]\n    ```", "```js\n    > 'a : b : c'.split(/ *: */)\n    [ 'a', 'b', 'c' ]\n    > 'a : b : c'.split(/( *):( *)/)\n    [ 'a', ' ', ' ', 'b', ' ', ' ', 'c' ]\n    ```", "```js\n    > '\ud83d\ude42X\ud83d\ude42'.split('')\n    [ '\\uD83D', '\\uDE42', 'X', '\\uD83D', '\\uDE42' ]\n    ```", "```js\n    > Array.from('\ud83d\ude42X\ud83d\ude42')\n    [ '\ud83d\ude42', 'X', '\ud83d\ude42' ]\n    ```", "```js\n    > 'ab'.concat('cd', 'ef', 'gh')\n    'abcdefgh'\n    ```", "```js\n    > '#'.padEnd(2)\n    '# '\n    > 'abc'.padEnd(2)\n    'abc'\n    > '#'.padEnd(5, 'abc')\n    '#abca'\n    ```", "```js\n    > '#'.padStart(2)\n    ' #'\n    > 'abc'.padStart(2)\n    'abc'\n    > '#'.padStart(5, 'abc')\n    'abca#'\n    ```", "```js\n    > '*'.repeat()\n    ''\n    > '*'.repeat(3)\n    '***'\n    ```", "```js\n    > 'x.x.'.replaceAll('.', '#')\n    'x#x#'\n    > 'x.x.'.replaceAll(/./g, '#')\n    '####'\n    > 'x.x.'.replaceAll(/./, '#')\n    TypeError: String.prototype.replaceAll called with\n    a non-global RegExp argument\n    ```", "```js\n    > 'a 1995-12 b'.replaceAll(/([0-9]{4})-([0-9]{2})/g, '|$2|')\n    'a |12| b'\n    > 'a 1995-12 b'.replaceAll(/([0-9]{4})-([0-9]{2})/g, '|$&|')\n    'a |1995-12| b'\n    > 'a 1995-12 b'.replaceAll(/([0-9]{4})-([0-9]{2})/g, '|$`|')\n    'a |a | b'\n    ```", "```js\n    assert.equal(\n     'a 1995-12 b'.replaceAll(\n     /(?<year>[0-9]{4})-(?<month>[0-9]{2})/g, '|$<month>|'),\n     'a |12| b');\n    ```", "```js\n    const regexp = /([0-9]{4})-([0-9]{2})/g;\n    const replacer = (all, year, month) => '|' + all + '|';\n    assert.equal(\n     'a 1995-12 b'.replaceAll(regexp, replacer),\n     'a |1995-12| b');\n    ```", "```js\n    const regexp = /(?<year>[0-9]{4})-(?<month>[0-9]{2})/g;\n    const replacer = (...args) => {\n     const groups=args.pop();\n     return '|' + groups.month + '|';\n    };\n    assert.equal(\n     'a 1995-12 b'.replaceAll(regexp, replacer),\n     'a |12| b');\n    ```", "```js\n    > 'x.x.'.replace('.', '#')\n    'x#x.'\n    > 'x.x.'.replace(/./, '#')\n    '#.x.'\n    ```", "```js\n    > '-a2b-'.toUpperCase()\n    '-A2B-'\n    > '\u03b1\u03b2\u03b3'.toUpperCase()\n    '\u0391\u0392\u0393'\n    ```", "```js\n    > '-A2B-'.toLowerCase()\n    '-a2b-'\n    > '\u0391\u0392\u0393'.toLowerCase()\n    '\u03b1\u03b2\u03b3'\n    ```", "```js\n    > '\\r\\n#\\t  '.trim()\n    '#'\n    > '  abc  '.trim()\n    'abc'\n    ```", "```js\n    > '  abc  '.trimEnd()\n    '  abc'\n    ```", "```js\n    > '  abc  '.trimStart()\n    'abc  '\n    ```"]