["```js\n// single-line comment\n\n/*\nComment with\nmultiple lines\n*/\n```", "```js\ntrue\nfalse\n```", "```js\n1.141\n-123\n```", "```js\n17n\n-49n\n```", "```js\n'abc'\n\"abc\"\n`String with interpolated values: ${256} and ${true}`\n```", "```js\nassert.equal(7 + 1, 8);\n```", "```js\n// Printing a value to standard out (another method call)\nconsole.log('Hello!');\n\n// Printing error information to standard error\nconsole.error('Something went wrong!');\n```", "```js\n// Operators for booleans\nassert.equal(true && false, false); // And\nassert.equal(true || false, true); // Or\n\n// Operators for numbers\nassert.equal(3 + 4, 7);\nassert.equal(5 - 1, 4);\nassert.equal(3 * 4, 12);\nassert.equal(10 / 4, 2.5);\n\n// Operators for bigints\nassert.equal(3n + 4n, 7n);\nassert.equal(5n - 1n, 4n);\nassert.equal(3n * 4n, 12n);\nassert.equal(10n / 4n, 2n);\n\n// Operators for strings\nassert.equal('a' + 'b', 'ab');\nassert.equal('I see ' + 3 + ' monkeys', 'I see 3 monkeys');\n\n// Comparison operators\nassert.equal(3 < 4, true);\nassert.equal(3 <= 4, true);\nassert.equal('abc' === 'abc', true);\nassert.equal('abc' !== 'def', true);\n```", "```js\n// Declaring and initializing x (immutable binding):\nconst x = 8;\n\n// Would cause a TypeError:\n// x = 9;\n```", "```js\n// Declaring y (mutable binding):\nlet y;\n\n// We can assign a different value to y:\ny = 3 * 5;\n\n// Declaring and initializing z:\nlet z = 3 * 5;\n```", "```js\n// add1() has the parameters a and b\nfunction add1(a, b) {\n return a + b;\n}\n// Calling function add1()\nassert.equal(add1(5, 2), 7);\n```", "```js\nconst add2 = (a, b) => { return a + b };\n// Calling function add2()\nassert.equal(add2(5, 2), 7);\n\n// Equivalent to add2:\nconst add3 = (a, b) => a + b;\n```", "```js\n// An arrow function whose body is a code block\n(a, b) => { return a + b }\n\n// An arrow function whose body is an expression\n(a, b) => a + b\n```", "```js\n// Creating a plain object via an object literal\nconst obj = {\n first: 'Jane', // property\n last: 'Doe', // property\n getFullName() { // property (method)\n return this.first + ' ' + this.last;\n },\n};\n\n// Getting a property value\nassert.equal(obj.first, 'Jane');\n// Setting a property value\nobj.first = 'Janey';\n\n// Calling the method\nassert.equal(obj.getFullName(), 'Janey Doe');\n```", "```js\n// Creating an Array via an Array literal\nconst arr = ['a', 'b', 'c'];\nassert.equal(arr.length, 3);\n\n// Getting an Array element\nassert.equal(arr[1], 'b');\n// Setting an Array element\narr[1] = '\u03b2';\n\n// Adding an element to an Array:\narr.push('d');\n\nassert.deepEqual(\n arr, ['a', '\u03b2', 'c', 'd']);\n```", "```js\nif (x < 0) {\n x = -x;\n}\n```", "```js\nconst arr = ['a', 'b'];\nfor (const element of arr) {\n console.log(element);\n}\n// Output:\n// 'a'\n// 'b'\n```", "```js\nfile-tools.mjs\nmain.mjs\n```", "```js\nexport function isTextFilePath(filePath) {\n return filePath.endsWith('.txt');\n}\n```", "```js\n// Import whole module as namespace object `path`\nimport * as path from 'path';\n// Import a single export of module file-tools.mjs\nimport {isTextFilePath} from './file-tools.mjs';\n```", "```js\nclass Person {\n constructor(name) {\n this.name = name;\n }\n describe() {\n return `Person named ${this.name}`;\n }\n static logNames(persons) {\n for (const person of persons) {\n console.log(person.name);\n }\n }\n}\n\nclass Employee extends Person {\n constructor(name, title) {\n super(name);\n this.title = title;\n }\n describe() {\n return super.describe() +\n ` (${this.title})`;\n }\n}\n\nconst jane = new Employee('Jane', 'CTO');\nassert.equal(\n jane.describe(),\n 'Person named Jane (CTO)');\n```", "```js\nfunction throwsException() {\n throw new Error('Problem!');\n}\n\nfunction catchesException() {\n try {\n throwsException();\n } catch (err) {\n assert.ok(err instanceof Error);\n assert.equal(err.message, 'Problem!');\n }\n}\n```", "```js\nconst if = 123;\n // SyntaxError: Unexpected token if\n```", "```js\n> const obj = { if: 123 };\n> obj.if\n123\n```", "```js\narr.map((_x, i) => i)\n```", "```js\nclass ValueWrapper {\n constructor(value) {\n this._value = value;\n }\n}\n```", "```js\nconst x = 123;\nfunc();\n```", "```js\nwhile (false) {\n // \u00b7\u00b7\u00b7\n} // no semicolon\n\nfunction func() {\n // \u00b7\u00b7\u00b7\n} // no semicolon\n```", "```js\n// Function declaration followed by empty statement:\nfunction func() {\n // \u00b7\u00b7\u00b7\n};\n```", "```js\nconst \u03b5 = 0.0001;\nconst \u0441\u0442\u0440\u043e\u043a\u0430 = '';\nlet _tmp = 0;\nconst $foo2 = true;\n```", "```js\nlet myStr;\nif (myBool) {\n myStr = 'Yes';\n} else {\n myStr = 'No';\n}\n```", "```js\nfunction twice(x) {\n return x + x;\n}\n```", "```js\nlet myStr = (myBool ? 'Yes' : 'No');\n```", "```js\n> 'ab' + 'cd'\n'abcd'\n> Number('123')\n123\n> true || false\ntrue\n```", "```js\n    function max(x, y) {\n     if (x > y) {\n     return x;\n     } else {\n     return y;\n     }\n    }\n    ```", "```js\n    console.log('ab' + 'cd', Number('123'));\n    ```", "```js\nfunction f() {\n console.log(bar()); // bar() is expression\n bar(); // bar(); is (expression) statement \n}\n```", "```js\nfunction id(x) {\n return x;\n}\n```", "```js\nconst id = function me(x) {\n return x;\n};\n```", "```js\nconst obj = {};\n```", "```js\n{\n}\n```", "```js\n(function (x) { console.log(x) })('abc');\n\n// Output:\n// 'abc'\n```", "```js\n    function (x) { console.log(x) }\n    ```", "```js\nconst x = 3;\nsomeFunction('abc');\ni++;\n```", "```js\nfunction foo() {\n // \u00b7\u00b7\u00b7\n}\nif (y > 0) {\n // \u00b7\u00b7\u00b7\n}\n```", "```js\nconst func = () => {}; // semicolon!\n```", "```js\nwhile (condition)\n statement\n```", "```js\nwhile (a > 0) a--;\n```", "```js\nwhile (a > 0) {\n a--;\n}\n```", "```js\nwhile (processNextItem() > 0);\n```", "```js\nwhile (processNextItem() > 0) {}\n```", "```js\nreturn\n{\n first: 'jane'\n};\n```", "```js\nreturn;\n{\n first: 'jane';\n}\n;\n```", "```js\na = b + c\n(d + e).print()\n```", "```js\na = b + c(d + e).print();\n```", "```js\na = b\n/hi/g.exec(c).map(d)\n```", "```js\na = b / hi / g.exec(c).map(d);\n```", "```js\nsomeFunction()\n['ul', 'ol'].map(x => x + x)\n```", "```js\nconst propKey = ('ul','ol'); // comma operator\nassert.equal(propKey, 'ol');\n\nsomeFunction()[propKey].map(x => x + x);\n```", "```js\n'use strict';\n```", "```js\nfunction functionInStrictMode() {\n 'use strict';\n}\n```", "```js\nfunction sloppyFunc() {\n undeclaredVar1 = 123;\n}\nsloppyFunc();\n// Created global variable `undeclaredVar1`:\nassert.equal(undeclaredVar1, 123);\n```", "```js\nfunction strictFunc() {\n 'use strict';\n undeclaredVar2 = 123;\n}\nassert.throws(\n () => strictFunc(),\n {\n name: 'ReferenceError',\n message: 'undeclaredVar2 is not defined',\n });\n```", "```js\nfunction strictFunc() {\n 'use strict';\n {\n function foo() { return 123 }\n }\n return foo(); // ReferenceError\n}\nassert.throws(\n () => strictFunc(),\n {\n name: 'ReferenceError',\n message: 'foo is not defined',\n });\n```", "```js\nfunction sloppyFunc() {\n {\n function foo() { return 123 }\n }\n return foo(); // works\n}\nassert.equal(sloppyFunc(), 123);\n```", "```js\nfunction strictFunc() {\n 'use strict';\n true.prop = 1; // TypeError\n}\nassert.throws(\n () => strictFunc(),\n {\n name: 'TypeError',\n message: \"Cannot create property 'prop' on boolean 'true'\",\n });\n```", "```js\nfunction sloppyFunc() {\n true.prop = 1; // fails silently\n return true.prop;\n}\nassert.equal(sloppyFunc(), undefined);\n```"]