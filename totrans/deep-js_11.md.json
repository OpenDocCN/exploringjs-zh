["```js\nfunction logElements(arr) {\n while (arr.length > 0) {\n console.log(arr.shift());\n }\n}\n\nfunction main() {\n const arr = ['banana', 'orange', 'apple'];\n\n console.log('Before sorting:');\n logElements(arr);\n\n arr.sort(); // changes arr\n\n console.log('After sorting:');\n logElements(arr); // (A)\n}\nmain();\n\n// Output:\n// 'Before sorting:'\n// 'banana'\n// 'orange'\n// 'apple'\n// 'After sorting:'\n```", "```js\nfunction logElements(arr) {\n while (arr.length > 0) {\n console.log(arr.shift());\n }\n}\n```", "```js\nfunction logElements(arr) {\n arr = [...arr]; // defensive copy\n while (arr.length > 0) {\n console.log(arr.shift());\n }\n}\n```", "```js\nfunction main() {\n const arr = ['banana', 'orange', 'apple'];\n\n console.log('Before sorting:');\n logElements(arr);\n\n arr.sort(); // changes arr\n\n console.log('After sorting:');\n logElements(arr); // (A)\n}\nmain();\n\n// Output:\n// 'Before sorting:'\n// 'banana'\n// 'orange'\n// 'apple'\n// 'After sorting:'\n// 'apple'\n// 'banana'\n// 'orange'\n```", "```js\nclass StringBuilder {\n _data = [];\n add(str) {\n this._data.push(str);\n }\n getParts() {\n // We expose internals without copying them:\n return this._data; // (A)\n }\n toString() {\n return this._data.join('');\n }\n}\n```", "```js\nconst sb1 = new StringBuilder();\nsb1.add('Hello');\nsb1.add(' world!');\nassert.equal(sb1.toString(), 'Hello world!');\n```", "```js\nconst sb2 = new StringBuilder();\nsb2.add('Hello');\nsb2.add(' world!');\nsb2.getParts().length = 0; // (A)\nassert.equal(sb2.toString(), ''); // not OK\n```", "```js\nclass StringBuilder {\n this._data = [];\n add(str) {\n this._data.push(str);\n }\n getParts() {\n // Copy defensively\n return [...this._data]; // (A)\n }\n toString() {\n return this._data.join('');\n }\n}\n```", "```js\nconst sb = new StringBuilder();\nsb.add('Hello');\nsb.add(' world!');\nsb.getParts().length = 0;\nassert.equal(sb.toString(), 'Hello world!'); // OK\n```", "```js\nconst original = {city: 'Berlin', country: 'Germany'};\nconst copy = original;\n```", "```js\nimport {Map} from 'immutable/dist/immutable.es.js';\nconst map0 = Map([\n [false, 'no'],\n [true, 'yes'],\n]);\n\n// We create a modified version of map0:\nconst map1 = map0.set(true, 'maybe');\n\n// The modified version is different from the original:\nassert.ok(map1 !== map0);\nassert.equal(map1.equals(map0), false); // (A)\n\n// We undo the change we just made:\nconst map2 = map1.set(true, 'yes');\n\n// map2 is a different object than map0,\n// but it has the same content\nassert.ok(map2 !== map0);\nassert.equal(map2.equals(map0), true); // (B)\n```", "```js\nimport {produce} from 'immer/dist/immer.module.js';\n\nconst people = [\n {name: 'Jane', work: {employer: 'Acme'}},\n];\n\nconst modifiedPeople = produce(people, (draft) => {\n draft[0].work.employer = 'Cyberdyne';\n draft.push({name: 'John', work: {employer: 'Spectre'}});\n});\n\nassert.deepEqual(modifiedPeople, [\n {name: 'Jane', work: {employer: 'Cyberdyne'}},\n {name: 'John', work: {employer: 'Spectre'}},\n]);\nassert.deepEqual(people, [\n {name: 'Jane', work: {employer: 'Acme'}},\n]);\n```"]