- en: 17 Shell scripting recipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://exploringjs.com/nodejs-shell-scripting/ch_shell-scripting-recipes.html](https://exploringjs.com/nodejs-shell-scripting/ch_shell-scripting-recipes.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 17.1 [Interactively editing code snippets via nodemon](ch_shell-scripting-recipes.html#interactively-editing-code-snippets-via-nodemon)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 17.1.1 [nodemon](ch_shell-scripting-recipes.html#nodemon)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 17.1.2 [Trying out nodemon without installing it](ch_shell-scripting-recipes.html#trying-out-nodemon-without-installing-it)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 17.2 [Detecting if the current module is “main” (the app entry point)](ch_shell-scripting-recipes.html#detecting-if-the-current-module-is-main-the-app-entry-point)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 17.3 [Accessing files relative to the current module](ch_shell-scripting-recipes.html#accessing-files-relative-to-the-current-module)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 17.1 Interactively editing code snippets via nodemon
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section describes a trick for running a snippet of JavaScript code with
    Node.js while working on it.
  prefs: []
  type: TYPE_NORMAL
- en: 17.1.1 nodemon
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As an example, let’s assume we want to experiment with [the standard Node.js
    function `util.format()`](https://nodejs.org/api/util.html#util_util_format_format_args).
    We create the file `mysnippet.mjs`, with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How can we run `mysnippet.mjs` while we are working on it?
  prefs: []
  type: TYPE_NORMAL
- en: 'We first install [the npm package *nodemon*](https://nodemon.io):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can use it to continuously run `mysnippet.mjs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Whenever we save `mysnippet.mjs`, nodemon runs it again. That means that we
    can edit that file in an editor and see the results of our changes whenever we
    save it.
  prefs: []
  type: TYPE_NORMAL
- en: 17.1.2 Trying out nodemon without installing it
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can even try out nodemon without installing it, via [the Node.js tool npx](ch_installing-packages.html#npx):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 17.2 Detecting if the current module is “main” (the app entry point)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'See [§7.11.4 “Use case for URLs: detecting if the current module is “main”
    (the app entry point)”](ch_nodejs-path.html#detecting-if-module-is-main).'
  prefs: []
  type: TYPE_NORMAL
- en: 17.3 Accessing files relative to the current module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'See [§7.11.3 “Use case for URLs: accessing files relative to the current module”](ch_nodejs-path.html#accessing-sibling-files).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Comments](https://github.com/rauschma/nodejs-shell-scripting/issues/17)'
  prefs: []
  type: TYPE_NORMAL
