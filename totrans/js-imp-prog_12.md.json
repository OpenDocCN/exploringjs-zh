["```js\nexport function id(x) {\n return x;\n}\n```", "```js\n// npm t demos/quizzes-exercises/id_test.mjs\nsuite('id_test.mjs');\n\nimport * as assert from 'assert/strict'; // (A)\nimport {id} from './id.mjs'; // (B)\n\ntest('My test', () => { // (C)\n assert.equal(id('abc'), 'abc'); // (D)\n});\n```", "```js\nnpm t demos/quizzes-exercises/id_test.mjs\n```", "```js\nnpm test demos/quizzes-exercises/id_test.mjs\n```", "```js\ntest('divideCallback', (done) => {\n divideCallback(8, 4, (error, result) => {\n if (error) {\n done(error);\n } else {\n assert.strictEqual(result, 2);\n done();\n }\n });\n});\n```", "```js\nfunction divideCallback(x, y, callback) {\n if (y === 0) {\n callback(new Error('Division by zero'));\n } else {\n callback(null, x / y);\n }\n}\n```", "```js\ntest('dividePromise 1', () => {\n return dividePromise(8, 4)\n .then(result => {\n assert.strictEqual(result, 2);\n });\n});\n```", "```js\nfunction dividePromise(x, y) {\n return new Promise((resolve, reject) => {\n if (y === 0) {\n reject(new Error('Division by zero'));\n } else {\n resolve(x / y);\n }\n });\n}\n```", "```js\ntest('dividePromise 2', async () => {\n const result = await dividePromise(8, 4);\n assert.strictEqual(result, 2);\n // No explicit return necessary!\n});\n```"]