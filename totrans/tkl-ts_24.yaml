- en: 20 Typing functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 20 函数类型
- en: 原文：[https://exploringjs.com/tackling-ts/ch_typing-functions.html](https://exploringjs.com/tackling-ts/ch_typing-functions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/tackling-ts/ch_typing-functions.html](https://exploringjs.com/tackling-ts/ch_typing-functions.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 20.1 [Defining statically typed functions](ch_typing-functions.html#defining-statically-typed-functions)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.1 [定义静态类型函数](ch_typing-functions.html#defining-statically-typed-functions)
- en: 20.1.1 [Function declarations](ch_typing-functions.html#function-declarations)
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.1.1 [函数声明](ch_typing-functions.html#function-declarations)
- en: 20.1.2 [Arrow functions](ch_typing-functions.html#arrow-functions)
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.1.2 [箭头函数](ch_typing-functions.html#arrow-functions)
- en: 20.2 [Types for functions](ch_typing-functions.html#types-for-functions)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.2 函数类型
- en: 20.2.1 [Function type signatures](ch_typing-functions.html#function-type-signatures)
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.2.1 [函数类型签名](ch_typing-functions.html#function-type-signatures)
- en: 20.2.2 [Interfaces with call signatures](ch_typing-functions.html#call-signatures)
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.2.2 [带有调用签名的接口](ch_typing-functions.html#call-signatures)
- en: 20.2.3 [Checking if a callable value matches a function type](ch_typing-functions.html#checking-if-a-callable-value-matches-a-function-type)
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.2.3 [检查可调用值是否匹配函数类型](ch_typing-functions.html#checking-if-a-callable-value-matches-a-function-type)
- en: 20.3 [Parameters](ch_typing-functions.html#parameters)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.3 [参数](ch_typing-functions.html#parameters)
- en: 20.3.1 [When do parameters have to be type-annotated?](ch_typing-functions.html#when-do-parameters-have-to-be-type-annotated)
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.3.1 [何时必须对参数进行类型注释？](ch_typing-functions.html#when-do-parameters-have-to-be-type-annotated)
- en: 20.3.2 [Optional parameters](ch_typing-functions.html#optional-parameters-1)
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.3.2 [可选参数](ch_typing-functions.html#optional-parameters-1)
- en: 20.3.3 [Rest parameters](ch_typing-functions.html#rest-parameters-1)
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.3.3 [剩余参数](ch_typing-functions.html#rest-parameters-1)
- en: 20.3.4 [Named parameters](ch_typing-functions.html#named-parameters)
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.3.4 [命名参数](ch_typing-functions.html#named-parameters)
- en: 20.3.5 [`this` as a parameter (advanced)](ch_typing-functions.html#this-as-a-parameter-advanced)
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.3.5 [`this`作为参数（高级）](ch_typing-functions.html#this-as-a-parameter-advanced)
- en: 20.4 [Overloading (advanced)](ch_typing-functions.html#overloading-advanced)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.4 [重载（高级）](ch_typing-functions.html#overloading-advanced)
- en: 20.4.1 [Overloading function declarations](ch_typing-functions.html#overloading-function-declarations)
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.4.1 [重载函数声明](ch_typing-functions.html#overloading-function-declarations)
- en: 20.4.2 [Overloading via interfaces](ch_typing-functions.html#overloading-via-interfaces)
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.4.2 [通过接口进行重载](ch_typing-functions.html#overloading-via-interfaces)
- en: 20.4.3 [Overloading on string parameters (event handling etc.)](ch_typing-functions.html#overloading-on-string-parameters)
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.4.3 [基于字符串参数的重载（事件处理等）](ch_typing-functions.html#overloading-on-string-parameters)
- en: 20.4.4 [Overloading methods](ch_typing-functions.html#overloading-methods)
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.4.4 [重载方法](ch_typing-functions.html#overloading-methods)
- en: 20.5 [Assignability (advanced)](ch_typing-functions.html#assignability)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.5 [可赋值性（高级）](ch_typing-functions.html#assignability)
- en: 20.5.1 [The rules for assignability](ch_typing-functions.html#the-rules-for-assignability)
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.5.1 [可赋值性规则](ch_typing-functions.html#the-rules-for-assignability)
- en: 20.5.2 [Consequences of the assignment rules for functions](ch_typing-functions.html#consequences-of-the-assignment-rules-for-functions)
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.5.2 [函数赋值规则的后果](ch_typing-functions.html#consequences-of-the-assignment-rules-for-functions)
- en: 20.6 [Further reading and sources of this chapter](ch_typing-functions.html#further-reading-and-sources-of-this-chapter)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20.6 [进一步阅读和本章的来源](ch_typing-functions.html#further-reading-and-sources-of-this-chapter)
- en: '* * *'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This chapter explores static typing for functions in TypeScript.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '本章探讨了TypeScript中函数的静态类型。 '
- en: '![](../Images/65d35c0a2478236e12cc4321e1b02db6.png)  **in this chapter, “function”
    means “function or method or constructor”**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/65d35c0a2478236e12cc4321e1b02db6.png)  **在本章中，“函数”指的是“函数或方法或构造函数”**'
- en: In this chapter, most things that are said about functions (especially w.r.t.
    parameter handling), also apply to methods and constructors.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，关于函数的大部分内容（特别是参数处理方面）也适用于方法和构造函数。
- en: 20.1 Defining statically typed functions
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 20.1 定义静态类型函数
- en: 20.1.1 Function declarations
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.1.1 函数声明
- en: 'This is an example of a function declaration in TypeScript:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是TypeScript中函数声明的一个例子：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Parameters: If the compiler option `--noImplicitAny` is on (which it is if
    `--strict` is on), then the type of each parameter must be either inferrable or
    explicitly specified. (We’ll take a closer look at inference later.) In this case,
    no inference is possible, which is why `str` and `times` have type annotations.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数：如果编译器选项`--noImplicitAny`打开（如果`--strict`打开），则每个参数的类型必须是可推断的或明确指定的。（我们稍后会更仔细地看一下推断。）在这种情况下，无法进行推断，这就是为什么`str`和`times`有类型注释的原因。
- en: 'Return value: By default, the return type of functions is inferred. That is
    usually good enough. In this case, we opted to explicitly specify that `repeat1()`
    has the return type `string` (last type annotation in line A).'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回值：默认情况下，函数的返回类型是推断的。通常这已经足够好了。在这种情况下，我们选择明确指定`repeat1()`的返回类型为`string`（A行中的最后一个类型注释）。
- en: 20.1.2 Arrow functions
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.1.2 箭头函数
- en: 'The arrow function version of `repeat1()` looks as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`repeat1()`的箭头函数版本如下所示：'
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this case, we can also use an expression body:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们也可以使用表达式体：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 20.2 Types for functions
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 20.2 函数类型
- en: 20.2.1 Function type signatures
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.2.1 函数类型签名
- en: 'We can define types for functions via function type signatures:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过函数类型签名为函数定义类型：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The name of this type of function is `Repeat`. Among others, it matches all
    functions with:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的函数名为`Repeat`。它匹配所有具有以下特征的函数：
- en: Two parameters whose types are `string` and `number`. We need to name parameters
    in function type signatures, but the names are ignored when checking if two function
    types are compatible.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个类型分别为`string`和`number`的参数。我们需要在函数类型签名中命名参数，但在检查两个函数类型是否兼容时，名称会被忽略。
- en: The return type `string`. Note that this time, the type is separated by an arrow
    and can’t be omitted.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '返回类型为`string`。请注意，这次类型是由箭头分隔的，不能省略。 '
- en: This type matches more functions. We’ll learn which ones, when we explore the
    rules for [*assignability*](ch_typing-functions.html#assignability) later in this
    chapter.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型匹配更多的函数。我们将在本章后面探讨[*可赋值性*](ch_typing-functions.html#assignability)的规则时学习到更多信息。
- en: 20.2.2 Interfaces with call signatures
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.2.2 具有调用签名的接口
- en: 'We can also use interfaces to define function types:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用接口来定义函数类型：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Note:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：
- en: The interface member in line A is a *call signature*. It looks similar to a
    method signature, but doesn’t have a name.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: A行中的接口成员是*调用签名*。它看起来类似于方法签名，但没有名称。
- en: The type of the result is separated by a colon (not an arrow) and can’t be omitted.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果的类型由冒号（而不是箭头）分隔，并且不能被省略。
- en: 'On one hand, interfaces are more verbose. On the other hand, they let us specify
    properties of functions (which is rare, but does happen):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一方面，接口更冗长。另一方面，它们让我们指定函数的属性（这很少见，但确实会发生）：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can also specify properties via an intersection type (`&`) of a function
    signature type and an object literal type:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过函数签名类型和对象字面类型的交集类型（`&`）来指定属性：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 20.2.3 Checking if a callable value matches a function type
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.2.3 检查可调用值是否与函数类型匹配
- en: 'As an example, consider this scenario: A library exports the following function
    type.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下情景：一个库导出以下函数类型。
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We want to define a function whose type is compatible with `StringPredicate`.
    And we want to check immediately if that’s indeed the case (vs. finding out later
    when we use it for the first time).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要定义一个类型与`StringPredicate`兼容的函数。并且我们希望立即检查是否确实如此（而不是在第一次使用时才发现）。
- en: 20.2.3.1 Checking arrow functions
  id: totrans-62
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 20.2.3.1 检查箭头函数
- en: 'If we declare a variable via `const`, we can perform the check via a type annotation:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们通过`const`声明一个变量，我们可以通过类型注释进行检查：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note that we don’t need to specify the type of parameter `str` because TypeScript
    can use `StringPredicate` to infer it.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们不需要指定参数`str`的类型，因为TypeScript可以使用`StringPredicate`来推断它。
- en: 20.2.3.2 Checking function declarations (simple)
  id: totrans-66
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 20.2.3.2 检查函数声明（简单）
- en: 'Checking function declarations is more complicated:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 检查函数声明更加复杂：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 20.2.3.3 Checking function declarations (extravagant)
  id: totrans-69
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 20.2.3.3 检查函数声明（奢侈的）
- en: 'The following solution is slightly over the top (i.e., don’t worry if you don’t
    fully understand it), but it demonstrates several advanced features:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下解决方案有点过头（即，如果你不完全理解也不要担心），但它演示了几个高级特性：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Parameters: We use `Parameters<>` to extract a tuple with the parameter types.
    The three dots declare a rest parameter, which collects all parameters in a tuple/Array.
    `[str]` destructures that tuple. (More on rest parameters later in this chapter.)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数：我们使用`Parameters<>`来提取具有参数类型的元组。三个点声明了一个剩余参数，它收集元组/数组中的所有参数。`[str]`对该元组进行解构。（本章后面将更多介绍剩余参数。）
- en: 'Return value: We use `ReturnType<>` to extract the return type.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回值：我们使用`ReturnType<>`来提取返回类型。
- en: 20.3 Parameters
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 20.3 参数
- en: 20.3.1 When do parameters have to be type-annotated?
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.3.1 何时必须对参数进行类型注释？
- en: 'Recap: If `--noImplicitAny` is switched on (`--strict` switches it on), the
    type of each parameter must either be inferrable or explicitly specified.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾：如果打开了`--noImplicitAny`（`--strict`会打开它），则每个参数的类型必须是可推断的或明确指定的。
- en: 'In the following example, TypeScript can’t infer the type of `str` and we must
    specify it:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，TypeScript无法推断`str`的类型，我们必须指定它：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In line A, TypeScript can use the type `StringMapFunction` to infer the type
    of `str` and we don’t need to add a type annotation:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在A行，TypeScript可以使用类型`StringMapFunction`来推断`str`的类型，我们不需要添加类型注释：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here, TypeScript can use the type of `.map()` to infer the type of `str`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，TypeScript可以使用`.map()`的类型来推断`str`的类型：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This is the type of `.map()`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`.map()`的类型：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 20.3.2 Optional parameters
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.3.2 可选参数
- en: In this section, we look at several ways in which we can allow parameters to
    be omitted.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看几种允许参数被省略的方法。
- en: '20.3.2.1 Optional parameter: `str?: string`'
  id: totrans-87
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '20.3.2.1 可选参数：`str?: string`'
- en: 'If we put a question mark after the name of a parameter, that parameter becomes
    optional and can be omitted when calling the function:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在参数名称后面加上问号，该参数就变成了可选的，在调用函数时可以省略：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This is how `trim1()` can be invoked:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`trim1()`的调用方式：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '20.3.2.2 Union type: `str: undefined|string`'
  id: totrans-92
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '20.3.2.2 联合类型：`str: undefined|string`'
- en: Externally, parameter `str` of `trim1()` has the type `string|undefined`. Therefore,
    `trim1()` is mostly equivalent to the following function.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在外部，`trim1()`的参数`str`的类型是`string|undefined`。因此，`trim1()`在大多数情况下等同于以下函数。
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The only way in which `trim2()` is different from `trim1()` is that the parameter
    can’t be omitted in function calls (line A). In other words: We must be explicit
    when omitting a parameter whose type is `undefined|T`.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`trim2()`与`trim1()`唯一不同的地方是在函数调用时不能省略参数（A行）。换句话说：当省略类型为`undefined|T`的参数时，我们必须明确指定。'
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '20.3.2.3 Parameter default value: `str = ''''`'
  id: totrans-97
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 20.3.2.3 参数默认值：`str = ''`
- en: 'If we specify a parameter default value for `str`, we don’t need to provide
    a type annotation because TypeScript can infer the type:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们为`str`指定了参数默认值，我们不需要提供类型注释，因为TypeScript可以推断类型：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note that the internal type of `str` is `string` because the default value ensures
    that it is never `undefined`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`str`的内部类型是`string`，因为默认值确保它永远不会是`undefined`。
- en: 'Let’s invoke `trim3()`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们调用`trim3()`：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 20.3.2.4 Parameter default value plus type annotation
  id: totrans-103
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 20.3.2.4 参数默认值加类型注释
- en: 'We can also specify both a type and a default value:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以同时指定类型和默认值：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 20.3.3 Rest parameters
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.3.3 剩余参数
- en: 20.3.3.1 Rest parameters with Array types
  id: totrans-107
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 20.3.3.1 具有数组类型的剩余参数
- en: 'A rest parameter collects all remaining parameters in an Array. Therefore,
    its static type is usually an Array. In the following example, `parts` is a rest
    parameter:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余参数将所有剩余参数收集到一个数组中。因此，它的静态类型通常是数组。在下面的例子中，`parts`是一个剩余参数：
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 20.3.3.2 Rest parameters with tuple types
  id: totrans-110
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 20.3.3.2 具有元组类型的剩余参数
- en: 'The next example demonstrates two features:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例演示了两个特性：
- en: We can use tuple types such as `[string, number]` for rest parameters.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用元组类型，如`[string, number]`，来作为剩余参数。
- en: We can destructure rest parameters (not just normal parameters).
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以解构剩余参数（不仅仅是普通参数）。
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`repeat1()` is equivalent to the following function:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`repeat1()`等同于以下函数：'
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 20.3.4 Named parameters
  id: totrans-117
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.3.4 命名参数
- en: '[*Named parameters*](https://exploringjs.com/impatient-js/ch_callables.html#named-parameters)
    are a popular pattern in JavaScript where an object literal is used to give each
    parameter a name. That looks as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[*命名参数*](https://exploringjs.com/impatient-js/ch_callables.html#named-parameters)是JavaScript中的一种流行模式，其中使用对象文字为每个参数指定名称。看起来如下：'
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In plain JavaScript, functions can use destructuring to access named parameter
    values. Alas, in TypeScript, we additionally have to specify a type for the object
    literal and that leads to redundancies:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在纯JavaScript中，函数可以使用解构来访问命名参数值。遗憾的是，在TypeScript中，我们还必须为对象文字指定类型，这导致了冗余：
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note that the destructuring (incl. the default value for `fillStr`) all happens
    in line A, while line B is exclusively about TypeScript.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，解构（包括`fillStr`的默认值）都发生在A行，而B行完全是关于TypeScript的。
- en: It is possible to define a separate type instead of the inlined object literal
    type that we have used in line B. However, in most cases, I prefer not to do that
    because it slightly goes against the nature of parameters which are local and
    unique per function. If you prefer having less stuff in function heads, then that’s
    OK, too.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 可以定义一个单独的类型，而不是我们在B行中使用的内联对象文字类型。但是，在大多数情况下，我更喜欢不这样做，因为它略微违反了参数的本质，参数是每个函数的本地和唯一的。如果您更喜欢在函数头中有更少的内容，那也可以。
- en: 20.3.5 `this` as a parameter (advanced)
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.3.5 `this`作为参数（高级）
- en: 'Each ordinary function always has the implicit parameter `this` – which enables
    it to be used as a method in objects. Sometimes we need to specify a type for
    `this`. There is TypeScript-only syntax for this use case: One of the parameters
    of an ordinary function can have the name `this`. Such a parameter only exists
    at compile time and disappears at runtime.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 每个普通函数始终具有隐式参数`this`-这使其可以在对象中用作方法。有时我们需要为`this`指定类型。对于这种用例，TypeScript有专门的语法：普通函数的参数之一可以命名为`this`。这样的参数仅在编译时存在，并在运行时消失。
- en: 'As an example, consider the following interface for DOM event sources (in a
    slightly simplified version):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下用于DOM事件源的接口（稍微简化版本）：
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `this` of the callback `listener` is always an instance of `EventSource`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 回调`listener`的`this`始终是`EventSource`的实例。
- en: 'The next example demonstrates that TypeScript uses the type information provided
    by the `this` parameter to check the first argument of `.call()` (line A and line
    B):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例演示了TypeScript如何使用`this`参数提供的类型信息来检查`.call()`的第一个参数（A行和B行）：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Additionally, we can’t invoke `toIsoString()` as a method of an object `obj`
    because then its receiver isn’t an instance of `Date`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们不能将`toIsoString()`作为对象`obj`的方法调用，因为它的接收器不是`Date`的实例：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 20.4 Overloading (advanced)
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 20.4 重载（高级）
- en: Sometimes a single type signature does not adequately describe how a function
    works.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 有时单个类型签名无法充分描述函数的工作原理。
- en: 20.4.1 Overloading function declarations
  id: totrans-135
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.4.1 重载函数声明
- en: 'Consider function `getFullName()` which we are calling in the following example
    (line A and line B):'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑我们在以下示例中调用的`getFullName()`函数（A行和B行）：
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'How would we implement `getFullName()`? The following implementation works
    for the two function calls in the previous example:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何实现`getFullName()`？以下实现适用于前面示例中的两个函数调用：
- en: '[PRE31]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'However, with this type signature, function calls are legal at compile time
    that produce runtime errors:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，使用这种类型签名，编译时可以产生运行时错误的函数调用是合法的：
- en: '[PRE32]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following code fixes these issues:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码修复了这些问题：
- en: '[PRE33]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'What is going on here? The type signature of `getFullName()` is overloaded:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？`getFullName()`的类型签名被重载：
- en: The actual implementation starts in line C. It is the same as in the previous
    example.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际实现从C行开始。与前面的示例相同。
- en: In line A and line B there are the two type signatures (function heads without
    bodies) that can be used for `getFullName()`. The type signature of the actual
    implementation cannot be used!
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在A行和B行中，有两个类型签名（没有主体的函数头），可以用于`getFullName()`。实际实现的类型签名不能使用！
- en: 'My advice is to only use overloading when it can’t be avoided. One alternative
    is to split an overloaded function into multiple functions with different names
    – for example:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我的建议是只有在无法避免时才使用重载。一种替代方法是将重载的函数拆分为具有不同名称的多个函数-例如：
- en: '`getFullName()`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getFullName()`'
- en: '`getFullNameViaMap()`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getFullNameViaMap()`'
- en: 20.4.2 Overloading via interfaces
  id: totrans-150
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.4.2 通过接口进行重载
- en: 'In interfaces, we can have multiple, different call signatures. That enables
    us to use the interface `GetFullName` for overloading in the following example:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在接口中，我们可以有多个不同的调用签名。这使我们能够在以下示例中使用接口`GetFullName`进行重载：
- en: '[PRE34]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 20.4.3 Overloading on string parameters (event handling etc.)
  id: totrans-153
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.4.3 基于字符串参数的重载（事件处理等）
- en: 'In the next example, we overload and use string literal types (such as `''click''`).
    That allows us to change the type of parameter `listener` depending on the value
    of parameter `type`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们通过接口进行重载并使用字符串文字类型（例如`'click'`）。这使我们能够根据参数`type`的值更改参数`listener`的类型：
- en: '[PRE35]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In this case, it is relatively difficult to get the types of the implementation
    (starting in line A) right, so that the statement in the body (line B) works.
    As a last resort, we can always use the type `any`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，相对难以正确获取实现的类型（从A行开始）以使主体中的语句（B行）起作用。作为最后的手段，我们总是可以使用类型`any`。
- en: 20.4.4 Overloading methods
  id: totrans-157
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.4.4 重载方法
- en: 20.4.4.1 Overloading concrete methods
  id: totrans-158
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 20.4.4.1 重载具体方法
- en: 'The next example demonstrates overloading of methods: Method `.add()` is overloaded.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例演示了方法的重载：方法`.add()`被重载。
- en: '[PRE36]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 20.4.4.2 Overloading interface methods
  id: totrans-161
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 20.4.4.2 重载接口方法
- en: 'The type definition for `Array.from()` is an example of an overloaded interface
    method:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`Array.from()`的类型定义是重载接口方法的一个示例：'
- en: '[PRE37]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In the first signature, the returned Array has the same element type as the
    parameter.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一个签名中，返回的数组具有与参数相同的元素类型。
- en: In the second signature, the elements of the returned Array have the same type
    as the result of `mapfn`. This version of `Array.from()` is similar to `Array.prototype.map()`.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第二个签名中，返回的数组元素与`mapfn`的结果具有相同的类型。这个版本的`Array.from()`类似于`Array.prototype.map()`。
- en: 20.5 Assignability (advanced)
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 20.5 可分配性（高级）
- en: 'In this section we look at the type compatibility rules for *assignability*:
    Can functions of type `Src` be transferred to storage locations (variables, object
    properties, parameters, etc.) of type `Trg`?'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将研究*可分配性*的类型兼容性规则：类型为`Src`的函数是否可以转移到类型为`Trg`的存储位置（变量、对象属性、参数等）？
- en: 'Understanding assignability helps us answer questions such as:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 理解可分配性有助于我们回答诸如：
- en: Given the function type signature of a formal parameter, which functions can
    be passed as actual parameters in function calls?
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在函数调用中，对于形式参数的函数类型签名，哪些函数可以作为实际参数传递？
- en: Given the function type signature of a property, which functions can be assigned
    to it?
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于属性的函数类型签名，可以分配给它的函数是哪些？
- en: 20.5.1 The rules for assignability
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.5.1 可分配性的规则
- en: In this subsection, we examine general rules for assignability (including the
    rules for functions). In the next subsection, we explore what those rules mean
    for functions.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们将研究可分配性的一般规则（包括函数的规则）。在下一小节中，我们将探讨这些规则对函数的含义。
- en: 'A type `Src` is [assignable](https://github.com/microsoft/TypeScript/blob/master/doc/spec-ARCHIVED.md#3114-assignment-compatibility)
    to a type `Trg` if one of the following conditions is true:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以下条件之一成立，则类型`Src`可以[分配](https://github.com/microsoft/TypeScript/blob/master/doc/spec-ARCHIVED.md#3114-assignment-compatibility)给类型`Trg`：
- en: '`Src` and `Trg` are identical types.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Src`和`Trg`是相同的类型。'
- en: '`Src` or `Trg` is the `any` type.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Src`或`Trg`是`any`类型。'
- en: '`Src` is a string literal type and `Trg` is the primitive type String.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Src`是一个字符串字面类型，`Trg`是原始类型String。'
- en: '`Src` is a union type and each constituent type of `Src` is assignable to `Trg`.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Src`是一个联合类型，`Src`的每个组成类型都可以分配给`Trg`。'
- en: '`Src` and `Trg` are function types and:'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Src`和`Trg`是函数类型，并且：'
- en: '`Trg` has a rest parameter or the number of required parameters of `Src` is
    less than or equal to the total number of parameters of `Trg`.'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Trg`具有剩余参数，或者`Src`的必需参数数量小于或等于`Trg`的总参数数量。'
- en: For parameters that are present in both signatures, each parameter type in `Trg`
    is assignable to the corresponding parameter type in `Src`.
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于两个签名中都存在的参数，`Trg`中的每个参数类型都可以分配给`Src`中对应的参数类型。
- en: The return type of `Trg` is `void` or the return type of `Src` is assignable
    to the return type of `Trg`.
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Trg`的返回类型是`void`，或者`Src`的返回类型可以分配给`Trg`的返回类型。'
- en: (Remaining conditions omitted.)
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （其余条件被省略。）
- en: 20.5.2 Consequences of the assignment rules for functions
  id: totrans-183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.5.2 函数分配规则的后果
- en: 'In this subsection, we look at what the assignment rules mean for the following
    two functions `targetFunc` and `sourceFunc`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们将研究分配规则对以下两个函数`targetFunc`和`sourceFunc`的含义：
- en: '[PRE38]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 20.5.2.1 Types of parameters and results
  id: totrans-186
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 20.5.2.1 参数和结果的类型
- en: Target parameter types must be assignable to corresponding source parameter
    types.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标参数类型必须可以分配给相应的源参数类型。
- en: Why? Anything that the target accepts must also be accepted by the source.
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么？目标接受的任何内容也必须被源接受。
- en: The source return type must be assignable to target return type.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源返回类型必须可以分配给目标返回类型。
- en: Why? Anything that the source returns must be compatible with the expectations
    set by the target.
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么？源返回的任何内容都必须与目标设置的期望兼容。
- en: 'Example:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE39]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The following example demonstrates that if the target return type is `void`,
    then the source return type doesn’t matter. Why is that? `void` results are always
    ignored in TypeScript.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如果目标返回类型是`void`，那么源返回类型就不重要。为什么？在TypeScript中，`void`结果总是被忽略的。
- en: '[PRE40]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 20.5.2.2 Numbers of parameters
  id: totrans-195
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 20.5.2.2 参数的数量
- en: 'The source must not have more parameters than the target:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 源不得比目标具有更多的参数：
- en: '[PRE41]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The source can have fewer parameters than the target:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 源可以比目标具有更少的参数：
- en: '[PRE42]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Why is that? The target specifies the expectations for the source: It must
    accept the parameter `x`. Which it does (but it ignores it). This permissiveness
    enables:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么？目标指定了对源的期望：它必须接受参数`x`。它确实接受了（但它忽略了它）。这种宽松性使得：
- en: '[PRE43]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The callback for `.map()` only has one of the three parameters that are mentioned
    in the type signature of `.map()`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`.map()`的回调只有三个参数中的一个：'
- en: '[PRE44]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 20.6 Further reading and sources of this chapter
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 20.6 本章的进一步阅读和来源
- en: '[TypeScript Handbook](https://www.typescriptlang.org/docs/handbook/basic-types.html)'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TypeScript手册](https://www.typescriptlang.org/docs/handbook/basic-types.html)'
- en: '[TypeScript Language Specification](https://github.com/microsoft/TypeScript/blob/master/doc/spec-ARCHIVED.md)'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TypeScript语言规范](https://github.com/microsoft/TypeScript/blob/master/doc/spec-ARCHIVED.md)'
- en: '[Chapter “Callable values”](https://exploringjs.com/impatient-js/ch_callables.html)
    in “JavaScript for impatient programmers”'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[章节“可调用值”](https://exploringjs.com/impatient-js/ch_callables.html) in “JavaScript
    for impatient programmers”'
- en: '[Comments](https://github.com/rauschma/tackling-ts/issues/20)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/tackling-ts/issues/20)'
