["```js\n    <div class=\"entry\">\n     <h1>{{title}}</h1>\n     <div class=\"body\">\n     {{body}}\n     </div>\n    </div>\n    ```", "```js\n    // First step: retrieve the template text, e.g. from a text file.\n    const tmplFunc = Handlebars.compile(TMPL_TEXT); // compile string\n    const data = {title: 'My page', body: 'Welcome to my page!'};\n    const html = tmplFunc(data);\n    ```", "```js\n    const num = 5;\n    assert.equal(`Count: ${num}!`, 'Count: 5!');\n    ```", "```js\n    const getArgs = (...args) => args;\n    assert.deepEqual(\n     getArgs`Count: ${5}!`,\n     [['Count: ', '!'], 5] );\n    ```", "```js\nconst MAX = 100;\nfunction doSomeWork(x) {\n if (x > MAX) {\n throw new Error(`At most ${MAX} allowed: ${x}!`);\n }\n // \u00b7\u00b7\u00b7\n}\nassert.throws(\n () => doSomeWork(101),\n {message: 'At most 100 allowed: 101!'});\n```", "```js\nconst str = `this is\na text with\nmultiple lines`;\n```", "```js\nfunction tagFunc(...args) {\n return args;\n}\n\nconst setting = 'dark mode';\nconst value = true;\n\nassert.deepEqual(\n tagFunc`Setting ${setting} is ${value}!`, // (A)\n [['Setting ', ' is ', '!'], 'dark mode', true] // (B)\n);\n```", "```js\nfunction cookedRaw(templateStrings, ...substitutions) {\n return {\n cooked: Array.from(templateStrings), // copy only Array elements\n raw: templateStrings.raw,\n substitutions,\n };\n}\nassert.deepEqual(\n cookedRaw`\\tab${'subst'}\\newline\\\\`,\n {\n cooked: ['\\tab', '\\newline\\\\'],\n raw:    ['\\\\tab', '\\\\newline\\\\\\\\'],\n substitutions: ['subst'],\n });\n```", "```js\nassert.deepEqual(\n cookedRaw`\\u{54}\\u0065\\x78t`,\n {\n cooked: ['Text'],\n raw:    ['\\\\u{54}\\\\u0065\\\\x78t'],\n substitutions: [],\n });\n```", "```js\nassert.deepEqual(\n cookedRaw`\\uu\\xx ${1} after`,\n {\n cooked: [undefined, ' after'],\n raw:    ['\\\\uu\\\\xx ', ' after'],\n substitutions: [1],\n });\n```", "```js\nwindowsPath`C:\\uuu\\xxx\\111`\nlatex`\\unicode`\n```", "```js\nimport {html, render} from 'lit-html';\n\nconst template = (items) => html`\n <ul>\n ${\n repeat(items,\n (item) => item.id,\n (item, index) => html`<li>${index}. ${item.name}</li>`\n )\n }\n </ul>\n`;\n```", "```js\nconst RE_YEAR = re`(?<year>[0-9]{4})`;\nconst RE_MONTH = re`(?<month>[0-9]{2})`;\nconst RE_DAY = re`(?<day>[0-9]{2})`;\nconst RE_DATE = re`/${RE_YEAR}-${RE_MONTH}-${RE_DAY}/u`; // (A)\n\nconst match = RE_DATE.exec('2017-01-27');\nassert.equal(match.groups.year, '2017');\n```", "```js\nimport gql from 'graphql-tag';\n\nconst query = gql`\n {\n user(id: 5) {\n firstName\n lastName\n }\n }\n `;\n```", "```js\nassert.equal(String.raw`\\back`, '\\\\back');\n```", "```js\nconst regex1 = /^\\./;\nconst regex2 = new RegExp('^\\\\.');\nconst regex3 = new RegExp(String.raw`^\\.`);\n```", "```js\nconst WIN_PATH = String.raw`C:\\foo\\bar`;\nassert.equal(WIN_PATH, 'C:\\\\foo\\\\bar');\n```", "```js\nfunction div(text) {\n return `\n <div>\n ${text}\n </div>\n `;\n}\nconsole.log('Output:');\nconsole.log(\n div('Hello!')\n // Replace spaces with mid-dots:\n .replace(/ /g, '\u00b7')\n // Replace \\n with #\\n:\n .replace(/\\n/g, '#\\n')\n);\n```", "```js\nOutput:\n#\n\u00b7\u00b7\u00b7\u00b7<div>#\n\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7Hello!#\n\u00b7\u00b7\u00b7\u00b7</div>#\n\u00b7\u00b7\n```", "```js\nimport dedent from 'dedent';\nfunction divDedented(text) {\n return dedent`\n <div>\n ${text}\n </div>\n `.replace(/\\n/g, '#\\n');\n}\nconsole.log('Output:');\nconsole.log(divDedented('Hello!'));\n```", "```js\nOutput:\n<div>#\n Hello!#\n</div>\n```", "```js\nfunction divDedented(text) {\n return `\n<div>\n ${text}\n</div>\n `.trim().replace(/\\n/g, '#\\n');\n}\nconsole.log('Output:');\nconsole.log(divDedented('Hello!'));\n```", "```js\nOutput:\n<div>#\n Hello!#\n</div>\n```", "```js\nconst tmpl = (data) => `Hello ${data.name}!`;\nassert.equal(tmpl({name: 'Jane'}), 'Hello Jane!');\n```", "```js\nconst addresses = [\n { first: '<Jane>', last: 'Bond' },\n { first: 'Lars', last: '<Croft>' },\n];\n```", "```js\nconst tmpl = (addrs) => `\n<table>\n ${addrs.map(\n (addr) => `\n <tr>\n <td>${escapeHtml(addr.first)}</td>\n <td>${escapeHtml(addr.last)}</td>\n </tr>\n `.trim()\n ).join('')}\n</table>\n`.trim();\n```", "```js\nconsole.log(tmpl(addresses));\n```", "```js\n<table>\n <tr>\n <td>&lt;Jane&gt;</td>\n <td>Bond</td>\n </tr><tr>\n <td>Lars</td>\n <td>&lt;Croft&gt;</td>\n </tr>\n</table>\n```", "```js\nfunction escapeHtml(str) {\n return str\n .replace(/&/g, '&amp;') // first!\n .replace(/>/g, '&gt;')\n .replace(/</g, '&lt;')\n .replace(/\"/g, '&quot;')\n .replace(/'/g, '&#39;')\n .replace(/`/g, '&#96;')\n ;\n}\nassert.equal(\n escapeHtml('Rock & Roll'), 'Rock &amp; Roll');\nassert.equal(\n escapeHtml('<blank>'), '&lt;blank&gt;');\n```"]