- en: 9 Assertion API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://exploringjs.com/impatient-js/ch_assertion-api.html](https://exploringjs.com/impatient-js/ch_assertion-api.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 9.1 [Assertions in software development](ch_assertion-api.html#assertions-in-software-development)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.2 [How assertions are used in this book](ch_assertion-api.html#how-assertions-are-used-in-this-book)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.2.1 [Documenting results in code examples via assertions](ch_assertion-api.html#documenting-results-in-code-examples-via-assertions)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.2.2 [Implementing test-driven exercises via assertions](ch_assertion-api.html#implementing-test-driven-exercises-via-assertions)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.3 [Normal comparison vs. deep comparison](ch_assertion-api.html#normal-comparison-vs.-deep-comparison)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '9.4 [Quick reference: module `assert`](ch_assertion-api.html#quick-reference-module-assert)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.4.1 [Normal equality](ch_assertion-api.html#normal-equality)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.4.2 [Deep equality](ch_assertion-api.html#deep-equality)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.4.3 [Expecting exceptions](ch_assertion-api.html#expecting-exceptions)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.4.4 [Another tool function](ch_assertion-api.html#another-tool-function)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 9.1 Assertions in software development
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In software development, *assertions* state facts about values or pieces of
    code that must be true. If they aren’t, an exception is thrown. Node.js supports
    assertions via its built-in module `assert` – for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This assertion states that the expected result of 3 plus 5 is 8\. The import
    statement uses [the recommended `strict` version](https://nodejs.org/api/assert.html#assert_strict_mode)
    of `assert`.
  prefs: []
  type: TYPE_NORMAL
- en: 9.2 How assertions are used in this book
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this book, assertions are used in two ways: to document results in code
    examples and to implement test-driven exercises.'
  prefs: []
  type: TYPE_NORMAL
- en: 9.2.1 Documenting results in code examples via assertions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In code examples, assertions express expected results. Take, for example, the
    following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`id()` returns its parameter. We can show it in action via an assertion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the examples, I usually omit the statement for importing `assert`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The motivation behind using assertions is:'
  prefs: []
  type: TYPE_NORMAL
- en: You can specify precisely what is expected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code examples can be tested automatically, which ensures that they really work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.2.2 Implementing test-driven exercises via assertions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The exercises for this book are test-driven, via the test framework Mocha. Checks
    inside the tests are made via methods of `assert`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of such a test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: For more information, consult [§10 “Getting started with quizzes and exercises”](ch_quizzes-exercises.html).
  prefs: []
  type: TYPE_NORMAL
- en: 9.3 Normal comparison vs. deep comparison
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The strict `equal()` uses `===` to compare values. Therefore, an object is
    only equal to itself – even if another object has the same content (because `===`
    does not compare the contents of objects, only their identities):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`deepEqual()` is a better choice for comparing objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This method works for Arrays, too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '9.4 Quick reference: module `assert`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full documentation, see [the Node.js docs](https://nodejs.org/api/assert.html).
  prefs: []
  type: TYPE_NORMAL
- en: 9.4.1 Normal equality
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`function equal(actual: any, expected: any, message?: string): void`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`actual === expected` must be `true`. If not, an `AssertionError` is thrown.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`function notEqual(actual: any, expected: any, message?: string): void`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`actual !== expected` must be `true`. If not, an `AssertionError` is thrown.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The optional last parameter `message` can be used to explain what is asserted.
    If the assertion fails, the message is used to set up the `AssertionError` that
    is thrown.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 9.4.2 Deep equality
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`function deepEqual(actual: any, expected: any, message?: string): void`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`actual` must be deeply equal to `expected`. If not, an `AssertionError` is
    thrown.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`function notDeepEqual(actual: any, expected: any, message?: string): void`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`actual` must not be deeply equal to `expected`. If it is, an `AssertionError`
    is thrown.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 9.4.3 Expecting exceptions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If you want to (or expect to) receive an exception, you need `throws()`: This
    function calls its first parameter, the function `block`, and only succeeds if
    it throws an exception. Additional parameters can be used to specify what that
    exception must look like.'
  prefs: []
  type: TYPE_NORMAL
- en: '`function throws(block: Function, message?: string): void`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`function throws(block: Function, error: Function, message?: string): void`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`function throws(block: Function, error: RegExp, message?: string): void`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`function throws(block: Function, error: Object, message?: string): void`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 9.4.4 Another tool function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`function fail(message: string | Error): never`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always throws an `AssertionError` when it is called. That is occasionally useful
    for unit testing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz**'
  prefs: []
  type: TYPE_NORMAL
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  prefs: []
  type: TYPE_NORMAL
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/3)'
  prefs: []
  type: TYPE_NORMAL
