- en: 37 Destructuring
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 37 解构
- en: 原文：[https://exploringjs.com/impatient-js/ch_destructuring.html](https://exploringjs.com/impatient-js/ch_destructuring.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/impatient-js/ch_destructuring.html](https://exploringjs.com/impatient-js/ch_destructuring.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 37.1 [A first taste of destructuring](ch_destructuring.html#a-first-taste-of-destructuring)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.1 [解构的第一印象](ch_destructuring.html#a-first-taste-of-destructuring)
- en: 37.2 [Constructing vs. extracting](ch_destructuring.html#constructing-vs.-extracting)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.2 构造 vs. 提取
- en: 37.3 [Where can we destructure?](ch_destructuring.html#where-can-we-destructure)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.3 [我们可以在哪里进行解构？](ch_destructuring.html#where-can-we-destructure)
- en: 37.4 [Object-destructuring](ch_destructuring.html#object-destructuring)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.4 [对象解构](ch_destructuring.html#object-destructuring)
- en: 37.4.1 [Property value shorthands](ch_destructuring.html#property-value-shorthands)
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.4.1 [属性值简写](ch_destructuring.html#property-value-shorthands)
- en: 37.4.2 [Rest properties](ch_destructuring.html#rest-properties)
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.4.2 [剩余属性](ch_destructuring.html#rest-properties)
- en: '37.4.3 [Syntax pitfall: assigning via object destructuring](ch_destructuring.html#assigning-via-object-destructuring)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.4.3 [语法陷阱：通过对象解构进行赋值](ch_destructuring.html#assigning-via-object-destructuring)
- en: 37.5 [Array-destructuring](ch_destructuring.html#array-destructuring)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.5 [数组解构](ch_destructuring.html#array-destructuring)
- en: 37.5.1 [Array-destructuring works with any iterable](ch_destructuring.html#array-destructuring-works-with-any-iterable)
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.5.1 [数组解构适用于任何可迭代对象](ch_destructuring.html#array-destructuring-works-with-any-iterable)
- en: 37.5.2 [Rest elements](ch_destructuring.html#rest-elements)
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.5.2 [剩余元素](ch_destructuring.html#rest-elements)
- en: 37.6 [Examples of destructuring](ch_destructuring.html#examples-of-destructuring)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.6 [解构的例子](ch_destructuring.html#examples-of-destructuring)
- en: '37.6.1 [Array-destructuring: swapping variable values](ch_destructuring.html#array-destructuring-swapping-variable-values)'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.6.1 [数组解构：交换变量值](ch_destructuring.html#array-destructuring-swapping-variable-values)
- en: '37.6.2 [Array-destructuring: operations that return Arrays](ch_destructuring.html#array-destructuring-operations-that-return-arrays)'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.6.2 [数组解构：返回数组的操作](ch_destructuring.html#array-destructuring-operations-that-return-arrays)
- en: '37.6.3 [Object-destructuring: multiple return values](ch_destructuring.html#object-destructuring-multiple-return-values)'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.6.3 [对象解构：多个返回值](ch_destructuring.html#object-destructuring-multiple-return-values)
- en: 37.7 [What happens if a pattern part does not match anything?](ch_destructuring.html#what-happens-if-a-pattern-part-does-not-match-anything)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.7 [如果模式部分没有匹配到任何内容会发生什么？](ch_destructuring.html#what-happens-if-a-pattern-part-does-not-match-anything)
- en: 37.7.1 [Object-destructuring and missing properties](ch_destructuring.html#object-destructuring-and-missing-properties)
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.7.1 [对象解构和缺失属性](ch_destructuring.html#object-destructuring-and-missing-properties)
- en: 37.7.2 [Array-destructuring and missing elements](ch_destructuring.html#array-destructuring-and-missing-elements)
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.7.2 [数组解构和缺失元素](ch_destructuring.html#array-destructuring-and-missing-elements)
- en: 37.8 [What values can’t be destructured?](ch_destructuring.html#what-values-cant-be-destructured)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.8 [哪些值不能被解构？](ch_destructuring.html#what-values-cant-be-destructured)
- en: 37.8.1 [You can’t object-destructure `undefined` and `null`](ch_destructuring.html#you-cant-object-destructure-undefined-and-null)
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.8.1 [你不能对`undefined`和`null`进行对象解构](ch_destructuring.html#you-cant-object-destructure-undefined-and-null)
- en: 37.8.2 [You can’t Array-destructure non-iterable values](ch_destructuring.html#you-cant-array-destructure-non-iterable-values)
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.8.2 [不能对非可迭代值进行数组解构](ch_destructuring.html#you-cant-array-destructure-non-iterable-values)
- en: 37.9 [(Advanced)](ch_destructuring.html#advanced-4)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.9 （高级）](ch_destructuring.html#advanced-4)
- en: 37.10 [Default values](ch_destructuring.html#default-values)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.10 [默认值](ch_destructuring.html#default-values)
- en: 37.10.1 [Default values in Array-destructuring](ch_destructuring.html#default-values-in-array-destructuring)
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.10.1 [数组解构中的默认值](ch_destructuring.html#default-values-in-array-destructuring)
- en: 37.10.2 [Default values in object-destructuring](ch_destructuring.html#default-values-in-object-destructuring)
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.10.2 [对象解构中的默认值](ch_destructuring.html#default-values-in-object-destructuring)
- en: 37.11 [Parameter definitions are similar to destructuring](ch_destructuring.html#parameter-definitions-are-similar-to-destructuring)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.11 [参数定义类似于解构](ch_destructuring.html#parameter-definitions-are-similar-to-destructuring)
- en: 37.12 [Nested destructuring](ch_destructuring.html#nested-destructuring)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 37.12 [嵌套解构](ch_destructuring.html#nested-destructuring)
- en: '* * *'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 37.1 A first taste of destructuring
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 37.1 解构的第一印象
- en: 'With normal assignment, you extract one piece of data at a time – for example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过普通赋值，您一次提取一个数据片段，例如：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With destructuring, you can extract multiple pieces of data at the same time
    via patterns in locations that receive data. The left-hand side of `=` in the
    previous code is one such location. In the following code, the square brackets
    in line A are a destructuring pattern:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过解构，您可以通过接收数据的位置中的模式同时提取多个数据片段。在前面的代码中，`=`的左侧就是这样一个位置。在下面的代码中，第A行的方括号是一个解构模式：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code does the same as the previous code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码与前面的代码相同。
- en: 'Note that the pattern is “smaller” than the data: we are only extracting what
    we need.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，模式比数据“小”：我们只提取我们需要的部分。
- en: 37.2 Constructing vs. extracting
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 37.2 构造 vs. 提取
- en: 'In order to understand what destructuring is, consider that JavaScript has
    two kinds of operations that are opposites:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解解构是什么，考虑JavaScript有两种相反的操作：
- en: You can *construct* compound data, for example, by setting properties and via
    object literals.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过设置属性和对象字面量来*构造*复合数据。
- en: You can *extract* data out of compound data, for example, by getting properties.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过获取属性来*提取*复合数据的数据片段。
- en: 'Constructing data looks as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 构造数据如下所示：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Extracting data looks as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 提取数据如下所示：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The operation in line A is new: we declare two variables `f2` and `l2` and
    initialize them via *destructuring* (multivalue extraction).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 第A行的操作是新的：我们声明了两个变量`f2`和`l2`，并通过*解构*（多值提取）对它们进行初始化。
- en: 'The following part of line A is a *destructuring pattern*:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第A行的以下部分是一个*解构模式*：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Destructuring patterns are syntactically similar to the literals that are used
    for multivalue construction. But they appear where data is received (e.g., at
    the left-hand sides of assignments), not where data is created (e.g., at the right-hand
    sides of assignments).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 解构模式在语法上类似于用于多值构造的字面量。但它们出现在数据接收的地方（例如，在赋值的左侧），而不是数据创建的地方（例如，在赋值的右侧）。
- en: 37.3 Where can we destructure?
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 37.3 我们可以在哪里进行解构？
- en: 'Destructuring patterns can be used at “data sink locations” such as:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 解构模式可以在“数据接收位置”使用，例如：
- en: 'Variable declarations:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量声明：
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Assignments:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 赋值：
- en: '[PRE6]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Parameter definitions:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数定义：
- en: '[PRE7]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Note that variable declarations include `const` and `let` declarations in `for-of`
    loops:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，变量声明包括 `for-of` 循环中的 `const` 和 `let` 声明：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the next two sections, we’ll look deeper into the two kinds of destructuring:
    object-destructuring and Array-destructuring.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两节中，我们将深入探讨两种解构：对象解构和数组解构。
- en: 37.4 Object-destructuring
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 37.4 对象解构
- en: '*Object-destructuring* lets you batch-extract values of properties via patterns
    that look like object literals:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*对象解构* 允许你通过看起来像对象字面量的模式批量提取属性的值：'
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can think of the pattern as a transparent sheet that you place over the
    data: the pattern key `''street''` has a match in the data. Therefore, the data
    value `''Evergreen Terrace''` is assigned to the pattern variable `s`.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将模式看作是一个透明的图层，你将其放在数据上：模式键`'street'`在数据中有匹配。因此，数据值`'Evergreen Terrace'`被赋给模式变量`s`。
- en: 'You can also object-destructure primitive values:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以对原始值进行对象解构：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And you can object-destructure Arrays:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以对数组进行对象解构：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Why does that work? [Array indices are also properties](ch_arrays.html#array-indices).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么会这样？[数组索引也是属性](ch_arrays.html#array-indices)。
- en: 37.4.1 Property value shorthands
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 37.4.1 属性值简写
- en: 'Object literals support property value shorthands and so do object patterns:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对象字面量支持属性值简写，对象模式也是如此：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Exercise: Object-destructuring**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **练习：对象解构**'
- en: '`exercises/destructuring/object_destructuring_exrc.mjs`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`exercises/destructuring/object_destructuring_exrc.mjs`'
- en: 37.4.2 Rest properties
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 37.4.2 剩余属性
- en: 'In object literals, you can have spread properties. In object patterns, you
    can have rest properties (which must come last):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在对象字面量中，你可以有展开属性。在对象模式中，你可以有剩余属性（必须放在最后）：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: A rest property variable, such as `remaining` (line A), is assigned an object
    with all data properties whose keys are not mentioned in the pattern.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一个剩余属性变量，比如 `remaining`（第 A 行），被赋予一个包含未在模式中提及的所有数据属性的对象。
- en: '`remaining` can also be viewed as the result of non-destructively removing
    property `a` from `obj`.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`remaining` 也可以被视为从 `obj` 中非破坏性地移除属性 `a` 的结果。'
- en: '37.4.3 Syntax pitfall: assigning via object destructuring'
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 37.4.3 语法陷阱：通过对象解构进行赋值
- en: 'If we object-destructure in an assignment, we are facing a pitfall caused by
    [syntactic ambiguity](ch_syntax.html#ambiguous-syntax) – you can’t start a statement
    with a curly brace because then JavaScript thinks you are starting a block:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在赋值中使用对象解构，就会面临由[语法歧义](ch_syntax.html#ambiguous-syntax)引起的陷阱 - 你不能以大括号开始一个语句，因为这样
    JavaScript 会认为你正在开始一个代码块：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/b666ba365e94edaf0ef510fd7e12c7de.png)  **Why `eval()`?**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/b666ba365e94edaf0ef510fd7e12c7de.png)  **为什么使用 `eval()`?**'
- en: '[`eval()`](ch_dynamic-code-evaluation.html#eval) delays parsing (and therefore
    the `SyntaxError`) until the callback of `assert.throws()` is executed. If we
    didn’t use it, we’d already get an error when this code is parsed and `assert.throws()`
    wouldn’t even be executed.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[`eval()`](ch_dynamic-code-evaluation.html#eval) 延迟解析（因此延迟了 `SyntaxError`）直到
    `assert.throws()` 的回调被执行。如果我们不使用它，当这段代码被解析时就会出现错误，`assert.throws()` 甚至都不会被执行。'
- en: 'The workaround is to put the whole assignment in parentheses:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方法是将整个赋值放在括号中：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 37.5 Array-destructuring
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 37.5 数组解构
- en: '*Array-destructuring* lets you batch-extract values of Array elements via patterns
    that look like Array literals:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*数组解构* 允许你通过看起来像数组字面量的模式批量提取数组元素的值：'
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can skip elements by mentioning holes inside Array patterns:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在数组模式内部提及空位来跳过元素：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The first element of the Array pattern in line A is a hole, which is why the
    Array element at index 0 is ignored.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 A 行的数组模式的第一个元素是一个空位，这就是为什么索引为 0 的数组元素被忽略了。
- en: 37.5.1 Array-destructuring works with any iterable
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 37.5.1 数组解构适用于任何可迭代对象
- en: 'Array-destructuring can be applied to any value that is iterable, not just
    to Arrays:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 数组解构可以应用于任何可迭代的值，而不仅仅是数组：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 37.5.2 Rest elements
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 37.5.2 剩余元素
- en: 'In Array literals, you can have spread elements. In Array patterns, you can
    have rest elements (which must come last):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组字面量中，你可以有展开元素。在数组模式中，你可以有剩余元素（必须放在最后）：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: A rest element variable, such as `remaining` (line A), is assigned an Array
    with all elements of the destructured value that were not mentioned yet.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 rest 元素变量，比如 `remaining`（第 A 行），被赋予一个包含尚未提及的解构值的所有元素的数组。
- en: 37.6 Examples of destructuring
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 37.6 解构的例子
- en: '37.6.1 Array-destructuring: swapping variable values'
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 37.6.1 数组解构：交换变量值
- en: 'You can use Array-destructuring to swap the values of two variables without
    needing a temporary variable:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用数组解构来交换两个变量的值，而不需要临时变量：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '37.6.2 Array-destructuring: operations that return Arrays'
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 37.6.2 数组解构：返回数组的操作
- en: 'Array-destructuring is useful when operations return Arrays, as does, for example,
    the regular expression method `.exec()`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当操作返回数组时，数组解构非常有用，例如正则表达式方法`.exec()`就返回数组：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '37.6.3 Object-destructuring: multiple return values'
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 37.6.3 对象解构：多个返回值
- en: Destructuring is very useful if a function returns multiple values – either
    packaged as an Array or packaged as an object.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个函数返回多个值 - 无论是作为数组打包还是作为对象打包 - 解构非常有用。
- en: 'Consider a function `findElement()` that finds elements in an Array:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个名为`findElement()`的函数，它在数组中查找元素：
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Its second parameter is a function that receives the value and index of an element
    and returns a boolean indicating if this is the element the caller is looking
    for.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now faced with a dilemma: Should `findElement()` return the value of
    the element it found or the index? One solution would be to create two separate
    functions, but that would result in duplicated code because both functions would
    be very similar.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'The following implementation avoids duplication by returning an object that
    contains both index and value of the element that is found:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Destructuring helps us with processing the result of `findElement()`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As we are working with property keys, the order in which we mention `value`
    and `index` doesn’t matter:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The kicker is that destructuring also serves us well if we are only interested
    in one of the two results:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: All of these conveniences combined make this way of handling multiple return
    values quite versatile.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 37.7 What happens if a pattern part does not match anything?
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'What happens if there is no match for part of a pattern? The same thing that
    happens if you use non-batch operators: you get `undefined`.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 37.7.1 Object-destructuring and missing properties
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If a property in an object pattern has no match on the right-hand side, you
    get `undefined`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 37.7.2 Array-destructuring and missing elements
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If an element in an Array pattern has no match on the right-hand side, you
    get `undefined`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 37.8 What values can’t be destructured?
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 37.8.1 You can’t object-destructure `undefined` and `null`
  id: totrans-130
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Object-destructuring only fails if the value to be destructured is either `undefined`
    or `null`. That is, it fails whenever accessing a property via the dot operator
    would fail too.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 37.8.2 You can’t Array-destructure non-iterable values
  id: totrans-133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Array-destructuring demands that the destructured value be iterable. Therefore,
    you can’t Array-destructure `undefined` and `null`. But you can’t Array-destructure
    non-iterable objects either:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz: basic**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 37.9 (Advanced)
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All of the remaining sections are advanced.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 37.10 Default values
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Normally, if a pattern has no match, the corresponding variable is set to `undefined`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If you want a different value to be used, you need to specify a *default value*
    (via `=`):'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In line A, we specify the default value for `p` to be `123`. That default is
    used because the data that we are destructuring has no property named `prop`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 37.10.1 Default values in Array-destructuring
  id: totrans-146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Here, we have two default values that are assigned to the variables `x` and
    `y` because the corresponding elements don’t exist in the Array that is destructured.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The default value for the first element of the Array pattern is `1`; the default
    value for the second element is `2`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 37.10.2 Default values in object-destructuring
  id: totrans-150
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can also specify default values for object-destructuring:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Neither property key `first` nor property key `last` exist in the object that
    is destructured. Therefore, the default values are used.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'With property value shorthands, this code becomes simpler:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 37.11 Parameter definitions are similar to destructuring
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Considering what we have learned in this chapter, parameter definitions have
    much in common with an Array pattern (rest elements, default values, etc.). In
    fact, the following two function declarations are equivalent:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 37.12 Nested destructuring
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Until now, we have only used variables as *assignment targets* (data sinks)
    inside destructuring patterns. But you can also use patterns as assignment targets,
    which enables you to nest patterns to arbitrary depths:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Inside the Array pattern in line A, there is a nested object pattern at index
    1.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Nested patterns can become difficult to understand, so they are best used in
    moderation.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz: advanced**'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/25)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
