- en: 10 Getting started with quizzes and exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://exploringjs.com/impatient-js/ch_quizzes-exercises.html](https://exploringjs.com/impatient-js/ch_quizzes-exercises.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 10.1 [Quizzes](ch_quizzes-exercises.html#quizzes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.2 [Exercises](ch_quizzes-exercises.html#exercises)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.2.1 [Installing the exercises](ch_quizzes-exercises.html#installing-the-exercises)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.2.2 [Running exercises](ch_quizzes-exercises.html#running-exercises)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.3 [Unit tests in JavaScript](ch_quizzes-exercises.html#unit-tests-in-javascript)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.3.1 [A typical test](ch_quizzes-exercises.html#a-typical-test)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.3.2 [Asynchronous tests in Mocha](ch_quizzes-exercises.html#async-tests-mocha)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Throughout most chapters, there are quizzes and exercises. These are a paid
    feature, but a comprehensive preview is available. This chapter explains how to
    get started with them.
  prefs: []
  type: TYPE_NORMAL
- en: 10.1 Quizzes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Installation:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and unzip `impatient-js-quiz.zip`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Running the quiz app:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `impatient-js-quiz/index.html` in a web browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You’ll see a TOC of all the quizzes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.2 Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 10.2.1 Installing the exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To install the exercises:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and unzip `impatient-js-code.zip`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Follow the instructions in `README.txt`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.2.2 Running exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Exercises are referred to by path in this book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example: `exercises/quizzes-exercises/first_module_test.mjs`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Within each file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first line contains the command for running the exercise.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The following lines describe what you have to do.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.3 Unit tests in JavaScript
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All exercises in this book are tests that are run via the test framework [Mocha](https://mochajs.org).
    This section gives a brief introduction.
  prefs: []
  type: TYPE_NORMAL
- en: 10.3.1 A typical test
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Typical test code is split into two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 1: the code to be tested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Part 2: the tests for the code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Take, for example, the following two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id.mjs` (code to be tested)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`id_test.mjs` (tests)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '10.3.1.1 Part 1: the code'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The code itself resides in `id.mjs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The key thing here is: everything we want to test must be exported. Otherwise,
    the test code can’t access it.'
  prefs: []
  type: TYPE_NORMAL
- en: '10.3.1.2 Part 2: the tests'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![](../Images/ec8e6930fbe484fc519f3aa7b812c3fd.png)  **Don’t worry about the
    exact details of tests**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You don’t need to worry about the exact details of tests: They are always implemented
    for you. Therefore, you only need to read them, but not write them.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The tests for the code reside in `id_test.mjs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The core of this test file is line D – [an assertion](ch_assertion-api.html):
    `assert.equal()` specifies that the expected result of `id(''abc'')` is `''abc''`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As for the other lines:'
  prefs: []
  type: TYPE_NORMAL
- en: The comment at the very beginning shows the shell command for running the test.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line A: We import the Node.js assertion library (in *strict assertion mode*).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line B: We import the function to test.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line C: We define a test. This is done by calling the function `test()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First parameter: the name of the test.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Second parameter: the test code, which is provided via an arrow function. The
    parameter `t` gives us access to AVA’s testing API (assertions, etc.).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To run the test, we execute the following in a command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `t` is an abbreviation for `test`. That is, the long version of this command
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Exercise: Your first
    exercise**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following exercise gives you a first taste of what exercises are like:'
  prefs: []
  type: TYPE_NORMAL
- en: '`exercises/quizzes-exercises/first_module_test.mjs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.3.2 Asynchronous tests in Mocha
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![](../Images/ec8e6930fbe484fc519f3aa7b812c3fd.png)  **Reading**'
  prefs: []
  type: TYPE_NORMAL
- en: You may want to postpone reading this section until you get to the chapters
    on asynchronous programming.
  prefs: []
  type: TYPE_NORMAL
- en: 'Writing tests for asynchronous code requires extra work: The test receives
    its results later and has to signal to Mocha that it isn’t finished yet when it
    returns. The following subsections examine three ways of doing so.'
  prefs: []
  type: TYPE_NORMAL
- en: 10.3.2.1 Asynchronicity via callbacks
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'If the callback we pass to `test()` has a parameter (e.g., `done`), Mocha switches
    to callback-based asynchronicity. When we are done with our asynchronous work,
    we have to call `done`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what `divideCallback()` looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 10.3.2.2 Asynchronicity via Promises
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: If a test returns a Promise, Mocha switches to Promise-based asynchronicity.
    A test is considered successful if the Promise is fulfilled and failed if the
    Promise is rejected or if a settlement takes longer than a timeout.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`dividePromise()` is implemented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 10.3.2.3 Async functions as test “bodies”
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Async functions always return Promises. Therefore, an async function is a convenient
    way of implementing an asynchronous test. The following code is equivalent to
    the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We don’t need to explicitly return anything: The implicitly returned `undefined`
    is used to fulfill the Promise returned by this async function. And if the test
    code throws an exception, then the async function takes care of rejecting the
    returned Promise.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/2)'
  prefs: []
  type: TYPE_NORMAL
