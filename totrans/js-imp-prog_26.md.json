["```js\nconst mySymbol = Symbol('mySymbol');\n```", "```js\n    const sym = Symbol();\n    assert.equal(typeof sym, 'symbol');\n    ```", "```js\n    const obj = {\n     [sym]: 123,\n    };\n    ```", "```js\n> Symbol() === Symbol()\nfalse\n```", "```js\nconst string1 = 'abc';\nconst string2 = 'abc';\nassert.equal(\n string1 === string2, true); // not unique\n\nconst object1 = {};\nconst object2 = {};\nassert.equal(\n object1 === object2, false); // unique\n\nconst symbol1 = Symbol();\nconst symbol2 = Symbol();\nassert.equal(\n symbol1 === symbol2, false); // unique\n```", "```js\nconst mySymbol = Symbol('mySymbol');\n```", "```js\nassert.equal(mySymbol.toString(), 'Symbol(mySymbol)');\n```", "```js\nassert.equal(mySymbol.description, 'mySymbol');\n```", "```js\nconst COLOR_BLUE = 'Blue';\n```", "```js\nconst MOOD_BLUE = 'Blue';\nassert.equal(COLOR_BLUE, MOOD_BLUE);\n```", "```js\nconst COLOR_BLUE = Symbol('Blue');\nconst MOOD_BLUE = Symbol('Blue');\n\nassert.notEqual(COLOR_BLUE, MOOD_BLUE);\n```", "```js\nconst COLOR_RED    = Symbol('Red');\nconst COLOR_ORANGE = Symbol('Orange');\nconst COLOR_YELLOW = Symbol('Yellow');\nconst COLOR_GREEN  = Symbol('Green');\nconst COLOR_BLUE   = Symbol('Blue');\nconst COLOR_VIOLET = Symbol('Violet');\n\nfunction getComplement(color) {\n switch (color) {\n case COLOR_RED:\n return COLOR_GREEN;\n case COLOR_ORANGE:\n return COLOR_BLUE;\n case COLOR_YELLOW:\n return COLOR_VIOLET;\n case COLOR_GREEN:\n return COLOR_RED;\n case COLOR_BLUE:\n return COLOR_ORANGE;\n case COLOR_VIOLET:\n return COLOR_YELLOW;\n default:\n throw new Exception('Unknown color: '+color);\n }\n}\nassert.equal(getComplement(COLOR_YELLOW), COLOR_VIOLET);\n```", "```js\n        const point = {\n         x: 7,\n         y: 4,\n         toString() {\n         return `(${this.x}, ${this.y})`;\n         },\n        };\n        assert.equal(\n         String(point), '(7, 4)'); // (A)\n        ```", "```js\n        const point = {\n         x: 7,\n         y: 4,\n         toJSON() {\n         return [this.x, this.y];\n         },\n        };\n        assert.equal(\n         JSON.stringify(point), '[7,4]');\n        ```", "```js\nconst specialMethod = Symbol('specialMethod');\nconst obj = {\n _id: 'kf12oi',\n [specialMethod]() { // (A)\n return this._id;\n }\n};\nassert.equal(obj[specialMethod](), 'kf12oi');\n```", "```js\n    const PrimitiveNull = {\n     [Symbol.hasInstance](x) {\n     return x === null;\n     }\n    };\n    assert.equal(null instanceof PrimitiveNull, true);\n    ```", "```js\n    > String({})\n    '[object Object]'\n    > String({ [Symbol.toStringTag]: 'is no money' })\n    '[object is no money]'\n    ```", "```js\nconst obj = {};\nconst sym = Symbol();\nassert.throws(\n () => { obj['__'+sym+'__'] = true },\n { message: 'Cannot convert a Symbol value to a string' });\n```", "```js\n> const mySymbol = Symbol('mySymbol');\n> 'Symbol I used: ' + mySymbol\nTypeError: Cannot convert a Symbol value to a string\n> 'Symbol I used: ' + String(mySymbol)\n'Symbol I used: Symbol(mySymbol)'\n```"]