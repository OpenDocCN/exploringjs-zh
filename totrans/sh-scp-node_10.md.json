["```js\nimport * as path from 'node:path';\n```", "```js\nimport * as assert from 'node:assert/strict';\n```", "```js\n    > path.parse === path.posix.parse\n    true\n    ```", "```js\n> path.win32.parse(String.raw`C:\\Users\\jane\\file.txt`)\n{\n dir: 'C:\\\\Users\\\\jane',\n root: 'C:\\\\',\n base: 'file.txt',\n name: 'file',\n ext: '.txt',\n}\n> path.posix.parse(String.raw`C:\\Users\\jane\\file.txt`)\n{\n dir: '',\n root: '',\n base: 'C:\\\\Users\\\\jane\\\\file.txt',\n name: 'C:\\\\Users\\\\jane\\\\file',\n ext: '.txt',\n}\n```", "```js\n    assert.equal(\n     path.posix.sep, '/' // Path separator on Unix\n    );\n    assert.equal(\n     path.win32.sep, '\\\\' // Path separator on Windows\n    );\n    ```", "```js\n    assert.equal(\n     path.posix.delimiter, ':' // Path delimiter on Unix\n    );\n    assert.equal(\n     path.win32.delimiter, ';' // Path delimiter on Windows\n    );\n    ```", "```js\n> process.env.PATH.split(/(?<=:)/)\n[\n '/opt/homebrew/bin:',\n '/opt/homebrew/sbin:',\n '/usr/local/bin:',\n '/usr/bin:',\n '/bin:',\n '/usr/sbin:',\n '/sbin',\n]\n```", "```js\n> process.env.Path.split(/(?<=;)/)\n[\n 'C:\\\\Windows\\\\system32;',\n 'C:\\\\Windows;',\n 'C:\\\\Windows\\\\System32\\\\Wbem;',\n 'C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\;',\n 'C:\\\\Windows\\\\System32\\\\OpenSSH\\\\;',\n 'C:\\\\ProgramData\\\\chocolatey\\\\bin;',\n 'C:\\\\Program Files\\\\nodejs\\\\',\n]\n```", "```js\nprocess.chdir('/home/jane');\nassert.equal(\n process.cwd(), '/home/jane'\n);\n```", "```js\nprocess.chdir('C:\\\\Windows');\nprocess.chdir('Z:\\\\tmp');\n```", "```js\nassert.equal(\n process.cwd(), 'Z:\\\\tmp'\n);\nprocess.chdir('C:');\nassert.equal(\n process.cwd(), 'C:\\\\Windows'\n);\n```", "```js\n    /home/john/proj\n    ```", "```js\n    .   (current directory)\n    ..  (parent directory)\n    dir\n    ./dir\n    ../dir\n    ../../dir/subdir\n    ```", "```js\n> const abs = '/home/john/proj';\n\n> path.resolve(abs, '.')\n'/home/john/proj'\n> path.resolve(abs, '..')\n'/home/john'\n> path.resolve(abs, 'dir')\n'/home/john/proj/dir'\n> path.resolve(abs, './dir')\n'/home/john/proj/dir'\n> path.resolve(abs, '../dir')\n'/home/john/dir'\n> path.resolve(abs, '../../dir/subdir')\n'/home/dir/subdir'\n```", "```js\n> const full = 'C:\\\\Users\\\\jane\\\\proj';\n\n> path.resolve(full, '\\\\Windows')\n'C:\\\\Windows'\n```", "```js\n> const full = 'C:\\\\Users\\\\jane\\\\proj';\n\n> path.resolve(full, '.')\n'C:\\\\Users\\\\jane\\\\proj'\n> path.resolve(full, '..')\n'C:\\\\Users\\\\jane'\n> path.resolve(full, 'dir')\n'C:\\\\Users\\\\jane\\\\proj\\\\dir'\n> path.resolve(full, '.\\\\dir')\n'C:\\\\Users\\\\jane\\\\proj\\\\dir'\n> path.resolve(full, '..\\\\dir')\n'C:\\\\Users\\\\jane\\\\dir'\n> path.resolve(full, '..\\\\..\\\\dir')\n'C:\\\\Users\\\\dir'\n```", "```js\n// Configure current directories for C: and Z:\nprocess.chdir('C:\\\\Windows\\\\System');\nprocess.chdir('Z:\\\\tmp');\n\nconst full = 'C:\\\\Users\\\\jane\\\\proj';\n\n// Same drive letter\nassert.equal(\n path.resolve(full, 'C:dir'),\n 'C:\\\\Users\\\\jane\\\\proj\\\\dir'\n);\nassert.equal(\n path.resolve(full, 'C:'),\n 'C:\\\\Users\\\\jane\\\\proj'\n);\n\n// Different drive letter\nassert.equal(\n path.resolve(full, 'Z:dir'),\n 'Z:\\\\tmp\\\\dir'\n);\nassert.equal(\n path.resolve(full, 'Z:'),\n 'Z:\\\\tmp'\n);\n```", "```js\n    > os.homedir() // macOS\n    '/Users/rauschma'\n    > os.homedir() // Windows\n    'C:\\\\Users\\\\axel'\n    ```", "```js\n    > os.tmpdir() // macOS\n    '/var/folders/ph/sz0384m11vxf5byk12fzjms40000gn/T'\n    > os.tmpdir() // Windows\n    'C:\\\\Users\\\\axel\\\\AppData\\\\Local\\\\Temp'\n    ```", "```js\npath.resolve(...paths: Array<string>): string\n```", "```js\n> process.cwd()\n'/usr/local'\n> path.resolve()\n'/usr/local'\n```", "```js\n> path.resolve('.')\n'/usr/local'\n> path.resolve('..')\n'/usr'\n> path.resolve('bin')\n'/usr/local/bin'\n> path.resolve('./bin', 'sub')\n'/usr/local/bin/sub'\n> path.resolve('../lib', 'log')\n'/usr/lib/log'\n```", "```js\n> path.resolve('bin', '/home')\n'/home'\n```", "```js\n> path.resolve('/home/john', 'proj', 'src')\n'/home/john/proj/src'\n```", "```js\npath.join(...paths: Array<string>): string\n```", "```js\n> path.posix.join('/usr/local', 'sub', 'subsub')\n'/usr/local/sub/subsub'\n> path.posix.join('relative/dir', 'sub', 'subsub')\n'relative/dir/sub/subsub'\n```", "```js\n> path.posix.join('/usr/local', '..')\n'/usr'\n> path.posix.join('relative/dir', '..')\n'relative'\n```", "```js\n> path.posix.join('/usr/local', '.')\n'/usr/local'\n> path.posix.join('relative/dir', '.')\n'relative/dir'\n```", "```js\n> path.posix.join('dir', '/tmp')\n'dir/tmp'\n> path.win32.join('dir', 'C:\\\\Users')\n'dir\\\\C:\\\\Users'\n```", "```js\n> path.posix.join('/usr/local', '../lib', '.', 'log')\n'/usr/lib/log'\n```", "```js\npath.normalize(path: string): string\n```", "```js\n// Fully qualified path\nassert.equal(\n path.posix.normalize('/home/./john/lib/../photos///pet'),\n '/home/john/photos/pet'\n);\n\n// Partially qualified path\nassert.equal(\n path.posix.normalize('./john/lib/../photos///pet'),\n 'john/photos/pet'\n);\n```", "```js\n// Fully qualified path\nassert.equal(\n path.win32.normalize('C:\\\\Users/jane\\\\doc\\\\..\\\\proj\\\\\\\\src'),\n 'C:\\\\Users\\\\jane\\\\proj\\\\src'\n);\n\n// Partially qualified path\nassert.equal(\n path.win32.normalize('.\\\\jane\\\\doc\\\\..\\\\proj\\\\\\\\src'),\n 'jane\\\\proj\\\\src'\n);\n```", "```js\n> path.posix.normalize('/home/./john/lib/../photos///pet')\n'/home/john/photos/pet'\n> path.posix.join('/home/./john/lib/../photos///pet')\n'/home/john/photos/pet'\n\n> path.posix.normalize('./john/lib/../photos///pet')\n'john/photos/pet'\n> path.posix.join('./john/lib/../photos///pet')\n'john/photos/pet'\n```", "```js\n> process.cwd()\n'/usr/local'\n\n> path.resolve('/home/./john/lib/../photos///pet')\n'/home/john/photos/pet'\n> path.resolve('./john/lib/../photos///pet')\n'/usr/local/john/photos/pet'\n```", "```js\n> process.cwd()\n'C:\\\\Windows\\\\System'\n\n> path.resolve('C:\\\\Users/jane\\\\doc\\\\..\\\\proj\\\\\\\\src')\n'C:\\\\Users\\\\jane\\\\proj\\\\src'\n> path.resolve('.\\\\jane\\\\doc\\\\..\\\\proj\\\\\\\\src')\n'C:\\\\Windows\\\\System\\\\jane\\\\proj\\\\src'\n```", "```js\npath.relative(sourcePath: string, destinationPath: string): string\n```", "```js\n> path.posix.relative('/home/john/', '/home/john/proj/my-lib/README.md')\n'proj/my-lib/README.md'\n> path.posix.relative('/tmp/proj/my-lib/', '/tmp/doc/zsh.txt')\n'../../doc/zsh.txt'\n```", "```js\n> path.win32.relative('Z:\\\\tmp\\\\', 'C:\\\\Users\\\\Jane\\\\')\n'C:\\\\Users\\\\Jane'\n```", "```js\n> path.posix.relative('proj/my-lib/', 'doc/zsh.txt')\n'../../doc/zsh.txt'\n```", "```js\ntype PathObject = {\n dir: string,\n root: string,\n base: string,\n name: string,\n ext: string,\n};\npath.parse(path: string): PathObject\n```", "```js\n> path.posix.parse('/home/jane/file.txt')\n{\n dir: '/home/jane',\n root: '/',\n base: 'file.txt',\n name: 'file',\n ext: '.txt',\n}\n```", "```js\n /      home/jane / file   .txt\n| root |           | name | ext  |\n| dir              | base        |\n```", "```js\n> path.win32.parse(String.raw`C:\\Users\\john\\file.txt`)\n{\n dir: 'C:\\\\Users\\\\john',\n root: 'C:\\\\',\n base: 'file.txt',\n name: 'file',\n ext: '.txt',\n}\n```", "```js\n C:\\    Users\\john \\ file   .txt\n| root |            | name | ext  |\n| dir               | base        |\n```", "```js\npath.basename(path, ext?)\n```", "```js\n> path.basename('/home/jane/file.txt')\n'file.txt'\n```", "```js\n> path.basename('/home/jane/file.txt', '.txt')\n'file'\n> path.basename('/home/jane/file.txt', 'txt')\n'file.'\n> path.basename('/home/jane/file.txt', 'xt')\n'file.t'\n```", "```js\n> path.win32.basename(String.raw`C:\\Users\\john\\file.txt`, '.txt')\n'file'\n> path.win32.basename(String.raw`C:\\Users\\john\\file.txt`, '.TXT')\n'file.txt'\n```", "```js\npath.dirname(path)\n```", "```js\n> path.win32.dirname(String.raw`C:\\Users\\john\\file.txt`)\n'C:\\\\Users\\\\john'\n> path.win32.dirname('C:\\\\Users\\\\john\\\\dir\\\\')\n'C:\\\\Users\\\\john'\n\n> path.posix.dirname('/home/jane/file.txt')\n'/home/jane'\n> path.posix.dirname('/home/jane/dir/')\n'/home/jane'\n```", "```js\npath.extname(path)\n```", "```js\n> path.extname('/home/jane/file.txt')\n'.txt'\n> path.extname('/home/jane/file.')\n'.'\n> path.extname('/home/jane/file')\n''\n> path.extname('/home/jane/')\n''\n> path.extname('/home/jane')\n''\n```", "```js\npath.isAbsolute(path: string): boolean\n```", "```js\n> path.posix.isAbsolute('/home/john')\ntrue\n> path.posix.isAbsolute('john')\nfalse\n```", "```js\n> path.win32.isAbsolute('C:\\\\Users\\\\jane')\ntrue\n> path.win32.isAbsolute('\\\\Users\\\\jane')\ntrue\n> path.win32.isAbsolute('C:jane')\nfalse\n> path.win32.isAbsolute('jane')\nfalse\n```", "```js\ntype PathObject = {\n dir: string,\n root: string,\n base: string,\n name: string,\n ext: string,\n};\npath.format(pathObject: PathObject): string\n```", "```js\n> path.format({dir: '/home/jane', base: 'file.txt'})\n'/home/jane/file.txt'\n```", "```js\nfunction changeFilenameExtension(pathStr, newExtension) {\n if (!newExtension.startsWith('.')) {\n throw new Error(\n 'Extension must start with a dot: '\n + JSON.stringify(newExtension)\n );\n }\n const parts = path.parse(pathStr);\n return path.format({\n ...parts,\n base: undefined, // prevent .base from overriding .name and .ext\n ext: newExtension,\n });\n}\n\nassert.equal(\n changeFilenameExtension('/tmp/file.md', '.html'),\n '/tmp/file.html'\n);\nassert.equal(\n changeFilenameExtension('/tmp/file', '.html'),\n '/tmp/file.html'\n);\nassert.equal(\n changeFilenameExtension('/tmp/file/', '.html'),\n '/tmp/file.html'\n);\n```", "```js\n> '/tmp/file.md'.replace(/\\.md$/i, '.html')\n'/tmp/file.html'\n> '/tmp/file.MD'.replace(/\\.md$/i, '.html')\n'/tmp/file.html'\n```", "```js\nconst universalRelativePath = ['static', 'img', 'logo.jpg'];\n\nconst dataDirUnix = '/home/john/data-dir';\nassert.equal(\n path.posix.resolve(dataDirUnix, ...universalRelativePath),\n '/home/john/data-dir/static/img/logo.jpg'\n);\n\nconst dataDirWindows = 'C:\\\\Users\\\\jane\\\\data-dir';\nassert.equal(\n path.win32.resolve(dataDirWindows, ...universalRelativePath),\n 'C:\\\\Users\\\\jane\\\\data-dir\\\\static\\\\img\\\\logo.jpg'\n);\n```", "```js\nconst dataDir = '/home/john/data-dir';\nconst pathInDataDir = '/home/john/data-dir/static/img/logo.jpg';\nassert.equal(\n path.relative(dataDir, pathInDataDir),\n 'static/img/logo.jpg'\n);\n```", "```js\nimport * as path from 'node:path';\n\nfunction splitRelativePathIntoSegments(relPath) {\n if (path.isAbsolute(relPath)) {\n throw new Error('Path isn\u2019t relative: ' + relPath);\n }\n relPath = path.normalize(relPath);\n const result = [];\n while (true) {\n const base = path.basename(relPath);\n if (base.length === 0) break;\n result.unshift(base);\n const dir = path.dirname(relPath);\n if (dir === '.') break;\n relPath = dir;\n }\n return result;\n}\n```", "```js\n> splitRelativePathIntoSegments('static/img/logo.jpg')\n[ 'static', 'img', 'logo.jpg' ]\n> splitRelativePathIntoSegments('file.txt')\n[ 'file.txt' ]\n```", "```js\n> splitRelativePathIntoSegments('static/img/logo.jpg')\n[ 'static', 'img', 'logo.jpg' ]\n> splitRelativePathIntoSegments('C:static/img/logo.jpg')\n[ 'static', 'img', 'logo.jpg' ]\n\n> splitRelativePathIntoSegments('file.txt')\n[ 'file.txt' ]\n> splitRelativePathIntoSegments('C:file.txt')\n[ 'file.txt' ]\n```", "```js\nimport minimatch from 'minimatch';\nassert.equal(\n minimatch('/dir/sub/file.txt', '/dir/sub/*.txt'), true\n);\nassert.equal(\n minimatch('/dir/sub/file.txt', '/**/file.txt'), true\n);\n```", "```js\nminimatch(path: string, glob: string, options?: MinimatchOptions): boolean\n```", "```js\n    > minimatch('/usr/local/.tmp/data.json', '/usr/**/data.json')\n    false\n    > minimatch('/usr/local/.tmp/data.json', '/usr/**/data.json', {dot: true})\n    true\n\n    > minimatch('/tmp/.log/events.txt', '/tmp/*/events.txt')\n    false\n    > minimatch('/tmp/.log/events.txt', '/tmp/*/events.txt', {dot: true})\n    true\n    ```", "```js\n    > minimatch('/dir/file.txt', 'file.txt')\n    false\n    > minimatch('/dir/file.txt', 'file.txt', {matchBase: true})\n    true\n    ```", "```js\nnew Minimatch(pattern: string, options?: MinimatchOptions)\n```", "```js\nimport minimatch from 'minimatch';\nconst {Minimatch} = minimatch;\nconst glob = new Minimatch('/dir/sub/*.txt');\nassert.equal(\n glob.match('/dir/sub/file.txt'), true\n);\nassert.equal(\n glob.match('/dir/sub/notes.txt'), true\n);\n```", "```js\n> minimatch('dir\\\\sub/file.txt', 'dir/sub/file.txt')\ntrue\n```", "```js\n> minimatch('./file.txt', './file.txt')\ntrue\n> minimatch('./file.txt', 'file.txt')\nfalse\n> minimatch('file.txt', './file.txt')\nfalse\n```", "```js\n> path.normalize('./file.txt')\n'file.txt'\n```", "```js\n> minimatch('/dir/file.txt', '/dir/file.txt')\ntrue\n> minimatch('dir/file.txt', 'dir/file.txt')\ntrue\n> minimatch('/dir/file.txt', 'dir/file.txt')\nfalse\n\n> minimatch('/dir/file.txt', 'file.txt')\nfalse\n```", "```js\n> minimatch('/dir/file.txt', 'file.txt', {matchBase: true})\ntrue\n```", "```js\n> minimatch('/dir/file.txt', '/*/file.txt')\ntrue\n> minimatch('/tmp/file.txt', '/*/file.txt')\ntrue\n\n> minimatch('/dir/file.txt', '/dir/*.txt')\ntrue\n> minimatch('/dir/data.txt', '/dir/*.txt')\ntrue\n```", "```js\n> minimatch('file.txt', '*')\ntrue\n> minimatch('.gitignore', '*')\nfalse\n> minimatch('.gitignore', '.*')\ntrue\n> minimatch('/tmp/.log/events.txt', '/tmp/*/events.txt')\nfalse\n```", "```js\n> minimatch('.gitignore', '*', {dot: true})\ntrue\n> minimatch('/tmp/.log/events.txt', '/tmp/*/events.txt', {dot: true})\ntrue\n```", "```js\n> minimatch('/file.txt', '/**/file.txt')\ntrue\n> minimatch('/dir/file.txt', '/**/file.txt')\ntrue\n> minimatch('/dir/sub/file.txt', '/**/file.txt')\ntrue\n```", "```js\n> minimatch('file.txt', '/**/file.txt')\nfalse\n```", "```js\n> minimatch('/usr/local/.tmp/data.json', '/usr/**/data.json')\nfalse\n```", "```js\n> minimatch('/usr/local/.tmp/data.json', '/usr/**/data.json', {dot: true})\ntrue\n```", "```js\n> minimatch('file.txt', '!**/*.txt')\nfalse\n> minimatch('file.js', '!**/*.txt')\ntrue\n```", "```js\n> minimatch('file.txt', 'file.{txt,js}')\ntrue\n> minimatch('file.js', 'file.{txt,js}')\ntrue\n```", "```js\n> minimatch('file1.txt', 'file{1..3}.txt')\ntrue\n> minimatch('file2.txt', 'file{1..3}.txt')\ntrue\n> minimatch('file3.txt', 'file{1..3}.txt')\ntrue\n> minimatch('file4.txt', 'file{1..3}.txt')\nfalse\n```", "```js\n> minimatch('file1.txt', 'file{01..12}.txt')\nfalse\n> minimatch('file01.txt', 'file{01..12}.txt')\ntrue\n> minimatch('file02.txt', 'file{01..12}.txt')\ntrue\n> minimatch('file12.txt', 'file{01..15}.txt')\ntrue\n```", "```js\nassert.equal(\n fs.readFileSync(\n '/tmp/data.txt', {encoding: 'utf-8'}),\n 'Content'\n);\nassert.equal(\n fs.readFileSync(\n new URL('file:///tmp/data.txt'), {encoding: 'utf-8'}),\n 'Content'\n);\n```", "```js\nimport {URL} from 'node:url';\n```", "```js\n// If there is only one argument, it must be a proper URI\nassert.equal(\n new URL('https://example.com/public/page.html').toString(),\n 'https://example.com/public/page.html'\n);\nassert.throws(\n () => new URL('../book/toc.html'),\n /^TypeError \\[ERR_INVALID_URL\\]: Invalid URL$/\n);\n\n// Resolve a relative reference against a base URI \nassert.equal(\n new URL(\n '../book/toc.html',\n 'https://example.com/public/page.html'\n ).toString(),\n 'https://example.com/book/toc.html'\n);\n```", "```js\nnew URL(uriRef: string, baseUri: string)\n```", "```js\nconst obj = { toString() {return 'https://example.com'} };\nassert.equal(\n new URL('index.html', obj).href,\n 'https://example.com/index.html'\n);\n```", "```js\nconst url = new URL('https://example.com/dir/file1.html');\nassert.equal(\n new URL('../file2.html', url).href,\n 'https://example.com/file2.html'\n);\n```", "```js\ntype URL = {\n protocol: string,\n username: string,\n password: string,\n hostname: string,\n port: string,\n host: string,\n readonly origin: string,\n\n pathname: string,\n\n search: string,\n readonly searchParams: URLSearchParams,\n hash: string,\n\n href: string,\n toString(): string,\n toJSON(): string,\n}\n```", "```js\nconst url = new URL('https://example.com/about.html');\n\nassert.equal(\n url.toString(),\n 'https://example.com/about.html'\n);\nassert.equal(\n url.href,\n 'https://example.com/about.html'\n);\nassert.equal(\n url.toJSON(),\n 'https://example.com/about.html'\n);\n```", "```js\nconst jsonStr = JSON.stringify({\n pageUrl: new URL('https://exploringjs.com')\n});\nassert.equal(\n jsonStr, '{\"pageUrl\":\"https://exploringjs.com\"}'\n);\n```", "```js\nconst props = pickProps(\n new URL('https://jane:pw@example.com:80/news.html?date=today#misc'),\n 'protocol', 'username', 'password', 'hostname', 'port', 'host',\n 'origin', 'pathname', 'search', 'hash', 'href'\n);\nassert.deepEqual(\n props,\n {\n protocol: 'https:',\n username: 'jane',\n password: 'pw',\n hostname: 'example.com',\n port: '80',\n host: 'example.com:80',\n origin: 'https://example.com:80',\n pathname: '/news.html',\n search: '?date=today',\n hash: '#misc',\n href: 'https://jane:pw@example.com:80/news.html?date=today#misc'\n }\n);\nfunction pickProps(input, ...keys) {\n const output = {};\n for (const key of keys) {\n output[key] = input[key];\n }\n return output;\n}\n```", "```js\nconst url = new URL('https://example.com');\nurl.hostname = '2ality.com';\nassert.equal(\n url.href, 'https://2ality.com/'\n);\n```", "```js\n// Object.assign() invokes setters when transferring property values\nconst urlFromParts = (parts) => Object.assign(\n new URL('https://example.com'), // minimal dummy URL\n parts // assigned to the dummy\n);\n\nconst url = urlFromParts({\n protocol: 'https:',\n hostname: '2ality.com',\n pathname: '/p/about.html',\n});\nassert.equal(\n url.href, 'https://2ality.com/p/about.html'\n);\n```", "```js\nconst url = new URL('https://example.com/?topic=js');\nassert.equal(\n url.searchParams.get('topic'), 'js'\n);\nassert.equal(\n url.searchParams.has('topic'), true\n);\n```", "```js\nurl.searchParams.append('page', '5');\nassert.equal(\n url.href, 'https://example.com/?topic=js&page=5'\n);\n\nurl.searchParams.set('topic', 'css');\nassert.equal(\n url.href, 'https://example.com/?topic=css&page=5'\n);\n```", "```js\nurl.fileURLToPath(url: URL | string): string\n```", "```js\nimport * as url from 'node:url';\n\n//::::: Unix :::::\n\nconst url1 = new URL('file:///tmp/with%20space.txt');\nassert.equal(\n url1.pathname, '/tmp/with%20space.txt');\nassert.equal(\n url.fileURLToPath(url1), '/tmp/with space.txt');\n\nconst url2 = new URL('file:///home/thor/Mj%C3%B6lnir.txt');\nassert.equal(\n url2.pathname, '/home/thor/Mj%C3%B6lnir.txt');\nassert.equal(\n url.fileURLToPath(url2), '/home/thor/Mj\u00f6lnir.txt');\n\n//::::: Windows :::::\n\nconst url3 = new URL('file:///C:/dir/');\nassert.equal(\n url3.pathname, '/C:/dir/');\nassert.equal(\n url.fileURLToPath(url3), 'C:\\\\dir\\\\');\n```", "```js\nurl.pathToFileURL(path: string): URL\n```", "```js\n> url.pathToFileURL('/home/john/Work Files').href\n'file:///home/john/Work%20Files'\n```", "```js\nfunction readData() {\n const url = new URL('data.txt', import.meta.url);\n return fs.readFileSync(url, {encoding: 'UTF-8'});\n}\n```", "```js\n> await fetch('file:///tmp/file.txt')\nTypeError: fetch failed\n cause: Error: not implemented... yet...\n```", "```js\nif (require.main === module) {\n // Main CommonJS module\n}\n```", "```js\nimport * as url from 'node:url';\n\nif (import.meta.url.startsWith('file:')) { // (A)\n const modulePath = url.fileURLToPath(import.meta.url);\n if (process.argv[1] === modulePath) { // (B)\n // Main ESM module\n }\n}\n```", "```js\n    process.argv[1] = path.resolve(process.argv[1]);\n    ```"]