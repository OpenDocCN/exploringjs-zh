- en: 17 Exploring Promises by implementing them
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17 通过实现Promise来探索Promise
- en: 原文：[https://exploringjs.com/deep-js/ch_implementing-promises.html](https://exploringjs.com/deep-js/ch_implementing-promises.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/deep-js/ch_implementing-promises.html](https://exploringjs.com/deep-js/ch_implementing-promises.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '17.1 [Refresher: states of Promises](ch_implementing-promises.html#refresher-states-of-promises)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 17.1 [复习：Promise的状态](ch_implementing-promises.html#refresher-states-of-promises)
- en: '17.2 [Version 1: Stand-alone Promise](ch_implementing-promises.html#version-1-stand-alone-promise)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 17.2 [版本1：独立的Promise](ch_implementing-promises.html#version-1-stand-alone-promise)
- en: 17.2.1 [Method `.then()`](ch_implementing-promises.html#method-.then)
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 17.2.1 [方法`.then()`](ch_implementing-promises.html#method-.then)
- en: 17.2.2 [Method `.resolve()`](ch_implementing-promises.html#method-.resolve)
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 17.2.2 [方法`.resolve()`](ch_implementing-promises.html#method-.resolve)
- en: '17.3 [Version 2: Chaining `.then()` calls](ch_implementing-promises.html#version-2-chaining-.then-calls)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 17.3 [版本2：链接`.then()`调用](ch_implementing-promises.html#version-2-chaining-.then-calls)
- en: 17.4 [Convenience method `.catch()`](ch_implementing-promises.html#convenience-method-.catch)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 17.4 [便捷方法`.catch()`](ch_implementing-promises.html#convenience-method-.catch)
- en: 17.5 [Omitting reactions](ch_implementing-promises.html#omitting-reactions)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 17.5 [省略反应](ch_implementing-promises.html#omitting-reactions)
- en: 17.6 [The implementation](ch_implementing-promises.html#the-implementation)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 17.6 [实现](ch_implementing-promises.html#the-implementation)
- en: '17.7 [Version 3: Flattening Promises returned from `.then()` callbacks](ch_implementing-promises.html#version-3-flattening-promises-returned-from-.then-callbacks)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 17.7 [版本3：扁平化从`.then()`回调返回的Promise](ch_implementing-promises.html#version-3-flattening-promises-returned-from-.then-callbacks)
- en: 17.7.1 [Returning Promises from a callback of `.then()`](ch_implementing-promises.html#returning-promises-from-a-callback-of-.then)
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 17.7.1 [从`.then()`的回调中返回Promise](ch_implementing-promises.html#returning-promises-from-a-callback-of-.then)
- en: 17.7.2 [Flattening makes Promise states more complicated](ch_implementing-promises.html#flattening-makes-promise-states-more-complicated)
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 17.7.2 [扁平化使Promise状态更加复杂](ch_implementing-promises.html#flattening-makes-promise-states-more-complicated)
- en: 17.7.3 [Implementing Promise-flattening](ch_implementing-promises.html#implementing-promise-flattening)
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 17.7.3 [实现Promise扁平化](ch_implementing-promises.html#implementing-promise-flattening)
- en: '17.8 [Version 4: Exceptions thrown in reaction callbacks](ch_implementing-promises.html#version-4-exceptions-thrown-in-reaction-callbacks)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 17.8 [版本4：在反应回调中抛出异常](ch_implementing-promises.html#version-4-exceptions-thrown-in-reaction-callbacks)
- en: '17.9 [Version 5: Revealing constructor pattern](ch_implementing-promises.html#version-5-revealing-constructor-pattern)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 17.9 [版本5：揭示构造函数模式](ch_implementing-promises.html#version-5-revealing-constructor-pattern)
- en: '* * *'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '![](../Images/0c2cffc9b09a6e4a1ac19d36b7230eed.png)  **Required knowledge:
    Promises**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0c2cffc9b09a6e4a1ac19d36b7230eed.png)  **所需知识：Promise**'
- en: For this chapter, you should be roughly familiar with Promises, but much relevant
    knowledge is also reviewed here. If necessary, you can read [the chapter on Promises
    in “JavaScript for impatient programmers”](https://exploringjs.com/impatient-js/ch_promises.html).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您应该对Promise有一定了解，但这里也复习了许多相关知识。如果需要，您可以阅读[“JavaScript for impatient programmers”中关于Promise的章节](https://exploringjs.com/impatient-js/ch_promises.html)。
- en: 'In this chapter, we will approach Promises from a different angle: Instead
    of using this API, we will create a simple implementation of it. This different
    angle once helped me greatly with making sense of Promises.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将从不同的角度来接触Promise：我们将创建一个简单的实现。这种不同的角度曾经帮助我很大地理解Promise。
- en: The Promise implementation is the class `ToyPromise`. In order to be easier
    to understand, it doesn’t completely match the API. But it is close enough to
    still give us much insight into how Promises work.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Promise的实现是`ToyPromise`类。为了更容易理解，它并不完全匹配API。但它足够接近，仍然能让我们深入了解Promise的工作原理。
- en: '![](../Images/0c2cffc9b09a6e4a1ac19d36b7230eed.png)  **Repository with code**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0c2cffc9b09a6e4a1ac19d36b7230eed.png)  **带有代码的存储库**'
- en: '`ToyPromise` is available on GitHub, in the repository [`toy-promise`](https://github.com/rauschma/toy-promise).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`ToyPromise`可以在GitHub上找到，存储在[`toy-promise`](https://github.com/rauschma/toy-promise)存储库中。'
- en: '17.1 Refresher: states of Promises'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 17.1 复习：Promise的状态
- en: '![](../Images/2464420838a24a1e997c946490e804d6.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2464420838a24a1e997c946490e804d6.png)'
- en: 'Figure 11: The states of a Promise (simplified version): A Promise is initially
    pending. If we resolve it, it becomes fulfilled. If we reject it, it becomes rejected.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图11：Promise的状态（简化版本）：Promise最初是pending状态。如果我们解决它，它就会变成fulfilled。如果我们拒绝它，它就会变成rejected。
- en: 'We start with a simplified version of how Promise states work (fig. [11](#fig:promise-states-simple)):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个简化版本开始解释Promise状态的工作方式（图[11](#fig:promise-states-simple)）：
- en: A Promise is initially *pending*.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Promise最初是*pending*状态。
- en: If a Promise is *resolved* with a value `v`, it becomes *fulfilled* (later,
    we’ll see that resolving can also reject). `v` is now the *fulfillment value*
    of the Promise.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个Promise被值`v` *resolved*，它就会变成*fulfilled*（稍后，我们将看到解决也可以拒绝）。`v`现在是Promise的*fulfillment
    value*。
- en: If a Promise is *rejected* with an error `e`, it becomes *rejected*. `e` is
    now the *rejection value* of the Promise.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个Promise被错误`e` *rejected*，它就会变成*rejected*。`e`现在是Promise的*rejection value*。
- en: '17.2 Version 1: Stand-alone Promise'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 17.2 版本1：独立的Promise
- en: 'Our first implementation is a stand-alone Promise with minimal functionality:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个实现是一个独立的Promise，具有最小的功能：
- en: We can create a Promise.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以创建一个Promise。
- en: We can resolve or reject a Promise and we can only do it once.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以解决或拒绝一个Promise，而且只能做一次。
- en: We can register *reactions* (callbacks) via `.then()`. Registering must do the
    right thing independently of whether the Promise has already been settled or not.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以通过`.then()`注册*reactions*（回调）。注册必须独立于Promise是否已经解决或未解决而做正确的事情。
- en: '`.then()` does not support chaining, yet – it does not return anything.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.then()`目前不支持链接，它不返回任何东西。'
- en: '`ToyPromise1` is a class with three prototype methods:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`ToyPromise1`是一个具有三个原型方法的类：'
- en: '`ToyPromise1.prototype.resolve(value)`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ToyPromise1.prototype.resolve(value)`'
- en: '`ToyPromise1.prototype.reject(reason)`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ToyPromise1.prototype.reject(reason)`'
- en: '`ToyPromise1.prototype.then(onFulfilled, onRejected)`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ToyPromise1.prototype.then(onFulfilled, onRejected)`'
- en: That is, `resolve` and `reject` are methods (and not functions handed to a callback
    parameter of the constructor).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，`resolve`和`reject`是方法（而不是传递给构造函数回调参数的函数）。
- en: 'This is how this first implementation is used:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第一个实现的用法：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Fig. [12](#fig:promise-impl1-simple) illustrates how our first `ToyPromise`
    works.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图12说明了我们的第一个`ToyPromise`是如何工作的。
- en: '![](../Images/6b17215a2abf7f098e996c026fba60fd.png)  **The diagrams of the
    data flow in Promises are optional**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/6b17215a2abf7f098e996c026fba60fd.png) **Promises中的数据流图是可选的**'
- en: The motivation for the diagrams is to have a visual explanation for how Promises
    work. But they are optional. If you find them confusing, you can ignore them and
    focus on the code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图表的动机是为Promises的工作原理提供一个视觉解释。但它们是可选的。如果你觉得它们令人困惑，你可以忽略它们，专注于代码。
- en: '![](../Images/e65f0282853cd39c5f190034058283ac.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e65f0282853cd39c5f190034058283ac.png)'
- en: 'Figure 12: `ToyPromise1`: If a Promise is resolved, the provided value is passed
    on to the *fulfillment reactions* (first arguments of `.then()`). If a Promise
    is rejected, the provided value is passed on to the *rejection reactions* (second
    arguments of `.then()`).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图12：`ToyPromise1`：如果Promise被解决，提供的值将传递给*满足反应*（`.then()`的第一个参数）。如果Promise被拒绝，提供的值将传递给*拒绝反应*（`.then()`的第二个参数）。
- en: 17.2.1 Method `.then()`
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 17.2.1 方法`.then()`
- en: 'Let’s examine `.then()` first. It has to handle two cases:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先来看一下`.then()`。它必须处理两种情况：
- en: If the Promise is still pending, it queues invocations of `onFulfilled` and
    `onRejected`. They are to be used later, when the Promise is settled.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果Promise仍处于挂起状态，则会排队调用`onFulfilled`和`onRejected`。它们将在Promise解决时使用。
- en: If the Promise is already fulfilled or rejected, `onFulfilled` or `onRejected`
    can be invoked right away.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果Promise已经被满足或拒绝，`onFulfilled`或`onRejected`可以立即被调用。
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The previous code snippet uses the following helper function:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个代码片段使用以下辅助函数：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Promises must always settle asynchronously. That’s why we don’t directly execute
    tasks, we add them to the task queue of the event loop (of browsers, Node.js,
    etc.). Note that the real Promise API doesn’t use normal tasks (like `setTimeout()`),
    it uses [*microtasks*](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/),
    which are tightly coupled with the current normal task and always execute directly
    after it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Promise必须始终异步解决。这就是为什么我们不直接执行任务，而是将它们添加到事件循环的任务队列中（浏览器、Node.js等）。请注意，真正的Promise
    API不使用普通任务（如`setTimeout()`），它使用[*微任务*](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)，它们与当前普通任务紧密耦合，并且总是直接执行。
- en: 17.2.2 Method `.resolve()`
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 17.2.2 方法`.resolve()`
- en: '`.resolve()` works as follows: If the Promise is already settled, it does nothing
    (ensuring that a Promise can only be settled once). Otherwise, the state of the
    Promise changes to `''fulfilled''` and the result is cached in `this.promiseResult`.
    Next, all fulfillment reactions that have been enqueued so far, are invoked.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`.resolve()`的工作方式如下：如果Promise已经解决，它什么也不做（确保Promise只能解决一次）。否则，Promise的状态将更改为`''fulfilled''`，结果将缓存在`this.promiseResult`中。接下来，将调用到目前为止已排队的所有满足反应。'
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`reject()` is similar to `resolve()`.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`reject()`类似于`resolve()`。'
- en: '17.3 Version 2: Chaining `.then()` calls'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 17.3 版本2：链接`.then()`调用
- en: '![](../Images/b17ddb8b605b284cdb68bb5baf7692ee.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b17ddb8b605b284cdb68bb5baf7692ee.png)'
- en: 'Figure 13: `ToyPromise2` chains `.then()` calls: `.then()` now returns a Promise
    that is resolved by whatever value is returned by the fulfillment reaction or
    the rejection reaction.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图13：`ToyPromise2`链接`.then()`调用：`.then()`现在返回一个Promise，该Promise由满足反应或拒绝反应返回的任何值解决。
- en: 'The next feature we implement is chaining (fig. [13](#fig:promise-impl2-chaining)):
    A value that we return from a fulfillment reaction or a rejection reaction can
    be handled by a fulfilment reaction in a following `.then()` call. (In the next
    version, chaining will become much more useful, due to special support for returning
    Promises.)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现的下一个特性是链接（图13）：我们从满足反应或拒绝反应中返回的值可以由后续的`.then()`调用中的满足反应处理。（在下一个版本中，由于特殊支持返回Promises，链接将变得更加有用。）
- en: 'In the following example:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中：
- en: 'First `.then()`: We return a value in a fulfillment reaction.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个`.then()`：我们在满足反应中返回一个值。
- en: 'Second `.then()`: We receive that value via a fulfillment reaction.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个`.then()`：我们通过满足反应接收该值。
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the following example:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中：
- en: 'First `.then()`: We return a value in a rejection reaction.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个`.then()`：我们在拒绝反应中返回一个值。
- en: 'Second `.then()`: We receive that value via a fulfillment reaction.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个`.then()`：我们通过满足反应接收该值。
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 17.4 Convenience method `.catch()`
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 17.4 便利方法`.catch()`
- en: The new version introduces a convenience method `.catch()` that makes it easier
    to only provide a rejection reaction. Note that only providing a fulfillment reaction
    is already easy – we simply omit the second parameter of `.then()` (see previous
    example).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本引入了一个方便的方法`.catch()`，使得只提供拒绝反应更容易。请注意，只提供满足反应已经很容易 - 我们只需省略`.then()`的第二个参数（参见上一个示例）。
- en: 'The previous example looks nicer if we use it (line A):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用它，上一个示例看起来更好（A行）：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following two method invocations are equivalent:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两个方法调用是等效的：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is how `.catch()` is implemented:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`.catch()`的实现方式：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 17.5 Omitting reactions
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 17.5 省略反应
- en: The new version also forwards fulfillments if we omit a fulfillment reaction
    and it forwards rejections if we omit a rejection reaction. Why is that useful?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本还会在我们省略满足反应时转发满足，并在我们省略拒绝反应时转发拒绝。这有什么用呢？
- en: 'The following example demonstrates passing on rejections:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如何传递拒绝：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`rejectionReaction` can now handle the rejections of `someAsyncFunction()`,
    `fulfillmentReaction1`, and `fulfillmentReaction2`.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`rejectionReaction`现在可以处理`someAsyncFunction()`、`fulfillmentReaction1`和`fulfillmentReaction2`的拒绝。'
- en: 'The following example demonstrates passing on fulfillments:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如何传递满足：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If `someAsyncFunction()` rejects its Promise, `rejectionReaction` can fix whatever
    is wrong and return a fulfillment value that is then handled by `fulfillmentReaction`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`someAsyncFunction()`拒绝了它的Promise，`rejectionReaction`可以修复任何问题并返回一个完成值，然后由`fulfillmentReaction`处理。
- en: If `someAsyncFunction()` fulfills its Promise, `fulfillmentReaction` can also
    handle it because the `.catch()` is skipped.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`someAsyncFunction()`实现了它的Promise，`fulfillmentReaction`也可以处理它，因为`.catch()`被跳过了。
- en: 17.6 The implementation
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 17.6 实现
- en: How is all of this handled under the hood?
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些是如何在底层处理的？
- en: '`.then()` returns a Promise that is resolved with what either `onFulfilled`
    or `onRejected` return.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.then()`返回一个Promise，该Promise解析为`onFulfilled`或`onRejected`返回的内容。'
- en: If `onFulfilled` or `onRejected` are missing, whatever they would have received
    is passed on to the Promise returned by `.then()`.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`onFulfilled`或`onRejected`丢失，无论它们将接收到什么都会传递给由`.then()`返回的Promise。
- en: 'Only `.then()` changes:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 只有`.then()`发生了变化：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`.then()` creates and returns a new Promise (first line and last line of the
    method). Additionally:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`.then()`创建并返回一个新的Promise（方法的第一行和最后一行）。另外：'
- en: '`fulfillmentTask` works differently. This is what now happens after fulfillment:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fulfillmentTask`的工作方式不同。现在完成后会发生什么：'
- en: If `onFullfilled` was provided, it is called and its result is used to resolve
    `resultPromise`.
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果提供了`onFullfilled`，则调用它并使用其结果来解析`resultPromise`。
- en: If `onFulfilled` is missing, we use the fulfillment value of the current Promise
    to resolve `resultPromise`.
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`onFulfilled`丢失，我们使用当前Promise的完成值来解析`resultPromise`。
- en: '`rejectionTask` works differently. This is what now happens after rejection:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rejectionTask`的工作方式不同。这是拒绝后现在发生的事情：'
- en: 'If `onRejected` was provided, it is called and its result is used to *resolve*
    `resultPromise`. Note that `resultPromise` is not rejected: We are assuming that
    `onRejected()` fixed whatever problem there was.'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果提供了`onRejected`，则调用它并使用其结果来*解析*`resultPromise`。请注意，`resultPromise`不会被拒绝：我们假设`onRejected()`修复了任何问题。
- en: If `onRejected` is missing, we use the rejection value of the current Promise
    to reject `resultPromise`.
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`onRejected`丢失，我们使用当前Promise的拒绝值来拒绝`resultPromise`。
- en: '17.7 Version 3: Flattening Promises returned from `.then()` callbacks'
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 17.7 版本3：扁平化从`.then()`回调返回的Promises
- en: 17.7.1 Returning Promises from a callback of `.then()`
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 17.7.1 从`.then()`回调返回Promises
- en: 'Promise-flattening is mostly about making chaining more convenient: If we want
    to pass on a value from one `.then()` callback to the next one, we return it in
    the former. After that, `.then()` puts it into the Promise that it has already
    returned.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Promise扁平化主要是为了使链接更加方便：如果我们想要将一个值从一个`.then()`回调传递到下一个回调，我们在前者中返回它。之后，`.then()`将其放入它已经返回的Promise中。
- en: 'This approach becomes inconvenient if we return a Promise from a `.then()`
    callback. For example, the result of a Promise-based function (line A):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从`.then()`回调返回一个Promise，这种方法就变得不方便。例如，基于Promise的函数的结果（A行）：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This time, putting the value returned in line A into the Promise returned by
    `.then()` forces us to unwrap that Promise in line B. It would be nice if instead,
    the Promise returned in line A replaced the Promise returned by `.then()`. How
    exactly that could be done is not immediately clear, but if it worked, it would
    let us write our code like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，将A行返回的值放入由`.then()`返回的Promise中，迫使我们在B行解开该Promise。如果能够让A行返回的Promise替换由`.then()`返回的Promise，那将是很好的。如何确切地做到这一点并不立即清楚，但如果成功，我们可以像这样编写我们的代码：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In line A, we returned a Promise. Thanks to Promise-flattening, `result2` is
    the fulfillment value of that Promise, not the Promise itself.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在A行，我们返回了一个Promise。由于Promise扁平化，`result2`是该Promise的完成值，而不是Promise本身。
- en: 17.7.2 Flattening makes Promise states more complicated
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 17.7.2 扁平化使Promise状态变得更加复杂
- en: '![](../Images/290901f5575b7fa8e8b287bbaf550458.png)  **Flattening Promises
    in the ECMAScript specification**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/290901f5575b7fa8e8b287bbaf550458.png)  **在ECMAScript规范中扁平化Promises**'
- en: In the ECMAScript specification, the details of flattening Promises are described
    in [section “Promise Objects”](https://tc39.es/ecma262/#sec-promise-objects).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在ECMAScript规范中，扁平化Promises的细节在[“Promise Objects”部分](https://tc39.es/ecma262/#sec-promise-objects)中有描述。
- en: How does the Promise API handle flattening?
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Promise API如何处理扁平化？
- en: 'If a Promise P is resolved with a Promise Q, then P does not wrap Q, P “becomes”
    Q: State and settlement value of P are now always the same as Q’s. That helps
    us with `.then()` because `.then()` resolves the Promise it returns with the value
    returned by one of its callbacks.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Promise P用Promise Q解析，那么P不会包装Q，P“变成”Q：P的状态和解决值现在总是与Q的相同。这有助于我们理解`.then()`，因为`.then()`将其返回的Promise解析为其回调之一返回的值。
- en: 'How does P become Q? By *locking in* on Q: P becomes externally unresolvable
    and a settlement of Q triggers a settlement of P. Lock-in is an additional invisible
    Promise state that makes states more complicated.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: P如何变成Q？通过*锁定*Q：P变得外部无法解决，Q的解决会触发P的解决。锁定是一个额外的不可见的Promise状态，使状态变得更加复杂。
- en: 'The Promise API has one additional feature: Q doesn’t have to be a Promise,
    only a so-called *thenable*. A thenable is an object with a method `.then()`.
    The reason for this added flexibility is to enable different Promise implementations
    to work together (which mattered when Promises were first added to the language).'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Promise API还有一个额外的特性：Q不必是一个Promise，只需是一个所谓的*thenable*。thenable是一个带有方法`.then()`的对象。增加这种灵活性的原因是为了使不同的Promise实现能够一起工作（当Promise首次添加到语言中时很重要）。
- en: Fig. [14](#fig:promise-states-all) visualizes the new states.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图[14]（#fig:promise-states-all）可视化了新的状态。
- en: '![](../Images/0742c20efb6f5057f0bd62c47d52311d.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0742c20efb6f5057f0bd62c47d52311d.png)'
- en: 'Figure 14: All states of a Promise: Promise-flattening introduces the invisible
    pseudo-state “locked-in”. That state is reached if a Promise P is resolved with
    a thenable Q. Afterwards, state and settlement value of P is always the same as
    those of Q.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图14：Promise的所有状态：Promise扁平化引入了不可见的伪状态“锁定”。如果Promise P用thenable Q解析，那么P的状态和解决值总是与Q相同。
- en: 'Note that the concept of *resolving* has also become more complicated. Resolving
    a Promise now only means that it can’t be settled directly, anymore:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，*解决*的概念也变得更加复杂。现在解决一个Promise只意味着它不能直接被解决：
- en: 'Resolving may reject a Promise: We can resolve a Promise with a rejected Promise.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决可能会拒绝一个Promise：我们可以用一个被拒绝的Promise来解决一个Promise。
- en: 'Resolving may not even settle a Promise: We can resolve a Promise with another
    one that is always pending.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决甚至可能不会解决一个Promise：我们可以用另一个始终处于挂起状态的Promise来解决一个Promise。
- en: 'The ECMAScript specification puts it this way: “An unresolved Promise is always
    in the pending state. A resolved Promise may be pending, fulfilled, or rejected.”'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript规范是这样规定的：“一个未解决的Promise始终处于挂起状态。已解决的Promise可能是挂起的、已实现的或已拒绝的。”
- en: 17.7.3 Implementing Promise-flattening
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 17.7.3 实现Promise扁平化
- en: Fig. [15](#fig:promise-impl3-flattening) shows how `ToyPromise3` handles flattening.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图[15](#fig:promise-impl3-flattening)显示了`ToyPromise3`如何处理扁平化。
- en: '![](../Images/9199e8ef16c2591c4b1c8fde86d52e89.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9199e8ef16c2591c4b1c8fde86d52e89.png)'
- en: 'Figure 15: `ToyPromise3` flattens resolved Promises: If the first Promise is
    resolved with a thenable `x1`, it locks in on `x1` and is settled with the settlement
    value of `x1`. If the first Promise is resolved with a non-thenable value, everything
    works as it did before.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图15：`ToyPromise3`扁平化已解决的Promises：如果第一个Promise以一个thenable `x1`解决，它将锁定在`x1`上，并以`x1`的解决值解决。如果第一个Promise以一个非thenable值解决，一切都与以前一样。
- en: 'We detect thenables via this function:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过这个函数检测thenables：
- en: '[PRE16]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To implement lock-in, we introduce a new boolean flag `._alreadyResolved`.
    Setting it to `true` deactivates `.resolve()` and `.reject()` – for example:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现锁定，我们引入了一个新的布尔标志`._alreadyResolved`。将其设置为`true`会停用`.resolve()`和`.reject()`，例如：
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If `value` is a thenable then we lock the current Promise in on it:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`value`是一个thenable，那么我们将当前Promise锁定在它上面：
- en: If `value` is fulfilled with a result, the current Promise is also fulfilled
    with that result.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`value`以结果实现，当前Promise也将以该结果实现。
- en: If `value` is rejected with an error, the current Promise is also rejected with
    that error.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`value`以错误拒绝，当前Promise也将以该错误拒绝。
- en: The settling is performed via the private methods `._doFulfill()` and `._doReject()`,
    to get around the protection via `._alreadyResolved`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 通过私有方法`._doFulfill()`和`._doReject()`执行结算，以绕过`._alreadyResolved`的保护。
- en: '`._doFulfill()` is relatively simple:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`._doFulfill()`相对简单：'
- en: '[PRE18]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`.reject()` is not shown here. Its only new functionality is that it now also
    obeys `._alreadyResolved`.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有显示`.reject()`。它唯一的新功能是它现在也遵守`._alreadyResolved`。
- en: '17.8 Version 4: Exceptions thrown in reaction callbacks'
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 17.8 版本4：反应回调中抛出的异常
- en: '![](../Images/6a4077d1031b0a2125df45147ca425b2.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6a4077d1031b0a2125df45147ca425b2.png)'
- en: 'Figure 16: `ToyPromise4` converts exceptions in Promise reactions to rejections
    of the Promise returned by `.then()`.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图16：`ToyPromise4`将Promise反应中的异常转换为`.then()`返回的Promise的拒绝。
- en: As our final feature, we’d like our Promises to handle exceptions in user code
    as rejections (fig. [16](#fig:promise-impl4-exceptions)). In this chapter, “user
    code” means the two callback parameters of .`then()`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 作为我们的最终特性，我们希望我们的Promises能够将用户代码中的异常作为拒绝处理（图[16](#fig:promise-impl4-exceptions)）。在本章中，“用户代码”指的是`.then()`的两个回调参数。
- en: '[PRE19]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`.then()` now runs the Promise reactions `onFulfilled` and `onRejected` safely,
    via the helper method `._runReactionSafely()` – for example:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`.then()`现在通过辅助方法`._runReactionSafely()`安全地运行Promise反应`onFulfilled`和`onRejected`，例如：'
- en: '[PRE20]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`._runReactionSafely()` is implemented as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`._runReactionSafely()`的实现如下：'
- en: '[PRE21]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '17.9 Version 5: Revealing constructor pattern'
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 17.9 版本5：揭示构造函数模式
- en: 'We are skipping one last step: If we wanted to turn `ToyPromise` into an actual
    Promise implementation, we’d still need to implement [the revealing constructor
    pattern](https://blog.domenic.me/the-revealing-constructor-pattern/): JavaScript
    Promises are not resolved and rejected via methods, but via functions that are
    handed to the *executor*, the callback parameter of the constructor.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们跳过了最后一步：如果我们想要将`ToyPromise`转换为一个实际的Promise实现，我们仍然需要实现[揭示构造函数模式](https://blog.domenic.me/the-revealing-constructor-pattern/)：JavaScript
    Promises不是通过方法而是通过函数来解决和拒绝的，这些函数被传递给*执行程序*，构造函数的回调参数。
- en: '[PRE22]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If the executor throws an exception, then `promise` is rejected.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行程序抛出异常，则`promise`将被拒绝。
- en: '[Comments](https://github.com/rauschma/deep-js/issues/18)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[Comments](https://github.com/rauschma/deep-js/issues/18)'
