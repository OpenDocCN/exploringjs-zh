- en: 34 WeakMaps (WeakMap) (advanced)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://exploringjs.com/impatient-js/ch_weakmaps.html](https://exploringjs.com/impatient-js/ch_weakmaps.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 34.1 [WeakMaps are black boxes](ch_weakmaps.html#weakmaps-as-black-boxes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 34.2 [The keys of a WeakMap are *weakly held*](ch_weakmaps.html#weakmap-keys-are-weakly-held)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 34.2.1 [All WeakMap keys must be objects](ch_weakmaps.html#all-weakmap-keys-must-be-objects)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '34.2.2 [Use case: attaching values to objects](ch_weakmaps.html#use-case-attaching-values-to-objects)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 34.3 [Examples](ch_weakmaps.html#examples)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 34.3.1 [Caching computed results via WeakMaps](ch_weakmaps.html#caching-computed-results-via-weakmaps)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 34.3.2 [Keeping private data in WeakMaps](ch_weakmaps.html#private-data-in-weakmaps)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 34.4 [WeakMap API](ch_weakmaps.html#weakmap-api)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'WeakMaps are similar to Maps, with the following differences:'
  prefs: []
  type: TYPE_NORMAL
- en: They are black boxes, where a value can only be accessed if you have both the
    WeakMap and the key.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The keys of a WeakMap are *weakly held*: if an object is a key in a WeakMap,
    it can still be garbage-collected. That lets us use WeakMaps to attach data to
    objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next two sections examine in more detail what that means.
  prefs: []
  type: TYPE_NORMAL
- en: 34.1 WeakMaps are black boxes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is impossible to inspect what’s inside a WeakMap:'
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can’t iterate or loop over keys, values or entries. And you
    can’t compute the size.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, you can’t clear a WeakMap either – you have to create a fresh
    instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These restrictions enable a security property. Quoting [Mark Miller](https://github.com/tc39/tc39-notes/blob/master/meetings/2014-11/nov-19.md#412-should-weakmapweakset-have-a-clear-method-markm):'
  prefs: []
  type: TYPE_NORMAL
- en: The mapping from weakmap/key pair value can only be observed or affected by
    someone who has both the weakmap and the key. With `clear()`, someone with only
    the WeakMap would’ve been able to affect the WeakMap-and-key-to-value mapping.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 34.2 The keys of a WeakMap are *weakly held*
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The keys of a WeakMap are said to be *weakly held*: Normally if one object
    refers to another one, then the latter object can’t be garbage-collected as long
    as the former exists. With a WeakMap, that is different: If an object is a key
    and not referred to elsewhere, it can be garbage-collected while the WeakMap still
    exists. That also leads to the corresponding entry being removed (but there is
    no way to observe that).'
  prefs: []
  type: TYPE_NORMAL
- en: 34.2.1 All WeakMap keys must be objects
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'All WeakMap keys must be objects. You get an error if you use a primitive value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: With primitive values as keys, WeakMaps wouldn’t be black boxes anymore. But
    given that primitive values are never garbage-collected, you don’t profit from
    weakly held keys anyway, and can just as well use a normal Map.
  prefs: []
  type: TYPE_NORMAL
- en: '34.2.2 Use case: attaching values to objects'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is the main use case for WeakMaps: you can use them to externally attach
    values to objects – for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In line A, we attach a value to `obj`. In line B, `obj` can already be garbage-collected,
    even though `wm` still exists. This technique of attaching a value to an object
    is equivalent to a property of that object being stored externally. If `wm` were
    a property, the previous code would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 34.3 Examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 34.3.1 Caching computed results via WeakMaps
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'With WeakMaps, you can associate previously computed results with objects without
    having to worry about memory management. The following function `countOwnKeys()`
    is an example: it caches previous results in the WeakMap `cache`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If we use this function with an object `obj`, you can see that the result is
    only computed for the first invocation, while a cached value is used for the second
    invocation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 34.3.2 Keeping private data in WeakMaps
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the following code, the WeakMaps `_counter` and `_action` are used to store
    the values of virtual properties of instances of `Countdown`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how `Countdown` is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Exercise: WeakMaps for
    private data**'
  prefs: []
  type: TYPE_NORMAL
- en: '`exercises/weakmaps/weakmaps_private_data_test.mjs`'
  prefs: []
  type: TYPE_NORMAL
- en: 34.4 WeakMap API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The constructor and the four methods of `WeakMap` work the same as [their `Map`
    equivalents](ch_maps.html#quickref-maps):'
  prefs: []
  type: TYPE_NORMAL
- en: '`new WeakMap<K, V>(entries?: Iterable<[K, V]>)` ^([ES6])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.delete(key: K) : boolean` ^([ES6])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.get(key: K) : V` ^([ES6])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.has(key: K) : boolean` ^([ES6])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.set(key: K, value: V) : this` ^([ES6])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz**'
  prefs: []
  type: TYPE_NORMAL
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  prefs: []
  type: TYPE_NORMAL
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/36)'
  prefs: []
  type: TYPE_NORMAL
