["```js\n> 'how \"are\" \"you\" doing'.match(/(?<=\")[a-z]+(?=\")/g)\n[ 'are', 'you' ]\n```", "```js\n> 'how \"are\" \"you\" doing'.match(/\"([a-z]+)\"/g)\n[ '\"are\"', '\"you\"' ]\n```", "```js\n> 'how \"are\" \"you\" doing'.match(/(?<!\")[a-z]+(?!\")/g)\n[ 'how', 'r', 'o', 'doing' ]\n```", "```js\n> 'how \"are\" \"you\" doing'.match(/(?<![\"a-z])[a-z]+(?![\"a-z])/g)\n[ 'how', 'doing' ]\n```", "```js\n> 'how \"are\" \"you\" doing'.match(/(?<!\")\\b[a-z]+\\b(?!\")/g)\n[ 'how', 'doing' ]\n```", "```js\nconst str = 'how \"are\" \"you\" doing';\n\nconst allWords = str.match(/\"?[a-z]+\"?/g);\nconst unquotedWords = allWords.filter(\n w => !w.startsWith('\"') || !w.endsWith('\"'));\nassert.deepEqual(unquotedWords, ['how', 'doing']);\n```", "```js\n> /^(?!abc)/.test('xyz')\ntrue\n```", "```js\n> /^(?!abc)/.exec('xyz')\n{ 0: '', index: 0, input: 'xyz', groups: undefined }\n```", "```js\n> /^(?!abc).*$/.exec('xyz')\n{ 0: 'xyz', index: 0, input: 'xyz', groups: undefined }\n```", "```js\n> /^(?!abc).*$/.exec('abc')\nnull\n> /^(?!abc).*$/.exec('abcd')\nnull\n```", "```js\n> /^(?!abc).*$/.exec('ab')\n{ 0: 'ab', index: 0, input: 'ab', groups: undefined }\n```", "```js\nimport \u00b7\u00b7\u00b7 from '\u00abmodule-specifier\u00bb';\n```", "```js\nconst code = `\nimport {transform} from './util';\nimport {Person} from './person.mjs';\nimport {zip} from 'lodash';\n`.trim();\nassert.deepEqual(\n code.match(/^import .*? from '[^']+(?<!\\.mjs)';$/umg),\n [\n \"import {transform} from './util';\",\n \"import {zip} from 'lodash';\",\n ]);\n```", "```js\nconst RE_SETTING = /^(?!#)([^:]*):(.*)$/\n\nconst lines = [\n 'indent: 2', // setting\n '# Trim trailing whitespace:', // comment\n 'whitespace: trim', // setting\n];\nfor (const line of lines) {\n const match = RE_SETTING.exec(line);\n if (match) {\n const key = JSON.stringify(match[1]);\n const value = JSON.stringify(match[2]);\n console.log(`KEY: ${key} VALUE: ${value}`);\n }\n}\n\n// Output:\n// 'KEY: \"indent\" VALUE: \" 2\"'\n// 'KEY: \"whitespace\" VALUE: \" trim\"'\n```", "```js\n/^([^:]*):(.*)$/\n```", "```js\n> /^([^:]*):(.*)$/.test('# Comment')\nfalse\n```", "```js\n> /^([^:]*):(.*)$/.test('# Comment:')\ntrue\n```", "```js\n> /^(?!#)([^:]*):(.*)$/.test('# Comment:')\nfalse\n```", "```js\n> `The words \"must\" and \"should\".`.replace(/\"(.*)\"/g, '\u201c$1\u201d')\n'The words \u201cmust\" and \"should\u201d.'\n```", "```js\n> `The words \"must\" and \"should\".`.replace(/\"(.*?)\"/g, '\u201c$1\u201d')\n'The words \u201cmust\u201d and \u201cshould\u201d.'\n```", "```js\n> const regExp = /(?<!\\\\)\"(.*?)(?<!\\\\)\"/g;\n> String.raw`\\\"straight\\\" and \"curly\"`.replace(regExp, '\u201c$1\u201d')\n'\\\\\"straight\\\\\" and \u201ccurly\u201d'\n```", "```js\n.replace(/\\\\\"/g, `\"`)\n```", "```js\n> String.raw`Backslash: \"\\\\\"`.replace(/(?<!\\\\)\"(.*?)(?<!\\\\)\"/g, '\u201c$1\u201d')\n'Backslash: \"\\\\\\\\\"'\n```", "```js\n(?<=[^\\\\](?:\\\\\\\\)*)\n```", "```js\n> const regExp = /(?<=[^\\\\](?:\\\\\\\\)*)\"(.*?)(?<=[^\\\\](?:\\\\\\\\)*)\"/g;\n> String.raw`Backslash: \"\\\\\"`.replace(regExp, '\u201c$1\u201d')\n'Backslash: \u201c\\\\\\\\\u201d'\n```", "```js\n> const regExp = /(?<=[^\\\\](?:\\\\\\\\)*)\"(.*?)(?<=[^\\\\](?:\\\\\\\\)*)\"/g;\n> `\"abc\"`.replace(regExp, '\u201c$1\u201d')\n'\"abc\"'\n```", "```js\n> const regExp = /(?<=[^\\\\](?:\\\\\\\\)*|^)\"(.*?)(?<=[^\\\\](?:\\\\\\\\)*)\"/g;\n> `\"abc\"`.replace(regExp, '\u201c$1\u201d')\n'\u201cabc\u201d'\n```"]