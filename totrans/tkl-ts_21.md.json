["```ts\nclass Counter extends Object {\n static createZero() {\n return new Counter(0);\n }\n value: number;\n constructor(value: number) {\n super();\n this.value = value;\n }\n increment() {\n this.value++;\n }\n}\n// Static method\nconst myCounter = Counter.createZero();\nassert.ok(myCounter instanceof Counter);\nassert.equal(myCounter.value, 0);\n\n// Instance method\nmyCounter.increment();\nassert.equal(myCounter.value, 1);\n```", "```ts\ninterface CountingService {\n value: number;\n increment(): void;\n}\n```", "```ts\nconst myCounter2: CountingService = new Counter(3);\n```", "```ts\nclass Counter implements CountingService {\n // \u00b7\u00b7\u00b7\n};\n```", "```ts\n// Converting JSON to instances\ninterface JsonStatic {\n fromJson(json: any): JsonInstance;\n}\n\n// Converting instances to JSON\ninterface JsonInstance {\n toJson(): any;\n}\n```", "```ts\nclass Person implements JsonInstance {\n static fromJson(json: any): Person {\n if (typeof json !== 'string') {\n throw new TypeError(json);\n }\n return new Person(json);\n }\n name: string;\n constructor(name: string) {\n this.name = name;\n }\n toJson(): any {\n return this.name;\n }\n}\n```", "```ts\n// Assign the class to a type-annotated variable\nconst personImplementsJsonStatic: JsonStatic = Person;\n```", "```ts\nconst Person: JsonStatic = class implements JsonInstance {\n // \u00b7\u00b7\u00b7\n};\n```", "```ts\n/**\n * Provides functionality common to all JavaScript objects.\n */\ndeclare var Object: ObjectConstructor;\n\ninterface ObjectConstructor {\n new(value?: any): Object;\n (): any;\n (value: any): any;\n\n /** A reference to the prototype for a class of objects. */\n readonly prototype: Object;\n\n /**\n * Returns the prototype of an object.\n * @param  o The object that references the prototype.\n */\n getPrototypeOf(o: any): any;\n\n}\n```", "```ts\ninterface Object {\n /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */\n constructor: Function;\n\n /** Returns a string representation of an object. */\n toString(): string;\n}\n```", "```ts\nclass Color {\n name: string;\n constructor(name: string) {\n this.name = name;\n }\n}\n```", "```ts\nassert.equal(\n typeof Color, 'function')\n```", "```ts\nconst green: Color = new Color('green');\n```", "```ts\ninterface RgbColor extends Color {\n rgbValue: [number, number, number];\n}\n```", "```ts\nclass Color {\n name: string;\n constructor(name: string) {\n this.name = name;\n }\n}\nclass Person {\n name: string;\n constructor(name: string) {\n this.name = name;\n }\n}\n\nconst person: Person = new Person('Jane');\nconst color: Color = person; // (A)\n```", "```ts\nclass Color {\n name: string;\n private branded = true;\n constructor(name: string) {\n this.name = name;\n }\n}\nclass Person {\n name: string;\n private branded = true;\n constructor(name: string) {\n this.name = name;\n }\n}\n\nconst person: Person = new Person('Jane');\n\n// @ts-expect-error: Type 'Person' is not assignable to type 'Color'.\n//   Types have separate declarations of a private property\n//   'branded'. (2322)\nconst color: Color = person;\n```"]