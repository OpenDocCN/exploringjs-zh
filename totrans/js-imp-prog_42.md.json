["```js\nconst emptySet = new Set();\nassert.equal(emptySet.size, 0);\n```", "```js\nconst set = new Set(['red', 'green', 'blue']);\n```", "```js\nconst set = new Set()\n.add('red')\n.add('green')\n.add('blue');\n```", "```js\nconst set = new Set();\nset.add('red');\n```", "```js\nassert.equal(set.has('red'), true);\n```", "```js\nassert.equal(set.delete('red'), true); // there was a deletion\nassert.equal(set.has('red'), false);\n```", "```js\nconst set = new Set()\n .add('foo')\n .add('bar');\nassert.equal(set.size, 2)\n```", "```js\nset.clear();\nassert.equal(set.size, 0)\n```", "```js\nconst set = new Set(['red', 'green', 'blue']);\nfor (const x of set) {\n console.log(x);\n}\n// Output:\n// 'red'\n// 'green'\n// 'blue'\n```", "```js\nconst set = new Set(['red', 'green', 'blue']);\nconst arr = Array.from(set); // ['red', 'green', 'blue']\n```", "```js\nassert.deepEqual(\n Array.from(new Set([1, 2, 1, 2, 3, 3, 3])),\n [1, 2, 3]);\n```", "```js\nassert.deepEqual(\n new Set('abc'),\n new Set(['a', 'b', 'c']));\n```", "```js\n> const set = new Set([NaN, NaN, NaN]);\n> set.size\n1\n> set.has(NaN)\ntrue\n```", "```js\n> const set = new Set();\n\n> set.add({});\n> set.size\n1\n\n> set.add({});\n> set.size\n2\n```", "```js\nconst a = new Set([1,2,3]);\nconst b = new Set([4,3,2]);\n// Use spreading to concatenate two iterables\nconst union = new Set([...a, ...b]);\n\nassert.deepEqual(Array.from(union), [1, 2, 3, 4]);\n```", "```js\nconst a = new Set([1,2,3]);\nconst b = new Set([4,3,2]);\nconst intersection = new Set(\n Array.from(a).filter(x => b.has(x))\n);\n\nassert.deepEqual(\n Array.from(intersection), [2, 3]\n);\n```", "```js\nconst a = new Set([1,2,3]);\nconst b = new Set([4,3,2]);\nconst difference = new Set(\n Array.from(a).filter(x => !b.has(x))\n);\n\nassert.deepEqual(\n Array.from(difference), [1]\n);\n```", "```js\nconst set = new Set([1, 2, 3]);\nconst mappedSet = new Set(\n Array.from(set).map(x => x * 2)\n);\n\n// Convert mappedSet to an Array to check what\u2019s inside it\nassert.deepEqual(\n Array.from(mappedSet), [2, 4, 6]\n);\n```", "```js\nconst set = new Set([1, 2, 3, 4, 5]);\nconst filteredSet = new Set(\n Array.from(set).filter(x => (x % 2) === 0)\n);\n\nassert.deepEqual(\n Array.from(filteredSet), [2, 4]\n);\n```", "```js\n    const set = new Set(['red', 'green', 'blue']);\n    ```", "```js\n    const set = new Set(['red']);\n    set.add('green').add('blue');\n    assert.deepEqual(\n     Array.from(set), ['red', 'green', 'blue']\n    );\n    ```", "```js\n    const set = new Set(['red', 'green', 'blue']);\n    assert.equal(set.delete('red'), true); // there was a deletion\n    assert.deepEqual(\n     Array.from(set), ['green', 'blue']\n    );\n    ```", "```js\n    const set = new Set(['red', 'green']);\n    assert.equal(set.has('red'), true);\n    assert.equal(set.has('blue'), false);\n    ```", "```js\n    const set = new Set(['red', 'green', 'blue']);\n    assert.equal(set.size, 3);\n    ```", "```js\n    const set = new Set(['red', 'green', 'blue']);\n    assert.equal(set.size, 3);\n    set.clear();\n    assert.equal(set.size, 0);\n    ```", "```js\n    const set = new Set(['red', 'green']);\n    for (const x of set.values()) {\n     console.log(x);\n    }\n    // Output:\n    // 'red'\n    // 'green'\n    ```", "```js\n    const set = new Set(['red', 'green']);\n    for (const x of set) {\n     console.log(x);\n    }\n    // Output:\n    // 'red'\n    // 'green'\n    ```", "```js\n    const set = new Set(['red', 'green']);\n    set.forEach(x => console.log(x));\n    // Output:\n    // 'red'\n    // 'green'\n    ```", "```js\nconst set = new Set(['a', 'b', 'c']);\nconst map = new Map(set.entries());\nassert.deepEqual(\n Array.from(map.entries()),\n [['a','a'], ['b','b'], ['c','c']]\n);\n```"]