- en: 4 New JavaScript features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://exploringjs.com/impatient-js/ch_new-javascript-features.html](https://exploringjs.com/impatient-js/ch_new-javascript-features.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 4.1 [New in ECMAScript 2022](ch_new-javascript-features.html#new-in-es2022)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.2 [New in ECMAScript 2021](ch_new-javascript-features.html#new-in-es2021)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.3 [New in ECMAScript 2020](ch_new-javascript-features.html#new-in-es2020)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.4 [New in ECMAScript 2019](ch_new-javascript-features.html#new-in-es2019)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.5 [New in ECMAScript 2018](ch_new-javascript-features.html#new-in-es2018)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.6 [New in ECMAScript 2017](ch_new-javascript-features.html#new-in-es2017)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.7 [New in ECMAScript 2016](ch_new-javascript-features.html#new-in-es2016)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.8 [Source of this chapter](ch_new-javascript-features.html#source-of-this-chapter)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter lists what’s new in ES2016–ES2022 in reverse chronological order.
    It starts after ES2015 (ES6) because that release has too many features to list
    here.
  prefs: []
  type: TYPE_NORMAL
- en: 4.1 New in ECMAScript 2022
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'ES2022 will probably become a standard in June 2022\. The following proposals
    have reached stage 4 and are scheduled to be part of that standard:'
  prefs: []
  type: TYPE_NORMAL
- en: 'New members of classes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Properties (public slots) can now be created via:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Instance public fields](ch_classes.html#instance-public-fields)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Static public fields](ch_classes.html#static-public-fields)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Private slots](ch_classes.html#private-slots) are new and can be created via:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Private fields ([instance private fields](ch_classes.html#instance-private-fields)
    and [static private fields](ch_classes.html#static-private-methods-accessors-fields))
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Private methods and accessors ([non-static](ch_classes.html#private-methods-accessors)
    and [static](ch_classes.html#static-private-methods-accessors-fields))
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Static initialization blocks](ch_classes.html#class-static-initialization-blocks)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Private slot checks](ch_classes.html#private-slot-checks) (“ergonomic brand
    checks for private fields”): The following expression checks if `obj` has a private
    slot `#privateSlot`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[Top-level `await` in modules](ch_modules.html#top-level-await): We can now
    use `await` at the top levels of modules and don’t have to enter async functions
    or methods anymore.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`error.cause`](ch_exception-handling.html#error.cause): `Error` and its subclasses
    now let us specify which error caused the current one:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[Method `.at()` of indexable values](ch_arrays.html#Array.prototype.at) lets
    us read an element at a given index (like the bracket operator `[]`) and supports
    negative indices (unlike the bracket operator).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following “indexable” types have method `.at()`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`string`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Array`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All Typed Array classes: `Uint8Array` etc.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RegExp match indices](ch_regexps.html#regexp-match-indices): If we add a flag
    to a regular expression, using it produces match objects that record the start
    and end index of each group capture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Object.hasOwn(obj, propKey)`](ch_objects.html#Object.hasOwn) provides a safe
    way to check if an object `obj` has an own property with the key `propKey`. In
    contrast to `Object.prototype.hasOwnProperty`, it works with all objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/0ac255e56dc93a43365d8502301c8688.png)  **More features may still
    be added to ES2022**'
  prefs: []
  type: TYPE_NORMAL
- en: If that happens, this book will be updated accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 4.2 New in ECMAScript 2021
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following features were added in ECMAScript 2021:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`String.prototype.replaceAll()`](ch_regexps.html#replace-replaceAll) lets
    us replace all matches of a regular expression or a string (`.replace()` only
    replaces the first occurrence of a string):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[`Promise.any()` and `AggregateError`](ch_promises.html#Promise.any-AggregateError):
    `Promise.any()` returns a Promise that is fulfilled as soon as the first Promise
    in an iterable of Promises is fulfilled. If there are only rejections, they are
    put into an `AggregateError` which becomes the rejection value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use `Promise.any()` when we are only interested in the first fulfilled Promise
    among several.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Logical assignment operators](ch_operators.html#logical-assignment-operators):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Underscores (`_`) as separators in:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Number literals](ch_numbers.html#numeric-separator-number-literals): `123_456.789_012`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bigint literals](ch_bigints.html#numeric-separator-bigint-literals): `6_000_000_000_000_000_000_000_000n`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'WeakRefs: This feature is beyond the scope of this book. For more information
    on it, see [its proposal](https://github.com/tc39/proposal-weakrefs).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.3 New in ECMAScript 2020
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following features were added in ECMAScript 2020:'
  prefs: []
  type: TYPE_NORMAL
- en: 'New module features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Dynamic imports via `import()`](ch_modules.html#dynamic-imports): The normal
    `import` statement is static: We can only use it at the top levels of modules
    and its module specifier is a fixed string. `import()` changes that. It can be
    used anywhere (including conditional statements) and we can compute its argument.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`import.meta`](ch_modules.html#import.meta) contains metadata for the current
    module. Its first widely supported property is `import.meta.url` which contains
    a string with the URL of the current module’s file.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Namespace re-exporting](ch_modules.html#module-exports): The following expression
    imports all exports of module `''mod''` in a namespace object `ns` and exports
    that object.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[Optional chaining for property accesses and method calls](ch_objects.html#optional-chaining).
    One example of optional chaining is:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This expression evaluates to `undefined` if `value` is either `undefined` or
    `null`. Otherwise, it evaluates to `value.prop`. This feature is especially useful
    in chains of property reads when some of the properties may be missing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Nullish coalescing operator (`??`)](ch_undefined-null.html#nullish-coalescing-operator):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This expression is `defaultValue` if `value` is either `undefined` or `null`
    and `value` otherwise. This operator lets us use a default value whenever something
    is missing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Previously the Logical Or operator (`||`) was used in this case but it has downsides
    here because it returns the default value whenever the left-hand side is falsy
    (which isn’t always correct).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Bigints – arbitrary-precision integers](ch_bigints.html): Bigints are a new
    primitive type. It supports integer numbers that can be arbitrarily large (storage
    for them grows as necessary).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`String.prototype.matchAll()`](ch_regexps.html#String.prototype.matchAll):
    This method throws if flag `/g` isn’t set and returns an iterable with all match
    objects for a given string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Promise.allSettled()`](ch_promises.html#Promise.allSettled) receives an iterable
    of Promises. It returns a Promise that is fulfilled once all the input Promises
    are settled. The fulfillment value is an Array with one object per input Promise
    – either one of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{ status: ''fulfilled'', value: «fulfillment value» }`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{ status: ''rejected'', reason: «rejection value» }`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`globalThis`](ch_variables-assignment.html#globalThis) provides a way to access
    the global object that works both on browsers and server-side platforms such as
    Node.js and Deno.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for-in` mechanics: This feature is beyond the scope of this book. For more
    information on it, see [its proposal](https://github.com/tc39/proposal-for-in-order).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.4 New in ECMAScript 2019
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following features were added in ECMAScript 2019:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Array method [`.flatMap()`](ch_arrays.html#Array.prototype.flatMap) works like
    `.map()` but lets the callback return Arrays of zero or more values instead of
    single values. The returned Arrays are then concatenated and become the result
    of `.flatMap()`. Use cases include:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering and mapping at the same time
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping single input values to multiple output values
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Array method [`.flat()`](ch_arrays.html#Array.prototype.flat) converts nested
    Arrays into flat Arrays. Optionally, we can tell it at which depth of nesting
    it should stop flattening.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Object.fromEntries()`](ch_objects.html#Object.fromEntries) creates an object
    from an iterable over *entries*. Each entry is a two-element Array with a property
    key and a property value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'String methods: [`.trimStart()`](ch_strings.html#String.prototype.trimStart)
    and [`.trimEnd()`](ch_strings.html#String.prototype.trimEnd) work like `.trim()`
    but remove whitespace only at the start or only at the end of a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Optional `catch` binding](ch_exception-handling.html#omitting-catch-binding):
    We can now omit the parameter of a `catch` clause if we don’t use it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Symbol.prototype.description`](ch_symbols.html#symbol-descriptions) is a
    getter for reading the description of a symbol. Previously, the description was
    included in the result of `.toString()` but couldn’t be accessed individually.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These new ES2019 features are beyond the scope of this book:'
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON superset: See [2ality blog post](https://2ality.com/2019/01/json-superset.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Well-formed `JSON.stringify()`: See [2ality blog post](https://2ality.com/2019/01/well-formed-stringify.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Function.prototype.toString()` revision: See [2ality blog post](https://2ality.com/2016/08/function-prototype-tostring.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.5 New in ECMAScript 2018
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following features were added in ECMAScript 2018:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Asynchronous iteration](ch_async-iteration.html) is the asynchronous version
    of synchronous iteration. It is based on Promises:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With synchronous iterables, we can immediately access each item. With asynchronous
    iterables, we have to `await` before we can access an item.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: With synchronous iterables, we use `for-of` loops. With asynchronous iterables,
    we use `for-await-of` loops.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Spreading into object literals](ch_objects.html#spreading-into-object-literals):
    By using spreading (`...`) inside an object literal, we can copy the properties
    of another object into the current one. One use case is to create a shallow copy
    of an object `obj`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[Rest properties (destructuring)](ch_destructuring.html#rest-properties): When
    object-destructuring a value, we can now use rest syntax (`...`) to get all previously
    unmentioned properties in an object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[`Promise.prototype.finally()`](ch_promises.html#Promise.prototype.finally)
    is related to the `finally` clause of a try-catch-finally statement – similarly
    to how the Promise method `.then()` is related to the `try` clause and `.catch()`
    is related to the `catch` clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On other words: The callback of `.finally()` is executed regardless of whether
    a Promise is fulfilled or rejected.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New Regular expression features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`RegExp` named capture groups](ch_regexps.html#named-capture-groups): In addition
    to accessing groups by number, we can now name them and access them by name:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[`RegExp` lookbehind assertions](ch_regexps.html#regexp-lookbehind-assertions)
    complement lookahead assertions:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Positive lookbehind: `(?<=X)` matches if the current location is preceded by
    `''X''`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Negative lookbehind: `(?<!X)` matches if the current location is not preceded
    by `''(?<!X)''`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`s` (`dotAll`) flag for regular expressions](ch_regexps.html#regexp-dotAll-flag).
    If this flag is active, the dot matches line terminators (by default, it doesn’t).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`RegExp` Unicode property escapes](ch_regexps.html#unicode-property-escapes)
    give us more power when matching sets of Unicode code points – for example:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '[Template literal revision](ch_template-literals.html#template-strings-cooked-vs-raw)
    allows text with backslashes in tagged templates that is illegal in string literals
    – for example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 4.6 New in ECMAScript 2017
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following features were added in ECMAScript 2017:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Async functions (`async/await`)](ch_async-functions.html) let us use synchronous-looking
    syntax to write asynchronous code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Object.values()`](ch_objects.html#Object.values) returns an Array with the
    values of all enumerable string-keyed properties of a given object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Object.entries()`](ch_objects.html#Object.entries) returns an Array with
    the key-value pairs of all enumerable string-keyed properties of a given object.
    Each pair is encoded as a two-element Array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'String padding: The string methods [`.padStart()`](ch_strings.html#String.prototype.padStart)
    and [`.padEnd()`](ch_strings.html#String.prototype.padEnd) insert padding text
    until the receivers are long enough:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[Trailing commas in function parameter lists and calls](ch_callables.html#trailing-commas-parameters):
    Trailing commas have been allowed in Arrays literals since ES3 and in Object literals
    since ES5\. They are now also allowed in function calls and method calls.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following two features are beyond the scope of this book:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Object.getOwnPropertyDescriptors()` (see [“Deep JavaScript”](https://exploringjs.com/deep-js/ch_property-attributes-intro.html#Object.getOwnPropertyDescriptors))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Shared memory and atomics (see [proposal](https://github.com/tc39/ecmascript_sharedmem))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.7 New in ECMAScript 2016
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following features were added in ECMAScript 2016:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Array.prototype.includes()`](ch_arrays.html#Array.prototype.includes) checks
    if an Array contains a given value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Exponentiation operator (`**`)](ch_numbers.html#binary-arithmetic-operators):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 4.8 Source of this chapter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ECMAScript feature lists were taken from [the TC39 page on finished proposals](https://github.com/tc39/proposals/blob/master/finished-proposals.md).
  prefs: []
  type: TYPE_NORMAL
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/52)'
  prefs: []
  type: TYPE_NORMAL
