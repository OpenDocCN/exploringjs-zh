["```ts\nclass Point {\n x: number;\n y: number;\n constructor(x: number, y: number) {\n this.x = x;\n this.y = y;\n }\n}\n```", "```ts\nfunction createPoint(PointClass: ???, x: number, y: number) {\n return new PointClass(x, y);\n}\n```", "```ts\nfunction createPoint(PointClass: typeof Point, x: number, y: number) { // (A)\n return new PointClass(x, y);\n}\n\n// %inferred-type: Point\nconst point = createPoint(Point, 3, 6);\nassert.ok(point instanceof Point);\n```", "```ts\nfunction createPoint(\n PointClass: new (x: number, y: number) => Point, // (A)\n x: number, y: number\n) {\n return new PointClass(x, y);\n}\n```", "```ts\nfunction createPoint(\n PointClass: {new (x: number, y: number): Point},\n x: number, y: number\n) {\n return new PointClass(x, y);\n}\n```", "```ts\ntype Class<T> = new (...args: any[]) => T;\n```", "```ts\ninterface Class<T> {\n new(...args: any[]): T;\n}\n```", "```ts\nfunction createInstance<T>(AnyClass: Class<T>, ...args: any[]): T {\n return new AnyClass(...args);\n}\n```", "```ts\nclass Person {\n constructor(public name: string) {}\n}\n\n// %inferred-type: Person\nconst jane = createInstance(Person, 'Jane');\n```", "```ts\nfunction cast<T>(AnyClass: Class<T>, obj: any): T {\n if (! (obj instanceof AnyClass)) {\n throw new Error(`Not an instance of ${AnyClass.name}: ${obj}`)\n }\n return obj;\n}\n```", "```ts\nfunction parseObject(jsonObjectStr: string): Object {\n // %inferred-type: any\n const parsed = JSON.parse(jsonObjectStr);\n return cast(Object, parsed);\n}\n```", "```ts\nclass TypeSafeMap {\n #data = new Map<any, any>();\n get<T>(key: Class<T>) {\n const value = this.#data.get(key);\n return cast(key, value);\n }\n set<T>(key: Class<T>, value: T): this {\n cast(key, value); // runtime check\n this.#data.set(key, value);\n return this;\n }\n has(key: any) {\n return this.#data.has(key);\n }\n}\n```", "```ts\nconst map = new TypeSafeMap();\n\nmap.set(RegExp, /abc/);\n\n// %inferred-type: RegExp\nconst re = map.get(RegExp);\n\n// Static and dynamic error!\nassert.throws(\n // @ts-expect-error: Argument of type '\"abc\"' is not assignable\n // to parameter of type 'Date'.\n () => map.set(Date, 'abc'));\n```", "```ts\nabstract class Shape {\n}\nclass Circle extends Shape {\n // \u00b7\u00b7\u00b7\n}\n\n// @ts-expect-error: Type 'typeof Shape' is not assignable to type\n// 'Class<Shape>'.\n//   Cannot assign an abstract constructor type to a non-abstract\n//   constructor type. (2322)\nconst shapeClasses1: Array<Class<Shape>> = [Circle, Shape];\n```", "```ts\ntype Class2<T> = Function & {prototype: T};\n\nconst shapeClasses2: Array<Class2<Shape>> = [Circle, Shape];\n```"]