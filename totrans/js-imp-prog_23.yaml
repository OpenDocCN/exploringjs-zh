- en: 19 Unicode – a brief introduction (advanced)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://exploringjs.com/impatient-js/ch_unicode.html](https://exploringjs.com/impatient-js/ch_unicode.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 19.1 [Code points vs. code units](ch_unicode.html#code-points-vs.-code-units)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 19.1.1 [Code points](ch_unicode.html#code-points)
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '19.1.2 [Encoding Unicode code points: UTF-32, UTF-16, UTF-8](ch_unicode.html#encoding-unicode-code-points-utf-32-utf-16-utf-8)'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '19.2 [Encodings used in web development: UTF-16 and UTF-8](ch_unicode.html#encodings-used-in-web-development-utf-16-and-utf-8)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '19.2.1 [Source code internally: UTF-16](ch_unicode.html#source-code-internally-utf-16)'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '19.2.2 [Strings: UTF-16](ch_unicode.html#strings-utf-16)'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '19.2.3 [Source code in files: UTF-8](ch_unicode.html#source-code-in-files-utf-8)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 19.3 [Grapheme clusters – the real characters](ch_unicode.html#grapheme-clusters)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 19.3.1 [Grapheme clusters vs. glyphs](ch_unicode.html#grapheme-clusters-vs.-glyphs)
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Unicode is a standard for representing and managing text in most of the world’s
    writing systems. Virtually all modern software that works with text, supports
    Unicode. The standard is maintained by the Unicode Consortium. A new version of
    the standard is published every year (with new emojis, etc.). Unicode version
    1.0.0 was published in October 1991.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 19.1 Code points vs. code units
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Two concepts are crucial for understanding Unicode:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '*Code points* are numbers that represent the atomic parts of Unicode text.
    Most of them represent visible symbols but they can also have other meanings such
    as specifying an aspect of a symbol (the accent of a letter, the skin tone of
    an emoji, etc.).'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Code units* are numbers that encode code points, to store or transmit Unicode
    text. One or more code units encode a single code point. Each code unit has the
    same size, which depends on the *encoding format* that is used. The most popular
    format, UTF-8, has 8-bit code units.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 19.1.1 Code points
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The first version of Unicode had 16-bit code points. Since then, the number
    of characters has grown considerably and the size of code points was extended
    to 21 bits. These 21 bits are partitioned in 17 planes, with 16 bits each:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Plane 0: **Basic Multilingual Plane (BMP)**, 0x0000–0xFFFF'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains characters for almost all modern languages (Latin characters, Asian
    characters, etc.) and many symbols.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Plane 1: Supplementary Multilingual Plane (SMP), 0x10000–0x1FFFF'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports historic writing systems (e.g., Egyptian hieroglyphs and cuneiform)
    and additional modern writing systems.
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports emojis and many other symbols.
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Plane 2: Supplementary Ideographic Plane (SIP), 0x20000–0x2FFFF'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains additional CJK (Chinese, Japanese, Korean) ideographs.
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Plane 3–13: Unassigned'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Plane 14: Supplementary Special-Purpose Plane (SSP), 0xE0000–0xEFFFF'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains non-graphical characters such as tag characters and glyph variation
    selectors.
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Plane 15–16: Supplementary Private Use Area (S PUA A/B), 0x0F0000–0x10FFFF'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Available for character assignment by parties outside the ISO and the Unicode
    Consortium. Not standardized.
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Planes 1-16 are called supplementary planes or **astral planes**.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s check the code points of a few characters:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The hexadecimal numbers of the code points tell us that the first three characters
    reside in plane 0 (within 16 bits), while the emoji resides in plane 1.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '19.1.2 Encoding Unicode code points: UTF-32, UTF-16, UTF-8'
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The main ways of encoding code points are three *Unicode Transformation Formats*
    (UTFs): UTF-32, UTF-16, UTF-8\. The number at the end of each format indicates
    the size (in bits) of its code units.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 19.1.2.1 UTF-32 (Unicode Transformation Format 32)
  id: totrans-38
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: UTF-32 uses 32 bits to store code units, resulting in one code unit per code
    point. This format is the only one with *fixed-length encoding*; all others use
    a varying number of code units to encode a single code point.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 19.1.2.2 UTF-16 (Unicode Transformation Format 16)
  id: totrans-40
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'UTF-16 uses 16-bit code units. It encodes code points as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: The BMP (first 16 bits of Unicode) is stored in single code units.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BMP（Unicode的前16位）存储在单个代码单元中。
- en: 'Astral planes: The BMP comprises 0x10_000 code points. Given that Unicode has
    a total of 0x110_000 code points, we still need to encode the remaining 0x100_000
    code points (20 bits). The BMP has two ranges of unassigned code points that provide
    the necessary storage:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 星际平面：BMP包括0x10_000个代码点。鉴于Unicode总共有0x110_000个代码点，我们仍然需要编码剩余的0x100_000个代码点（20位）。BMP有两个未分配代码点的范围，提供了必要的存储空间：
- en: 'Most significant 10 bits (*leading surrogate*): 0xD800-0xDBFF'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最重要的10位（*领导代理*）：0xD800-0xDBFF
- en: 'Least significant 10 bits (*trailing surrogate*): 0xDC00-0xDFFF'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最不重要的10位（*尾随代理*）：0xDC00-0xDFFF
- en: 'In other words, the two hexadecimal digits at the end contribute 8 bits. But
    we can only use those 8 bits if a BMP starts with one of the following 2-digit
    pairs:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，末尾的两个十六进制数字贡献了8位。但是，只有当BMP以以下两位数字对之一开头时，我们才能使用这8位：
- en: D8, D9, DA, DB
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D8, D9, DA, DB
- en: DC, DD, DE, DF
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DC, DD, DE, DF
- en: Per surrogate, we have a choice between 4 pairs, which is where the remaining
    2 bits come from.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每个代理都有4对可选，这就是剩下的2位来自的地方。
- en: As a consequence, each UTF-16 code unit is always either a leading surrogate,
    a trailing surrogate, or encodes a BMP code point.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每个UTF-16代码单元始终是一个领导代理、一个尾随代理或者编码BMP代码点。
- en: 'These are two examples of UTF-16-encoded code points:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是UTF-16编码的两个示例代码点：
- en: 'Code point 0x03C0 (π) is in the BMP and can therefore be represented by a single
    UTF-16 code unit: 0x03C0.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码点0x03C0（π）在BMP中，因此可以由单个UTF-16代码单元0x03C0表示。
- en: 'Code point 0x1F642 (`🙂`) is in an astral plane and represented by two code
    units: 0xD83D and 0xDE42.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码点0x1F642（`🙂`）在星际平面中，由两个代码单元表示：0xD83D和0xDE42。
- en: 19.1.2.3 UTF-8 (Unicode Transformation Format 8)
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 19.1.2.3 UTF-8（Unicode转换格式8）
- en: 'UTF-8 has 8-bit code units. It uses 1–4 code units to encode a code point:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: UTF-8具有8位代码单元。它使用1-4个代码单元来编码一个代码点：
- en: '| Code points | Code units |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 代码点 | 代码单元 |'
- en: '| --- | --- |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 0000–007F | 0bbbbbbb (7 bits) |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 0000–007F | 0bbbbbbb (7位) |'
- en: '| 0080–07FF | 110bbbbb, 10bbbbbb (5+6 bits) |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 0080–07FF | 110bbbbb, 10bbbbbb (5+6位) |'
- en: '| 0800–FFFF | 1110bbbb, 10bbbbbb, 10bbbbbb (4+6+6 bits) |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 0800–FFFF | 1110bbbb, 10bbbbbb, 10bbbbbb (4+6+6位) |'
- en: '| 10000–1FFFFF | 11110bbb, 10bbbbbb, 10bbbbbb, 10bbbbbb (3+6+6+6 bits) |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 10000–1FFFFF | 11110bbb, 10bbbbbb, 10bbbbbb, 10bbbbbb (3+6+6+6位) |'
- en: 'Notes:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注：
- en: 'The bit prefix of each code unit tells us:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个代码单元的位前缀告诉我们：
- en: Is it first in a series of code units? If yes, how many code units will follow?
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一系列代码单元中的第一个吗？如果是，后面会跟随多少个代码单元？
- en: Is it second or later in a series of code units?
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一系列代码单元中的第二个或更后面的吗？
- en: The character mappings in the 0000–007F range are the same as ASCII, which leads
    to a degree of backward compatibility with older software.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0000–007F范围内的字符映射与ASCII相同，这导致与旧软件的一定程度的向后兼容。
- en: 'Three examples:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 三个例子：
- en: '| Character | Code point | Code units |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 字符 | 代码点 | 代码单元 |'
- en: '| --- | --- | --- |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| A | 0x0041 | 01000001 |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| A | 0x0041 | 01000001 |'
- en: '| π | 0x03C0 | 11001111, 10000000 |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| π | 0x03C0 | 11001111, 10000000 |'
- en: '| `🙂` | 0x1F642 | 11110000, 10011111, 10011001, 10000010 |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `🙂` | 0x1F642 | 11110000, 10011111, 10011001, 10000010 |'
- en: '19.2 Encodings used in web development: UTF-16 and UTF-8'
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 19.2 Web开发中使用的编码：UTF-16和UTF-8
- en: 'The Unicode encoding formats that are used in web development are: UTF-16 and
    UTF-8.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web开发中使用的Unicode编码格式有：UTF-16和UTF-8。
- en: '19.2.1 Source code internally: UTF-16'
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 19.2.1 源代码内部：UTF-16
- en: The ECMAScript specification internally represents source code as UTF-16.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript规范在内部将源代码表示为UTF-16。
- en: '19.2.2 Strings: UTF-16'
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 19.2.2 字符串：UTF-16
- en: 'The characters in JavaScript strings are based on UTF-16 code units:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript字符串中的字符基于UTF-16代码单元：
- en: '[PRE1]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For more information on Unicode and strings, consult [§20.7 “Atoms of text:
    code points, JavaScript characters, grapheme clusters”](ch_strings.html#atoms-of-text).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Unicode和字符串的更多信息，请参阅[§20.7“文本的原子：代码点、JavaScript字符、图形簇”](ch_strings.html#atoms-of-text)。
- en: '19.2.3 Source code in files: UTF-8'
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 19.2.3 文件中的源代码：UTF-8
- en: HTML and JavaScript are almost always encoded as UTF-8 these days.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: HTML和JavaScript这些天几乎总是以UTF-8编码。
- en: 'For example, this is how HTML files usually start now:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这就是HTML文件通常现在的开头方式：
- en: '[PRE2]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For HTML modules loaded in web browsers, the [standard encoding](https://html.spec.whatwg.org/multipage/webappapis.html#fetch-a-single-module-script)
    is also UTF-8.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在Web浏览器中加载的HTML模块，[标准编码](https://html.spec.whatwg.org/multipage/webappapis.html#fetch-a-single-module-script)也是UTF-8。
- en: 19.3 Grapheme clusters – the real characters
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 19.3 图形簇 - 真正的字符
- en: 'The concept of a character becomes remarkably complex once we consider the
    various writing systems of the world. That’s why there are several different Unicode
    terms that all mean “character” in some way: *code point*, *grapheme cluster*,
    *glyph*, etc.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 字符的概念一旦考虑到世界上各种不同的书写系统，就变得非常复杂。这就是为什么有几个不同的Unicode术语在某种程度上都意味着“字符”：*代码点*、*图形簇*、*字形*等。
- en: In Unicode, a *code point* is an atomic part of text.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unicode中，*代码点*是文本的一个原子部分。
- en: However, a *grapheme cluster* corresponds most closely to a symbol displayed
    on screen or paper. It is defined as “a horizontally segmentable unit of text”.
    Therefore, [official Unicode documents](https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)
    also call it a *user-perceived character*. One or more code points are needed
    to encode a grapheme cluster.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，*图形簇*最接近于屏幕或纸张上显示的符号。它被定义为“文本的水平可分割单元”。因此，[官方Unicode文件](https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)也称其为*用户感知字符*。需要一个或多个代码点来编码一个图形簇。
- en: 'For example, the Devanagari *kshi* is encoded by 4 code points. We use `Array.from()`
    to split a string into an Array with code points (for details, consult [§20.7.1
    “Working with code points”](ch_strings.html#working-with-code-points)):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，德瓦纳加里语*kshi*由4个代码点编码。我们使用`Array.from()`将字符串拆分为具有代码点的数组（有关详细信息，请参阅[§20.7.1“使用代码点”](ch_strings.html#working-with-code-points)）：
- en: '![Splitting the grapheme cluster for the Devanagari _kshi_ into code points.](../Images/52f98dd10b5f9f66ae2c90b6c134e55e.png)'
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![将德瓦纳加里语_kshi_的图形簇分割成代码点。](../Images/52f98dd10b5f9f66ae2c90b6c134e55e.png)'
- en: 'Flag emojis are also grapheme clusters and composed of two code points – for
    example, the flag of Japan:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 旗帜表情符号也是字形簇，由两个代码点组成 - 例如，日本的国旗：![](../Images/aec4653f22c8cf0e517ff5024759dfe1.png)
- en: '![Splitting a flag emoji into code points.](../Images/d34ecb3ed6e1efa1205b5b48f5685df0.png)'
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![将旗帜表情符号分割成代码点。](../Images/d34ecb3ed6e1efa1205b5b48f5685df0.png)'
- en: 19.3.1 Grapheme clusters vs. glyphs
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 19.3.1 字形簇 vs. 字形
- en: 'A symbol is an abstract concept and part of written language:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 符号是一个抽象概念，是书面语言的一部分：
- en: It is represented in computer memory by a *grapheme cluster* – a sequence of
    one or more numbers (code points).
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在计算机内存中由*字形簇*表示 - 一个或多个数字（代码点）的序列。
- en: It is drawn on screen via *glyphs*. A glyph is an image and usually stored in
    a font. More than one glyph may be used to draw a single symbol – for example,
    the symbol “é” may be drawn by combining the glyph “e” with the glyph “´”.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过*字形*在屏幕上绘制。字形是一种图像，通常存储在字体中。可以使用多个字形来绘制单个符号 - 例如，符号“é”可以通过组合字形“e”和字形“´”来绘制。
- en: The distinction between a concept and its representation is subtle and can blur
    when talking about Unicode.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 概念与其表示之间的区别是微妙的，在谈论Unicode时可能会变得模糊。
- en: '![](../Images/aec4653f22c8cf0e517ff5024759dfe1.png)  **More information on
    grapheme clusters**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**有关字形簇的更多信息**'
- en: For more information, consult [“Let’s Stop Ascribing Meaning to Code Points”](https://manishearth.github.io/blog/2017/01/14/stop-ascribing-meaning-to-unicode-code-points/)
    by Manish Goregaokar.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅Manish Goregaokar的[“让我们停止将含义归因于代码点”](https://manishearth.github.io/blog/2017/01/14/stop-ascribing-meaning-to-unicode-code-points/)。
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**测验**'
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[测验应用程序](ch_quizzes-exercises.html#quizzes)。
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/41)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/impatient-js/issues/41)'
