- en: 22 Symbols
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 22 符号
- en: 原文：[https://exploringjs.com/impatient-js/ch_symbols.html](https://exploringjs.com/impatient-js/ch_symbols.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/impatient-js/ch_symbols.html](https://exploringjs.com/impatient-js/ch_symbols.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 22.1 [Symbols are primitives that are also like objects](ch_symbols.html#symbols-are-primitives-that-are-also-like-objects)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 22.1 [符号是原始值，也像对象](ch_symbols.html#symbols-are-primitives-that-are-also-like-objects)
- en: 22.1.1 [Symbols are primitive values](ch_symbols.html#symbols-are-primitive-values)
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 22.1.1 [符号是原始值](ch_symbols.html#symbols-are-primitive-values)
- en: 22.1.2 [Symbols are also like objects](ch_symbols.html#symbols-are-also-like-objects)
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 22.1.2 符号也像对象
- en: 22.2 [The descriptions of symbols](ch_symbols.html#symbol-descriptions)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 22.2 [符号的描述](ch_symbols.html#symbol-descriptions)
- en: 22.3 [Use cases for symbols](ch_symbols.html#use-cases-for-symbols)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 22.3 [使用符号的用例](ch_symbols.html#use-cases-for-symbols)
- en: 22.3.1 [Symbols as values for constants](ch_symbols.html#symbols-as-values-for-constants)
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 22.3.1 符号作为常量的值
- en: 22.3.2 [Symbols as unique property keys](ch_symbols.html#symbols-as-unique-property-keys)
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 22.3.2 符号作为唯一的属性键
- en: 22.4 [Publicly known symbols](ch_symbols.html#publicly-known-symbols)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 22.4 [公开已知的符号](ch_symbols.html#publicly-known-symbols)
- en: 22.5 [Converting symbols](ch_symbols.html#converting-symbols)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 22.5 [转换符号](ch_symbols.html#converting-symbols)
- en: '* * *'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 22.1 Symbols are primitives that are also like objects
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 22.1 符号是原始值，也像对象
- en: 'Symbols are primitive values that are created via the factory function `Symbol()`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 符号是通过工厂函数`Symbol()`创建的原始值：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The parameter is optional and provides a description, which is mainly useful
    for debugging.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 参数是可选的，并提供一个描述，这对于调试非常有用。
- en: 22.1.1 Symbols are primitive values
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 22.1.1 符号是原始值
- en: 'Symbols are primitive values:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 符号是原始值：
- en: 'They have to be categorized via `typeof`:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们必须通过`typeof`进行分类：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'They can be property keys in objects:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可以是对象中的属性键：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 22.1.2 Symbols are also like objects
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 22.1.2 符号也像对象
- en: 'Even though symbols are primitives, they are also like objects in that each
    value created by `Symbol()` is unique and not compared by value:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管符号是原始值，但它们也像对象，因为`Symbol()`创建的每个值都是唯一的，不是按值比较的：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Prior to symbols, objects were the best choice if we needed values that were
    unique (only equal to themselves):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在引入符号之前，如果我们需要唯一的值（只等于自身），对象是最佳选择：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 22.2 The descriptions of symbols
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 22.2 符号的描述
- en: 'The parameter we pass to the symbol factory function provides a description
    for the created symbol:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们传递给符号工厂函数的参数为创建的符号提供了一个描述：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The description can be accessed in two ways.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 描述可以通过两种方式访问。
- en: 'First, it is part of the string returned by `.toString()`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，它是由`.toString()`返回的字符串的一部分：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Second, since ES2019, we can retrieve the description via the property `.description`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，自ES2019以来，我们可以通过属性`.description`检索描述：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 22.3 Use cases for symbols
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 22.3 使用符号的用例
- en: 'The main use cases for symbols, are:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 符号的主要用例是：
- en: Values for constants
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常量的值
- en: Unique property keys
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 唯一的属性键
- en: 22.3.1 Symbols as values for constants
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 22.3.1 符号作为常量的值
- en: 'Let’s assume you want to create constants representing the colors red, orange,
    yellow, green, blue, and violet. One simple way of doing so would be to use strings:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想创建代表红色、橙色、黄色、绿色、蓝色和紫色的常量。一个简单的方法是使用字符串：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'On the plus side, logging that constant produces helpful output. On the minus
    side, there is a risk of mistaking an unrelated value for a color because two
    strings with the same content are considered equal:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 好处是，记录该常量会产生有用的输出。坏处是，有可能错误地将与颜色无关的值误认为是颜色，因为两个具有相同内容的字符串被认为是相等的：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can fix that problem via symbols:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过符号解决这个问题：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s use symbol-valued constants to implement a function:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用符号值常量来实现一个函数：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 22.3.2 Symbols as unique property keys
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 22.3.2 符号作为唯一的属性键
- en: 'The keys of properties (fields) in objects are used at two levels:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对象中属性（字段）的键在两个级别上使用：
- en: 'The program operates at a *base level*. The keys at that level reflect the
    *problem domain* – the area in which a program solves a problem – for example:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序在*基本级别*上运行。该级别的键反映了*问题域* - 程序解决问题的领域 - 例如：
- en: If a program manages employees, the property keys may be about job titles, salary
    categories, department IDs, etc.
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果程序管理员工，属性键可能是关于职称、薪水类别、部门ID等。
- en: If the program is a chess app, the property keys may be about chess pieces,
    chess boards, player colors, etc.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果程序是一个国际象棋应用，属性键可能是有关国际象棋棋子、国际象棋棋盘、玩家颜色等的。
- en: 'ECMAScript and many libraries operate at a *meta-level*. They manage data and
    provide services that are not part of the problem domain – for example:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECMAScript和许多库在*元级别*上操作。它们管理数据并提供不属于问题域的服务 - 例如：
- en: 'The standard method `.toString()` is used by ECMAScript when creating a string
    representation of an object (line A):'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准方法`.toString()`在创建对象的字符串表示时由ECMAScript使用（A行）：
- en: '[PRE12]'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`.x` and `.y` are base-level properties – they are used to solve the problem
    of computing with points. `.toString()` is a meta-level property – it doesn’t
    have anything to do with the problem domain.'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`.x`和`.y`是基本级别的属性 - 它们用于解决计算点的问题。`.toString()`是一个元级别的属性 - 它与问题域无关。'
- en: The standard ECMAScript method `.toJSON()`
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准的ECMAScript方法`.toJSON()`
- en: '[PRE13]'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`.x` and `.y` are base-level properties, `.toJSON()` is a meta-level property.'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`.x`和`.y`是基本级别的属性，`.toJSON()`是一个元级别的属性。'
- en: 'The base level and the meta-level of a program must be independent: Base-level
    property keys should not be in conflict with meta-level property keys.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的基本级别和元级别必须是独立的：基本级别的属性键不应与元级别的属性键冲突。
- en: 'If we use names (strings) as property keys, we are facing two challenges:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用名称（字符串）作为属性键，我们将面临两个挑战：
- en: When a language is first created, it can use any meta-level names it wants.
    Base-level code is forced to avoid those names. Later, however, when much base-level
    code already exists, meta-level names can’t be chosen freely, anymore.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一种语言首次创建时，它可以使用任何元级别的名称。基本级别的代码被迫避免使用这些名称。然而，当大量基本级别的代码已经存在时，元级别的名称就不能再自由选择了。
- en: 'We could introduce naming rules to separate base level and meta-level. For
    example, Python brackets meta-level names with two underscores: `__init__`, `__iter__`,
    `__hash__`, etc. However, the meta-level names of the language and the meta-level
    names of libraries would still exist in the same namespace and can clash.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以引入命名规则来区分基本级别和元级别。例如，Python用两个下划线括住元级别名称：`__init__`，`__iter__`，`__hash__`等。然而，语言的元级别名称和库的元级别名称仍然存在于同一个命名空间中，并且可能会发生冲突。
- en: 'These are two examples of where the latter was an issue for JavaScript:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是JavaScript中后者成为问题的两个例子：
- en: In May 2018, the Array method `.flatten()` had to be renamed to `.flat()` because
    the former name was already used by libraries ([source](https://github.com/tc39/proposal-flatMap/commit/093eacc7fe0906e70f7626bf6c7d6e9dfc53cce9)).
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在2018年5月，数组方法`.flatten()`不得不改名为`.flat()`，因为前者的名称已经被库使用了（[来源](https://github.com/tc39/proposal-flatMap/commit/093eacc7fe0906e70f7626bf6c7d6e9dfc53cce9)）。
- en: In November 2020, the Array method `.item()` had to be renamed to `.at()` because
    the former name was already used by library ([source](https://github.com/tc39/proposal-relative-indexing-method#web-incompatibility-history)).
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在2020年11月，数组方法`.item()`不得不改名为`.at()`，因为前者的名称已经被库使用了（[来源](https://github.com/tc39/proposal-relative-indexing-method#web-incompatibility-history)）。
- en: 'Symbols, used as property keys, help us here: Each symbol is unique and a symbol
    key never clashes with any other string or symbol key.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，作为属性键使用的符号有助于我们：每个符号都是唯一的，符号键永远不会与任何其他字符串或符号键冲突。
- en: '22.3.2.1 Example: a library with a meta-level method'
  id: totrans-69
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 22.3.2.1 示例：具有元级别方法的库
- en: 'As an example, let’s assume we are writing a library that treats objects differently
    if they implement a special method. This is what defining a property key for such
    a method and implementing it for an object would look like:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设我们正在编写一个库，如果对象实现了一个特殊方法，它会以不同的方式处理对象。这就是为这样一个方法定义属性键并为对象实现它的样子：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The square brackets in line A enable us to specify that the method must have
    the key `specialMethod`. More details are explained in [§28.7.2 “Computed keys
    in object literals”](ch_objects.html#object-literals-computed-keys).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: A行中的方括号使我们能够指定该方法必须具有键`specialMethod`。更多细节在[§28.7.2“对象文字中的计算键”](ch_objects.html#object-literals-computed-keys)中有解释。
- en: 22.4 Publicly known symbols
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 22.4 公开已知符号
- en: 'Symbols that play special roles within ECMAScript are called *publicly known
    symbols*. Examples include:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在ECMAScript中扮演特殊角色的符号称为*公开已知符号*。例如：
- en: '`Symbol.iterator`: makes an object *iterable*. It’s the key of a method that
    returns an iterator. For more information on this topic, see [§30 “Synchronous
    iteration”](ch_sync-iteration.html).'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Symbol.iterator`: 使对象*可迭代*。它是返回迭代器的方法的键。有关此主题的更多信息，请参见[§30“同步迭代”](ch_sync-iteration.html)。'
- en: '`Symbol.hasInstance`: customizes how `instanceof` works. If an object implements
    a method with that key, it can be used at the right-hand side of that operator.
    For example:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Symbol.hasInstance`: 自定义`instanceof`的工作方式。如果对象实现了具有该键的方法，则可以在该运算符的右侧使用它。例如：'
- en: '[PRE15]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`Symbol.toStringTag`: influences the default `.toString()` method.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Symbol.toStringTag`: 影响默认的`.toString()`方法。'
- en: '[PRE16]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Note: It’s usually better to override `.toString()`.'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意：通常最好重写`.toString()`。
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Exercises: Publicly
    known symbols**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **练习：公开已知符号**'
- en: '`Symbol.toStringTag`: `exercises/symbols/to_string_tag_test.mjs`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Symbol.toStringTag`: `exercises/symbols/to_string_tag_test.mjs`'
- en: '`Symbol.hasInstance`: `exercises/symbols/has_instance_test.mjs`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Symbol.hasInstance`: `exercises/symbols/has_instance_test.mjs`'
- en: 22.5 Converting symbols
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 22.5 转换符号
- en: What happens if we convert a symbol `sym` to another primitive type? Tbl. [15](#tbl:converting-to-symbol)
    has the answers.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将符号`sym`转换为另一个原始类型会发生什么？Tbl. [15](#tbl:converting-to-symbol)中有答案。
- en: 'Table 15: The results of converting symbols to other primitive types.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 表15：将符号转换为其他原始类型的结果。
- en: '| Convert to | Explicit conversion | Coercion (implicit conv.) |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 转换为 | 显式转换 | 强制转换（隐式转换） |'
- en: '| --- | --- | --- |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| boolean | `Boolean(sym)` `→` OK | `!sym` `→` OK |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 布尔值 | `Boolean(sym)` `→` OK | `!sym` `→` OK |'
- en: '| number | `Number(sym)` `→` `TypeError` | `sym*2` `→` `TypeError` |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 数字 | `Number(sym)` `→` `TypeError` | `sym*2` `→` `TypeError` |'
- en: '| string | `String(sym)` `→` OK | `''''+sym` `→` `TypeError` |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: 字符串 | `String(sym)` `→` OK | `''+sym` `→` `TypeError` |
- en: '|  | `sym.toString()` `→` OK | ``${sym}`` `→` `TypeError` |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '|  | `sym.toString()` `→` OK | ``${sym}`` `→` `TypeError` |'
- en: 'One key pitfall with symbols is how often exceptions are thrown when converting
    them to something else. What is the thinking behind that? First, conversion to
    number never makes sense and should be warned about. Second, converting a symbol
    to a string is indeed useful for diagnostic output. But it also makes sense to
    warn about accidentally turning a symbol into a string (which is a different kind
    of property key):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 符号的一个关键陷阱是在将它们转换为其他类型时经常抛出异常。这背后的思想是什么？首先，将符号转换为数字是毫无意义的，应该提出警告。其次，将符号转换为字符串确实对诊断输出很有用。但是，警告意外地将符号转换为字符串也是有道理的（这是一种不同类型的属性键）：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The downside is that the exceptions make working with symbols more complicated.
    You have to explicitly convert symbols when assembling strings via the plus operator:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点是异常使得使用符号变得更加复杂。在通过加号运算符组装字符串时，您必须显式转换符号：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **测验**'
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[测验应用程序](ch_quizzes-exercises.html#quizzes)。
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/15)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/impatient-js/issues/15)'
