- en: 15 Booleans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://exploringjs.com/impatient-js/ch_booleans.html](https://exploringjs.com/impatient-js/ch_booleans.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 15.1 [Converting to boolean](ch_booleans.html#converting-to-boolean)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.2 [Falsy and truthy values](ch_booleans.html#falsiness-truthiness)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.2.1 [Checking for truthiness or falsiness](ch_booleans.html#checking-for-truthiness-or-falsiness)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.3 [Truthiness-based existence checks](ch_booleans.html#truthiness-existence-checks)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '15.3.1 [Pitfall: truthiness-based existence checks are imprecise](ch_booleans.html#pitfall-truthiness-based-existence-checks-are-imprecise)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '15.3.2 [Use case: was a parameter provided?](ch_booleans.html#use-case-was-a-parameter-provided)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '15.3.3 [Use case: does a property exist?](ch_booleans.html#use-case-does-a-property-exist)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.4 [Conditional operator (`? :`)](ch_booleans.html#conditional-operator)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '15.5 [Binary logical operators: And (`x && y`), Or (`x || y`)](ch_booleans.html#binary-logical-operators-and-x-y-or-x-y)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.5.1 [Value-preservation](ch_booleans.html#value-preservation)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.5.2 [Short-circuiting](ch_booleans.html#short-circuiting)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.5.3 [Logical And (`x && y`)](ch_booleans.html#logical-and-x-y)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.5.4 [Logical Or (`||`)](ch_booleans.html#logical-or)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15.6 [Logical Not (`!`)](ch_booleans.html#logical-not)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'The primitive type *boolean* comprises two values – `false` and `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 15.1 Converting to boolean
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/b666ba365e94edaf0ef510fd7e12c7de.png)  **The meaning of “converting
    to [type]”**'
  prefs: []
  type: TYPE_NORMAL
- en: “Converting to [type]” is short for “Converting arbitrary values to values of
    type [type]”.
  prefs: []
  type: TYPE_NORMAL
- en: These are three ways in which you can convert an arbitrary value `x` to a boolean.
  prefs: []
  type: TYPE_NORMAL
- en: '`Boolean(x)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most descriptive; recommended.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`x ? true : false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses the conditional operator (explained [later in this chapter](ch_booleans.html#conditional-operator)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`!!x`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses [the logical Not operator (`!`)](ch_booleans.html#logical-not). This operator
    coerces its operand to boolean. It is applied a second time to get a non-negated
    result.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tbl. [4](#tbl:converting_to_boolean) describes how various values are converted
    to boolean.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 4: Converting values to booleans.'
  prefs: []
  type: TYPE_NORMAL
- en: '| `x` | `Boolean(x)` |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `undefined` | `false` |'
  prefs: []
  type: TYPE_TB
- en: '| `null` | `false` |'
  prefs: []
  type: TYPE_TB
- en: '| boolean | `x` (no change) |'
  prefs: []
  type: TYPE_TB
- en: '| number | `0` `→` `false`, `NaN` `→` `false` |'
  prefs: []
  type: TYPE_TB
- en: '|  | Other numbers `→` `true` |'
  prefs: []
  type: TYPE_TB
- en: '| bigint | `0` `→` `false` |'
  prefs: []
  type: TYPE_TB
- en: '|  | Other numbers `→` `true` |'
  prefs: []
  type: TYPE_TB
- en: '| string | `''''` `→` `false` |'
  prefs: []
  type: TYPE_TB
- en: '|  | Other strings `→` `true` |'
  prefs: []
  type: TYPE_TB
- en: '| symbol | `true` |'
  prefs: []
  type: TYPE_TB
- en: '| object | Always `true` |'
  prefs: []
  type: TYPE_TB
- en: 15.2 Falsy and truthy values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When checking the condition of an `if` statement, a `while` loop, or a `do-while`
    loop, JavaScript works differently than you may expect. Take, for example, the
    following condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In many programming languages, this condition is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'However, in JavaScript, it is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'That is, JavaScript checks if `value` is `true` when converted to boolean.
    This kind of check is so common that the following names were introduced:'
  prefs: []
  type: TYPE_NORMAL
- en: A value is called *truthy* if it is `true` when converted to boolean.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A value is called *falsy* if it is `false` when converted to boolean.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each value is either truthy or falsy. Consulting tbl. [4](#tbl:converting_to_boolean),
    we can make an exhaustive list of falsy values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`undefined`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`null`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Boolean: `false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Numbers: `0`, `NaN`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bigint: `0n`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'String: `''''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All other values (including all objects) are truthy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 15.2.1 Checking for truthiness or falsiness
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The conditional operator that is used in the last line, is explained [later
    in this chapter](ch_booleans.html#conditional-operator).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Exercise: Truthiness**'
  prefs: []
  type: TYPE_NORMAL
- en: '`exercises/booleans/truthiness_exrc.mjs`'
  prefs: []
  type: TYPE_NORMAL
- en: 15.3 Truthiness-based existence checks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In JavaScript, if you read something that doesn’t exist (e.g., a missing parameter
    or a missing property), you usually get `undefined` as a result. In these cases,
    an existence check amounts to comparing a value with `undefined`. For example,
    the following code checks if object `obj` has the property `.prop`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Due to `undefined` being falsy, we can shorten this check to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '15.3.1 Pitfall: truthiness-based existence checks are imprecise'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Truthiness-based existence checks have one pitfall: they are not very precise.
    Consider this previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The body of the `if` statement is skipped if:'
  prefs: []
  type: TYPE_NORMAL
- en: '`obj.prop` is missing (in which case, JavaScript returns `undefined`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, it is also skipped if:'
  prefs: []
  type: TYPE_NORMAL
- en: '`obj.prop` is `undefined`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`obj.prop` is any other falsy value (`null`, `0`, `''''`, etc.).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In practice, this rarely causes problems, but you have to be aware of this pitfall.
  prefs: []
  type: TYPE_NORMAL
- en: '15.3.2 Use case: was a parameter provided?'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A truthiness check is often used to determine if the caller of a function provided
    a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: On the plus side, this pattern is established and short. It correctly throws
    errors for `undefined` and `null`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the minus side, there is the previously mentioned pitfall: the code also
    throws errors for all other falsy values.'
  prefs: []
  type: TYPE_NORMAL
- en: 'An alternative is to check for `undefined`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '15.3.3 Use case: does a property exist?'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Truthiness checks are also often used to determine if a property exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This pattern is also established and has the usual caveat: it not only throws
    if the property is missing, but also if it exists and has any of the falsy values.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you truly want to check if the property exists, you have to use [the `in`
    operator](ch_objects.html#in-operator):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 15.4 Conditional operator (`? :`)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The conditional operator is the expression version of the `if` statement. Its
    syntax is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'It is evaluated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: If `condition` is truthy, evaluate and return `thenExpression`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, evaluate and return `elseExpression`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The conditional operator is also called *ternary operator* because it has three
    operands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The following code demonstrates that whichever of the two branches “then” and
    “else” is chosen via the condition, only that branch is evaluated. The other branch
    isn’t.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '15.5 Binary logical operators: And (`x && y`), Or (`x || y`)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The binary logical operators `&&` and `||` are *value-preserving* and *short-circuiting*.
  prefs: []
  type: TYPE_NORMAL
- en: 15.5.1 Value-preservation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*Value-preservation* means that operands are interpreted as booleans but returned
    unchanged:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 15.5.2 Short-circuiting
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*Short-circuiting* means if the first operand already determines the result,
    then the second operand is not evaluated. The only other operator that delays
    evaluating its operands is the conditional operator. Usually, all operands are
    evaluated before performing an operation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, logical And (`&&`) does not evaluate its second operand if the
    first one is falsy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If the first operand is truthy, `console.log()` is executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 15.5.3 Logical And (`x && y`)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The expression `a && b` (“`a` And `b`”) is evaluated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Evaluate `a`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is the result falsy? Return it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Otherwise, evaluate `b` and return the result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In other words, the following two expressions are roughly equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 15.5.4 Logical Or (`||`)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The expression `a || b` (“`a` Or `b`”) is evaluated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Evaluate `a`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is the result truthy? Return it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Otherwise, evaluate `b` and return the result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In other words, the following two expressions are roughly equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '15.5.4.1 Legacy use case for logical Or (`||`): providing default values'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'ECMAScript 2020 introduced the nullish coalescing operator (`??`) for default
    values. Before that, logical Or was used for this purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: See [§14.4 “The nullish coalescing operator (`??`) for default values [ES2020]”](ch_undefined-null.html#nullish-coalescing-operator)
    for more information on `??` and the downsides of `||` in this case.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Legacy exercise: Default
    values via the Or operator (`||`)**'
  prefs: []
  type: TYPE_NORMAL
- en: '`exercises/booleans/default_via_or_exrc.mjs`'
  prefs: []
  type: TYPE_NORMAL
- en: 15.6 Logical Not (`!`)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The expression `!x` (“Not `x`”) is evaluated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Evaluate `x`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it truthy? Return `false`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Otherwise, return `true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz**'
  prefs: []
  type: TYPE_NORMAL
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  prefs: []
  type: TYPE_NORMAL
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/10)'
  prefs: []
  type: TYPE_NORMAL
