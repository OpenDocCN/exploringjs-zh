- en: 15 Booleans
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15 布尔值
- en: 原文：[https://exploringjs.com/impatient-js/ch_booleans.html](https://exploringjs.com/impatient-js/ch_booleans.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/impatient-js/ch_booleans.html](https://exploringjs.com/impatient-js/ch_booleans.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 15.1 [Converting to boolean](ch_booleans.html#converting-to-boolean)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.1 [转换为布尔值](ch_booleans.html#converting-to-boolean)
- en: 15.2 [Falsy and truthy values](ch_booleans.html#falsiness-truthiness)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.2 [假值和真值](ch_booleans.html#falsiness-truthiness)
- en: 15.2.1 [Checking for truthiness or falsiness](ch_booleans.html#checking-for-truthiness-or-falsiness)
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.2.1 [检查真值或假值](ch_booleans.html#checking-for-truthiness-or-falsiness)
- en: 15.3 [Truthiness-based existence checks](ch_booleans.html#truthiness-existence-checks)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.3 [基于真值的存在性检查](ch_booleans.html#truthiness-existence-checks)
- en: '15.3.1 [Pitfall: truthiness-based existence checks are imprecise](ch_booleans.html#pitfall-truthiness-based-existence-checks-are-imprecise)'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.3.1 [陷阱：基于真值的存在性检查不精确](ch_booleans.html#pitfall-truthiness-based-existence-checks-are-imprecise)
- en: '15.3.2 [Use case: was a parameter provided?](ch_booleans.html#use-case-was-a-parameter-provided)'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.3.2 [用例：是否提供了参数？](ch_booleans.html#use-case-was-a-parameter-provided)
- en: '15.3.3 [Use case: does a property exist?](ch_booleans.html#use-case-does-a-property-exist)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.3.3 [用例：属性是否存在？](ch_booleans.html#use-case-does-a-property-exist)
- en: 15.4 [Conditional operator (`? :`)](ch_booleans.html#conditional-operator)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.4 [条件运算符（`? :`）](ch_booleans.html#conditional-operator)
- en: '15.5 [Binary logical operators: And (`x && y`), Or (`x || y`)](ch_booleans.html#binary-logical-operators-and-x-y-or-x-y)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.5 [二进制逻辑运算符：And（`x && y`），Or（`x || y`）](ch_booleans.html#binary-logical-operators-and-x-y-or-x-y)
- en: 15.5.1 [Value-preservation](ch_booleans.html#value-preservation)
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.5.1 [值保留](ch_booleans.html#value-preservation)
- en: 15.5.2 [Short-circuiting](ch_booleans.html#short-circuiting)
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.5.2 [短路](ch_booleans.html#short-circuiting)
- en: 15.5.3 [Logical And (`x && y`)](ch_booleans.html#logical-and-x-y)
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.5.3 [逻辑与（`x && y`）](ch_booleans.html#logical-and-x-y)
- en: 15.5.4 [Logical Or (`||`)](ch_booleans.html#logical-or)
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.5.4 [逻辑或（`||`）](ch_booleans.html#logical-or)
- en: 15.6 [Logical Not (`!`)](ch_booleans.html#logical-not)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15.6 [逻辑非（`!`）](ch_booleans.html#logical-not)
- en: '* * *'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'The primitive type *boolean* comprises two values – `false` and `true`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 原始类型*boolean*包括两个值 - `false` 和 `true`：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 15.1 Converting to boolean
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.1 转换为布尔值
- en: '![](../Images/b666ba365e94edaf0ef510fd7e12c7de.png)  **The meaning of “converting
    to [type]”**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/b666ba365e94edaf0ef510fd7e12c7de.png)  **“转换为[type]” 的含义**'
- en: “Converting to [type]” is short for “Converting arbitrary values to values of
    type [type]”.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: “转换为[type]”是“将任意值转换为[type]类型的值”的简称。
- en: These are three ways in which you can convert an arbitrary value `x` to a boolean.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种方法可以将任意值`x`转换为布尔值。
- en: '`Boolean(x)`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Boolean(x)`'
- en: Most descriptive; recommended.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最具描述性；推荐使用。
- en: '`x ? true : false`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x ? true : false`'
- en: Uses the conditional operator (explained [later in this chapter](ch_booleans.html#conditional-operator)).
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用条件运算符（在本章后面解释）。
- en: '`!!x`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`!!x`'
- en: Uses [the logical Not operator (`!`)](ch_booleans.html#logical-not). This operator
    coerces its operand to boolean. It is applied a second time to get a non-negated
    result.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[逻辑非运算符（`!`）](ch_booleans.html#logical-not)。此运算符将其操作数强制转换为布尔值。然后再次应用它以获得非否定的结果。
- en: Tbl. [4](#tbl:converting_to_boolean) describes how various values are converted
    to boolean.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Tbl. [4](#tbl:converting_to_boolean)描述了各种值如何转换为布尔值。
- en: 'Table 4: Converting values to booleans.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 表4：将值转换为布尔值。
- en: '| `x` | `Boolean(x)` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `x` | `Boolean(x)` |'
- en: '| --- | --- |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `undefined` | `false` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `undefined` | `false` |'
- en: '| `null` | `false` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `null` | `false` |'
- en: '| boolean | `x` (no change) |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| boolean | `x` (no change) |'
- en: '| number | `0` `→` `false`, `NaN` `→` `false` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| number | `0` `→` `false`, `NaN` `→` `false` |'
- en: '|  | Other numbers `→` `true` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '|  | 其他数字 `→` `true` |'
- en: '| bigint | `0` `→` `false` |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| bigint | `0` `→` `false` |'
- en: '|  | Other numbers `→` `true` |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '|  | 其他数字 `→` `true` |'
- en: '| string | `''''` `→` `false` |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| string | `''''` `→` `false` |'
- en: '|  | Other strings `→` `true` |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '|  | 其他字符串 `→` `true` |'
- en: '| symbol | `true` |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| symbol | `true` |'
- en: '| object | Always `true` |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| object | 始终为 `true` |'
- en: 15.2 Falsy and truthy values
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.2 假值和真值
- en: 'When checking the condition of an `if` statement, a `while` loop, or a `do-while`
    loop, JavaScript works differently than you may expect. Take, for example, the
    following condition:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查`if`语句、`while`循环或`do-while`循环的条件时，JavaScript的工作方式与您可能期望的不同。例如，考虑以下条件：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In many programming languages, this condition is equivalent to:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多编程语言中，此条件等同于：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'However, in JavaScript, it is equivalent to:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在JavaScript中，它等同于：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'That is, JavaScript checks if `value` is `true` when converted to boolean.
    This kind of check is so common that the following names were introduced:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，JavaScript检查将`value`转换为布尔值时是否为`true`。这种检查非常常见，因此引入了以下名称：
- en: A value is called *truthy* if it is `true` when converted to boolean.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果将值转换为布尔值时为`true`，则称该值为*真值*。
- en: A value is called *falsy* if it is `false` when converted to boolean.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果将值转换为布尔值时为`false`，则称该值为*假值*。
- en: 'Each value is either truthy or falsy. Consulting tbl. [4](#tbl:converting_to_boolean),
    we can make an exhaustive list of falsy values:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 每个值都是真值或假值。通过查阅表4，我们可以列出所有假值的详尽列表：
- en: '`undefined`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`undefined`'
- en: '`null`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`null`'
- en: 'Boolean: `false`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值：`false`
- en: 'Numbers: `0`, `NaN`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字：`0`，`NaN`
- en: 'Bigint: `0n`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bigint：`0n`
- en: 'String: `''''`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串：`''`
- en: 'All other values (including all objects) are truthy:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他值（包括所有对象）都是真值：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 15.2.1 Checking for truthiness or falsiness
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.2.1 检查真值或假值
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The conditional operator that is used in the last line, is explained [later
    in this chapter](ch_booleans.html#conditional-operator).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一行使用的条件运算符在本章后面有解释。
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Exercise: Truthiness**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **练习：真值**'
- en: '`exercises/booleans/truthiness_exrc.mjs`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`exercises/booleans/truthiness_exrc.mjs`'
- en: 15.3 Truthiness-based existence checks
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.3 基于真值的存在性检查
- en: 'In JavaScript, if you read something that doesn’t exist (e.g., a missing parameter
    or a missing property), you usually get `undefined` as a result. In these cases,
    an existence check amounts to comparing a value with `undefined`. For example,
    the following code checks if object `obj` has the property `.prop`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，如果你读取一个不存在的东西（例如，一个缺失的参数或一个缺失的属性），通常会得到`undefined`作为结果。在这些情况下，存在性检查等同于将一个值与`undefined`进行比较。例如，以下代码检查对象`obj`是否具有属性`.prop`：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Due to `undefined` being falsy, we can shorten this check to:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`undefined`是假值，我们可以将这个检查缩短为：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '15.3.1 Pitfall: truthiness-based existence checks are imprecise'
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.3.1 陷阱：基于真实性的存在性检查不够精确
- en: 'Truthiness-based existence checks have one pitfall: they are not very precise.
    Consider this previous example:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 基于真实性的存在性检查有一个陷阱：它们不是很精确。考虑这个之前的例子：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The body of the `if` statement is skipped if:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果：
- en: '`obj.prop` is missing (in which case, JavaScript returns `undefined`).'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`obj.prop`是丢失的（在这种情况下，JavaScript返回`undefined`）。'
- en: 'However, it is also skipped if:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果：
- en: '`obj.prop` is `undefined`.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`obj.prop`是`undefined`。'
- en: '`obj.prop` is any other falsy value (`null`, `0`, `''''`, etc.).'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`obj.prop`是任何其他假值（`null`，`0`，`''''`，等等）。'
- en: In practice, this rarely causes problems, but you have to be aware of this pitfall.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这很少会引起问题，但你必须意识到这个陷阱。
- en: '15.3.2 Use case: was a parameter provided?'
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.3.2 用例：是否提供了参数？
- en: 'A truthiness check is often used to determine if the caller of a function provided
    a parameter:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 真实性检查经常用于确定函数的调用者是否提供了参数：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: On the plus side, this pattern is established and short. It correctly throws
    errors for `undefined` and `null`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 好的一面是，这种模式已经被建立并且很简短。它可以正确地抛出`undefined`和`null`的错误。
- en: 'On the minus side, there is the previously mentioned pitfall: the code also
    throws errors for all other falsy values.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 不好的一面是，之前提到的陷阱：代码也会对所有其他假值抛出错误。
- en: 'An alternative is to check for `undefined`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是检查`undefined`：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '15.3.3 Use case: does a property exist?'
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.3.3 用例：属性是否存在？
- en: 'Truthiness checks are also often used to determine if a property exists:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 真实性检查也经常用于确定属性是否存在：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This pattern is also established and has the usual caveat: it not only throws
    if the property is missing, but also if it exists and has any of the falsy values.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式也已经建立，并且有一个通常的警告：它不仅在属性丢失时抛出错误，而且在属性存在并且具有任何假值时也会抛出错误。
- en: 'If you truly want to check if the property exists, you have to use [the `in`
    operator](ch_objects.html#in-operator):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的想检查属性是否存在，你必须使用[in运算符](ch_objects.html#in-operator)：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 15.4 Conditional operator (`? :`)
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.4 条件运算符（`? :`）
- en: 'The conditional operator is the expression version of the `if` statement. Its
    syntax is:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 条件运算符是`if`语句的表达式版本。它的语法是：
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'It is evaluated as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 它的评估如下：
- en: If `condition` is truthy, evaluate and return `thenExpression`.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`condition`为真值，则评估并返回`thenExpression`。
- en: Otherwise, evaluate and return `elseExpression`.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，评估并返回`elseExpression`。
- en: The conditional operator is also called *ternary operator* because it has three
    operands.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 条件运算符也被称为*三元运算符*，因为它有三个操作数。
- en: 'Examples:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The following code demonstrates that whichever of the two branches “then” and
    “else” is chosen via the condition, only that branch is evaluated. The other branch
    isn’t.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了通过条件选择的两个分支“then”和“else”，只有一个分支被评估。另一个分支不会被评估。
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '15.5 Binary logical operators: And (`x && y`), Or (`x || y`)'
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.5 二进制逻辑运算符：与（`x && y`），或（`x || y`）
- en: The binary logical operators `&&` and `||` are *value-preserving* and *short-circuiting*.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制逻辑运算符`&&`和`||`是*值保留*和*短路*的。
- en: 15.5.1 Value-preservation
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.5.1 值保留
- en: '*Value-preservation* means that operands are interpreted as booleans but returned
    unchanged:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '*值保留*意味着操作数被解释为布尔值，但返回不变：'
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 15.5.2 Short-circuiting
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.5.2 短路
- en: '*Short-circuiting* means if the first operand already determines the result,
    then the second operand is not evaluated. The only other operator that delays
    evaluating its operands is the conditional operator. Usually, all operands are
    evaluated before performing an operation.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*短路*意味着如果第一个操作数已经确定了结果，那么第二个操作数就不会被评估。唯一延迟评估其操作数的其他运算符是条件运算符。通常，在执行操作之前会评估所有操作数。'
- en: 'For example, logical And (`&&`) does not evaluate its second operand if the
    first one is falsy:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，逻辑与（`&&`）如果第一个操作数为假，则不评估第二个操作数：
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If the first operand is truthy, `console.log()` is executed:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第一个操作数为真值，则执行`console.log()`：
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 15.5.3 Logical And (`x && y`)
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.5.3 逻辑与（`x && y`）
- en: 'The expression `a && b` (“`a` And `b`”) is evaluated as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式`a && b`（“`a`和`b`”）的评估如下：
- en: Evaluate `a`.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估`a`。
- en: Is the result falsy? Return it.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果是否为假？返回它。
- en: Otherwise, evaluate `b` and return the result.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则，评估`b`并返回结果。
- en: 'In other words, the following two expressions are roughly equivalent:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，以下两个表达式大致等价：
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Examples:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE20]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 15.5.4 Logical Or (`||`)
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.5.4 逻辑或（`||`）
- en: 'The expression `a || b` (“`a` Or `b`”) is evaluated as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式`a || b`（“`a`或`b`”）的评估如下：
- en: Evaluate `a`.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估`a`。
- en: Is the result truthy? Return it.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果是否为真值？返回它。
- en: Otherwise, evaluate `b` and return the result.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则，评估`b`并返回结果。
- en: 'In other words, the following two expressions are roughly equivalent:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，以下两个表达式大致等价：
- en: '[PRE21]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Examples:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '15.5.4.1 Legacy use case for logical Or (`||`): providing default values'
  id: totrans-136
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 15.5.4.1 逻辑或（`||`）的传统用例：提供默认值
- en: 'ECMAScript 2020 introduced the nullish coalescing operator (`??`) for default
    values. Before that, logical Or was used for this purpose:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 2020引入了空值合并运算符（`??`）用于默认值。在此之前，逻辑或被用于此目的：
- en: '[PRE23]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: See [§14.4 “The nullish coalescing operator (`??`) for default values [ES2020]”](ch_undefined-null.html#nullish-coalescing-operator)
    for more information on `??` and the downsides of `||` in this case.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`??`和在这种情况下`||`的缺点的更多信息，请参见[§14.4“空值合并运算符（`??`）用于默认值[ES2020]”](ch_undefined-null.html#nullish-coalescing-operator)。
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Legacy exercise: Default
    values via the Or operator (`||`)**'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png) **传统练习：通过或运算符（`||`）提供默认值**'
- en: '`exercises/booleans/default_via_or_exrc.mjs`'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`exercises/booleans/default_via_or_exrc.mjs`'
- en: 15.6 Logical Not (`!`)
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.6 逻辑非 (`!`)
- en: 'The expression `!x` (“Not `x`”) is evaluated as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式`!x`（“非`x`”）的求值如下：
- en: Evaluate `x`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 求值`x`。
- en: Is it truthy? Return `false`.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它是真值吗？返回`false`。
- en: Otherwise, return `true`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则，返回`true`。
- en: 'Examples:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE24]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz**'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz**'
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[quiz app](ch_quizzes-exercises.html#quizzes)。
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/10)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[Comments](https://github.com/rauschma/impatient-js/issues/10)'
