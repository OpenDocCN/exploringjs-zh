["```js\nconst proto = {\n prop: 1,\n};\n// Make proto.prop non-writable:\nObject.defineProperty(\n proto, 'prop', {writable: false});\n\nconst obj = Object.create(proto);\n\nassert.throws(\n () => obj.prop = 2,\n /^TypeError: Cannot assign to read only property 'prop'/);\n```", "```js\ninterface DataPropertyDescriptor {\n value?: any;\n writable?: boolean;\n configurable?: boolean;\n enumerable?: boolean;\n}\ninterface AccessorPropertyDescriptor {\n get?: (this: any) => any;\n set?: (this: any, v: any) => void;\n configurable?: boolean;\n enumerable?: boolean;\n}\ntype PropertyDescriptor = DataPropertyDescriptor | AccessorPropertyDescriptor;\n```", "```js\nconst legoBrick = {\n kind: 'Plate 1x3',\n color: 'yellow',\n get description() {\n return `${this.kind} (${this.color})`;\n },\n};\n```", "```js\nassert.deepEqual(\n Object.getOwnPropertyDescriptor(legoBrick, 'color'),\n {\n value: 'yellow',\n writable: true,\n enumerable: true,\n configurable: true,\n });\n```", "```js\nconst desc = Object.getOwnPropertyDescriptor.bind(Object);\nassert.deepEqual(\n Object.getOwnPropertyDescriptor(legoBrick, 'description'),\n {\n get: desc(legoBrick, 'description').get, // (A)\n set: undefined,\n enumerable: true,\n configurable: true\n });\n```", "```js\nconst legoBrick = {\n kind: 'Plate 1x3',\n color: 'yellow',\n get description() {\n return `${this.kind} (${this.color})`;\n },\n};\n\nconst desc = Object.getOwnPropertyDescriptor.bind(Object);\nassert.deepEqual(\n Object.getOwnPropertyDescriptors(legoBrick),\n {\n kind: {\n value: 'Plate 1x3',\n writable: true,\n enumerable: true,\n configurable: true,\n },\n color: {\n value: 'yellow',\n writable: true,\n enumerable: true,\n configurable: true,\n },\n description: {\n get: desc(legoBrick, 'description').get, // (A)\n set: undefined,\n enumerable: true,\n configurable: true,\n },\n });\n```", "```js\nconst car = {};\n\nObject.defineProperty(car, 'color', {\n value: 'blue',\n writable: true,\n enumerable: true,\n configurable: true,\n});\n\nassert.deepEqual(\n car,\n {\n color: 'blue',\n });\n```", "```js\nconst car = {\n color: 'blue',\n};\n\nlet readCount = 0;\nObject.defineProperty(car, 'color', {\n get() {\n readCount++;\n return 'red';\n },\n});\n\nassert.equal(car.color, 'red');\nassert.equal(readCount, 1);\n```", "```js\nconst car = {\n color: 'blue',\n};\n\n// Use the same attributes as assignment:\nObject.defineProperty(\n car, 'color', {\n value: 'green',\n writable: true,\n enumerable: true,\n configurable: true,\n });\n\nassert.deepEqual(\n car,\n {\n color: 'green',\n });\n```", "```js\nconst legoBrick1 = {};\nObject.defineProperties(\n legoBrick1,\n {\n kind: {\n value: 'Plate 1x3',\n writable: true,\n enumerable: true,\n configurable: true,\n },\n color: {\n value: 'yellow',\n writable: true,\n enumerable: true,\n configurable: true,\n },\n description: {\n get: function () {\n return `${this.kind} (${this.color})`;\n },\n enumerable: true,\n configurable: true,\n },\n });\n\nassert.deepEqual(\n legoBrick1,\n {\n kind: 'Plate 1x3',\n color: 'yellow',\n get description() {\n return `${this.kind} (${this.color})`;\n },\n });\n```", "```js\nconst legoBrick2 = Object.create(\n Object.prototype,\n {\n kind: {\n value: 'Plate 1x3',\n writable: true,\n enumerable: true,\n configurable: true,\n },\n color: {\n value: 'yellow',\n writable: true,\n enumerable: true,\n configurable: true,\n },\n description: {\n get: function () {\n return `${this.kind} (${this.color})`;\n },\n enumerable: true,\n configurable: true,\n },\n });\n\n// Did we really create the same object?\nassert.deepEqual(legoBrick1, legoBrick2); // Yes!\n```", "```js\ntarget[key] = source[key];\n```", "```js\nconst source = {\n set data(value) {\n this._data = value;\n }\n};\n\n// Property `data` exists because there is only a setter\n// but has the value `undefined`.\nassert.equal('data' in source, true);\nassert.equal(source.data, undefined);\n```", "```js\nconst target1 = {};\nObject.assign(target1, source);\n\nassert.deepEqual(\n Object.getOwnPropertyDescriptor(target1, 'data'),\n {\n value: undefined,\n writable: true,\n enumerable: true,\n configurable: true,\n });\n\n// For comparison, the original:\nconst desc = Object.getOwnPropertyDescriptor.bind(Object);\nassert.deepEqual(\n Object.getOwnPropertyDescriptor(source, 'data'),\n {\n get: undefined,\n set: desc(source, 'data').set,\n enumerable: true,\n configurable: true,\n });\n```", "```js\nconst target2 = {};\nObject.defineProperties(\n target2, Object.getOwnPropertyDescriptors(source));\n\nassert.deepEqual(\n Object.getOwnPropertyDescriptor(target2, 'data'),\n {\n get: undefined,\n set: desc(source, 'data').set,\n enumerable: true,\n configurable: true,\n });\n```", "```js\nconst original = {\n set data(value) {\n this._data = value;\n }\n};\n\nconst clone = Object.create(\n Object.getPrototypeOf(original),\n Object.getOwnPropertyDescriptors(original));\n\nassert.deepEqual(original, clone);\n```", "```js\nconst car = {};\nObject.defineProperty(\n car, 'color', {\n value: 'red',\n });\nassert.deepEqual(\n Object.getOwnPropertyDescriptor(car, 'color'),\n {\n value: 'red',\n writable: false,\n enumerable: false,\n configurable: false,\n });\n```", "```js\nconst car = {\n color: 'yellow',\n};\nassert.deepEqual(\n Object.getOwnPropertyDescriptor(car, 'color'),\n {\n value: 'yellow',\n writable: true,\n enumerable: true,\n configurable: true,\n });\nObject.defineProperty(\n car, 'color', {\n value: 'pink',\n });\nassert.deepEqual(\n Object.getOwnPropertyDescriptor(car, 'color'),\n {\n value: 'pink',\n writable: true,\n enumerable: true,\n configurable: true,\n });\n```", "```js\nconst obj = {};\nobj.prop = 3;\n\nassert.deepEqual(\n Object.getOwnPropertyDescriptors(obj),\n {\n prop: {\n value: 3,\n writable: true,\n enumerable: true,\n configurable: true,\n }\n });\n```", "```js\nconst obj = { prop: 'yes' };\n\nassert.deepEqual(\n Object.getOwnPropertyDescriptors(obj),\n {\n prop: {\n value: 'yes',\n writable: true,\n enumerable: true,\n configurable: true\n }\n });\n```", "```js\n> Object.getOwnPropertyDescriptor([], 'length')\n{ value: 0, writable: true, enumerable: false, configurable: false }\n> Object.getOwnPropertyDescriptor('abc', 'length')\n{ value: 3, writable: false, enumerable: false, configurable: false }\n```", "```js\nassert.deepEqual(\n Object.getOwnPropertyDescriptor(Array.prototype, 'map'),\n {\n value: Array.prototype.map,\n writable: true,\n enumerable: false,\n configurable: true\n });\n```", "```js\nclass DataContainer {\n accessCount = 0;\n constructor(data) {\n this.data = data;\n }\n getData() {\n this.accessCount++;\n return this.data;\n }\n}\nassert.deepEqual(\n Object.getOwnPropertyDescriptors(DataContainer.prototype),\n {\n constructor: {\n value: DataContainer,\n writable: true,\n enumerable: false,\n configurable: true,\n },\n getData: {\n value: DataContainer.prototype.getData,\n writable: true,\n enumerable: false,\n configurable: true,\n }\n });\n```", "```js\nconst dc = new DataContainer('abc')\nassert.deepEqual(\n Object.getOwnPropertyDescriptors(dc),\n {\n accessCount: {\n value: 0,\n writable: true,\n enumerable: true,\n configurable: true,\n },\n data: {\n value: 'abc',\n writable: true,\n enumerable: true,\n configurable: true,\n }\n });\n```", "```js\n    const obj = {};\n    const result = Object.defineProperty(\n     obj, 'happy', {\n     value: 'yes',\n     writable: true,\n     enumerable: true,\n     configurable: true,\n     });\n\n    // obj was returned and modified:\n    assert.equal(result, obj);\n    assert.deepEqual(obj, {\n     happy: 'yes',\n    });\n    ```", "```js\n    const address1 = Object.defineProperties({}, {\n     street: { value: 'Evergreen Terrace', enumerable: true },\n     number: { value: 742, enumerable: true },\n    });\n    ```", "```js\n    const address2 = Object.create(Object.prototype, {\n     street: { value: 'Evergreen Terrace', enumerable: true },\n     number: { value: 742, enumerable: true },\n    });\n    assert.deepEqual(address1, address2);\n    ```", "```js\n    assert.deepEqual(\n     Object.getOwnPropertyDescriptor(Object.prototype, 'toString'),\n     {\n     value: {}.toString,\n     writable: true,\n     enumerable: false,\n     configurable: true,\n     });\n    assert.equal(\n     Object.getOwnPropertyDescriptor({}, 'toString'),\n     undefined);\n    ```", "```js\n    const propertyKey = Symbol('propertyKey');\n    const obj = {\n     [propertyKey]: 'abc',\n     get count() { return 123 },\n    };\n\n    const desc = Object.getOwnPropertyDescriptor.bind(Object);\n    assert.deepEqual(\n     Object.getOwnPropertyDescriptors(obj),\n     {\n     [propertyKey]: {\n     value: 'abc',\n     writable: true,\n     enumerable: true,\n     configurable: true\n     },\n     count: {\n     get: desc(obj, 'count').get, // (A)\n     set: undefined,\n     enumerable: true,\n     configurable: true\n     }\n     });\n    ```"]