["```js\n> '7' * '3'\n21\n```", "```js\nconst obj = {};\nobj['true'] = 123;\n\n// Coerce true to the string 'true'\nassert.equal(obj[true], 123);\n```", "```js\n> [1,2,3] + [4,5,6]\n'1,2,34,5,6'\n```", "```js\n> String([1,2,3])\n'1,2,3'\n> String([4,5,6])\n'4,5,6'\n```", "```js\n> '1,2,3' + '4,5,6'\n'1,2,34,5,6'\n```", "```js\n> 'There are ' + 3 + ' items'\n'There are 3 items'\n```", "```js\n> 4 + true\n5\n```", "```js\nx = value; // assign to a previously declared variable\nobj.propKey = value; // assign to a property\narr[index] = value; // assign to an Array element\n```", "```js\nconst x = value;\nlet y = value;\n```", "```js\nmyvar op= value\nmyvar = myvar op value\n```", "```js\nlet str = '';\nstr += '<b>';\nstr += 'Hello!';\nstr += '</b>';\n\nassert.equal(str, '<b>Hello!</b>');\n```", "```js\n> '123' == 123\ntrue\n> false == 0\ntrue\n```", "```js\n> '' == 0\ntrue\n```", "```js\n> [1, 2, 3] == '1,2,3'\ntrue\n> ['1', '2', '3'] == '1,2,3'\ntrue\n```", "```js\n> [1, 2, 3] == ['1', '2', '3']\nfalse\n> [1, 2, 3] == [1, 2, 3]\nfalse\n\n> const arr = [1, 2, 3];\n> arr == arr\ntrue\n```", "```js\n> undefined == null\ntrue\n```", "```js\n> false === 0\nfalse\n> '123' === 123\nfalse\n```", "```js\n> [1, 2, 3] === '1,2,3'\nfalse\n> ['1', '2', '3'] === '1,2,3'\nfalse\n\n> [1, 2, 3] === ['1', '2', '3']\nfalse\n> [1, 2, 3] === [1, 2, 3]\nfalse\n\n> const arr = [1, 2, 3];\n> arr === arr\ntrue\n```", "```js\n> undefined === null\nfalse\n```", "```js\nif (x == 123) {\n // x is either 123 or '123'\n}\n```", "```js\nif (x === 123 || x === '123') \u00b7\u00b7\u00b7\nif (Number(x) === 123) \u00b7\u00b7\u00b7\n```", "```js\nif (x == null) {\n // x is either null or undefined\n}\n```", "```js\nif (x === undefined || x === null) \u00b7\u00b7\u00b7\nif (!x) \u00b7\u00b7\u00b7\n```", "```js\nif (x != null) \u00b7\u00b7\u00b7\nif (x !== undefined && x !== null) \u00b7\u00b7\u00b7\nif (x) \u00b7\u00b7\u00b7\n```", "```js\n> Object.is(123, 123)\ntrue\n> Object.is(123, '123')\nfalse\n```", "```js\n> Object.is(NaN, NaN)\ntrue\n> NaN === NaN\nfalse\n```", "```js\nconst myIndexOf = (arr, elem) => {\n return arr.findIndex(x => Object.is(x, elem));\n};\n```", "```js\n> myIndexOf([0,NaN,2], NaN)\n1\n> [0,NaN,2].indexOf(NaN)\n-1\n```", "```js\n> 5 >= 2\ntrue\n> 'bar' < 'foo'\ntrue\n```", "```js\n> 'a', 'b'\n'b'\n```", "```js\n> void (3 + 2)\nundefined\n```"]