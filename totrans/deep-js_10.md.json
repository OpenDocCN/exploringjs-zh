["```js\nfunction setPropertyDestructively(obj, key, value) {\n obj[key] = value;\n return obj;\n}\n\nconst obj = {city: 'Berlin', country: 'Germany'};\nsetPropertyDestructively(obj, 'city', 'Munich');\nassert.deepEqual(obj, {city: 'Munich', country: 'Germany'});\n```", "```js\nfunction setPropertyNonDestructively(obj, key, value) {\n const updatedObj = {};\n for (const [k, v] of Object.entries(obj)) {\n updatedObj[k] = (k === key ? value : v);\n }\n return updatedObj;\n}\n\nconst obj = {city: 'Berlin', country: 'Germany'};\nconst updatedObj = setPropertyNonDestructively(obj, 'city', 'Munich');\n\n// We have created an updated object:\nassert.deepEqual(updatedObj, {city: 'Munich', country: 'Germany'});\n\n// But we didn\u2019t change the original:\nassert.deepEqual(obj, {city: 'Berlin', country: 'Germany'});\n```", "```js\nfunction setPropertyNonDestructively(obj, key, value) {\n return {...obj, [key]: value};\n}\n```", "```js\nfunction setElementDestructively(arr, index, value) {\n arr[index] = value;\n}\n\nconst arr = ['a', 'b', 'c', 'd', 'e'];\nsetElementDestructively(arr, 2, 'x');\nassert.deepEqual(arr, ['a', 'b', 'x', 'd', 'e']);\n```", "```js\nfunction setElementNonDestructively(arr, index, value) {\n const updatedArr = [];\n for (const [i, v] of arr.entries()) {\n updatedArr.push(i === index ? value : v);\n }\n return updatedArr;\n}\n\nconst arr = ['a', 'b', 'c', 'd', 'e'];\nconst updatedArr = setElementNonDestructively(arr, 2, 'x');\nassert.deepEqual(updatedArr, ['a', 'b', 'x', 'd', 'e']);\nassert.deepEqual(arr, ['a', 'b', 'c', 'd', 'e']);\n```", "```js\nfunction setElementNonDestructively(arr, index, value) {\n return [\n ...arr.slice(0, index), value, ...arr.slice(index+1)];\n}\n```", "```js\nconst original = {name: 'Jane', work: {employer: 'Acme'}};\nconst updatedOriginal = {\n ...original,\n name: 'John',\n work: {\n ...original.work,\n employer: 'Spectre'\n },\n};\n\nassert.deepEqual(\n original, {name: 'Jane', work: {employer: 'Acme'}});\nassert.deepEqual(\n updatedOriginal, {name: 'John', work: {employer: 'Spectre'}});\n```", "```js\nfunction deepUpdate(original, keys, value) {\n if (keys.length === 0) {\n return value;\n }\n const currentKey = keys[0];\n if (Array.isArray(original)) {\n return original.map(\n (v, index) => index === currentKey\n ? deepUpdate(v, keys.slice(1), value) // (A)\n : v); // (B)\n } else if (typeof original === 'object' && original !== null) {\n return Object.fromEntries(\n Object.entries(original).map(\n (keyValuePair) => {\n const [k,v] = keyValuePair;\n if (k === currentKey) {\n return [k, deepUpdate(v, keys.slice(1), value)]; // (C)\n } else {\n return keyValuePair; // (D)\n }\n }));\n } else {\n // Primitive value\n return original;\n }\n}\n```", "```js\nconst original = {name: 'Jane', work: {employer: 'Acme'}};\n\nconst copy = deepUpdate(original, ['work', 'employer'], 'Spectre');\nassert.deepEqual(copy, {name: 'Jane', work: {employer: 'Spectre'}});\nassert.deepEqual(original, {name: 'Jane', work: {employer: 'Acme'}});\n```"]