["```js\nclass Point {\n constructor(x, y) {\n this.x = x;\n this.y = y;\n }\n clone() {\n return new Point(this.x, this.y);\n }\n}\nclass Color {\n constructor(name) {\n this.name = name;\n }\n clone() {\n return new Color(this.name);\n }\n}\nclass ColorPoint extends Point {\n constructor(x, y, color) {\n super(x, y);\n this.color = color;\n }\n clone() {\n return new ColorPoint(\n this.x, this.y, this.color.clone()); // (A)\n }\n}\n```", "```js\nclass Point {\n constructor(...args) {\n if (args[0] instanceof Point) {\n // Copy constructor\n const [other] = args;\n this.x = other.x;\n this.y = other.y;\n } else {\n const [x, y] = args;\n this.x = x;\n this.y = y;\n }\n }\n}\n```", "```js\nconst original = new Point(-1, 4);\nconst copy = new Point(original);\nassert.deepEqual(copy, original);\n```", "```js\nclass Point {\n constructor(x, y) {\n this.x = x;\n this.y = y;\n }\n static from(other) {\n return new Point(other.x, other.y);\n }\n}\nclass Color {\n constructor(name) {\n this.name = name;\n }\n static from(other) {\n return new Color(other.name);\n }\n}\nclass ColorPoint extends Point {\n constructor(x, y, color) {\n super(x, y);\n this.color = color;\n }\n static from(other) {\n return new ColorPoint(\n other.x, other.y, Color.from(other.color)); // (A)\n }\n}\n```", "```js\nconst original = new ColorPoint(-1, 4, new Color('red'));\nconst copy = ColorPoint.from(original);\nassert.deepEqual(copy, original);\n```"]