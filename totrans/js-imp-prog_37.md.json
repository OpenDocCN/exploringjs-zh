["```js\ninterface Iterable<T> {\n [Symbol.iterator]() : Iterator<T>;\n}\n\ninterface Iterator<T> {\n next() : IteratorResult<T>;\n}\n\ninterface IteratorResult<T> {\n value: T;\n done: boolean;\n}\n```", "```js\nconst iterable = ['a', 'b'];\n\n// The iterable is a factory for iterators:\nconst iterator = iterable[Symbol.iterator]();\n\n// Call .next() until .done is true:\nassert.deepEqual(\n iterator.next(), { value: 'a', done: false });\nassert.deepEqual(\n iterator.next(), { value: 'b', done: false });\nassert.deepEqual(\n iterator.next(), { value: undefined, done: true });\n```", "```js\nfunction logAll(iterable) {\n const iterator = iterable[Symbol.iterator]();\n while (true) {\n const {value, done} = iterator.next();\n if (done) break;\n console.log(value);\n }\n}\n\nlogAll(['a', 'b']);\n// Output:\n// 'a'\n// 'b'\n```", "```js\nconst myArray = ['a', 'b', 'c'];\n\nfor (const x of myArray) {\n console.log(x);\n}\n// Output:\n// 'a'\n// 'b'\n// 'c'\n```", "```js\nconst [first, second] = myArray;\nassert.equal(first, 'a');\nassert.equal(second, 'b');\n```", "```js\nconst mySet = new Set().add('a').add('b').add('c');\n\nfor (const x of mySet) {\n console.log(x);\n}\n// Output:\n// 'a'\n// 'b'\n// 'c'\n```", "```js\nconst [first, second] = mySet;\nassert.equal(first, 'a');\nassert.equal(second, 'b');\n```", "```js\n    const [x,y] = iterable;\n    ```", "```js\n    func(...iterable);\n    const arr = [...iterable];\n    ```", "```js\n    for (const x of iterable) { /*\u00b7\u00b7\u00b7*/ }\n    ```", "```js\n    function* generatorFunction() {\n     yield* iterable;\n    }\n    ```", "```js\n    const obj = Object.fromEntries(iterableOverKeyValuePairs);\n    ```", "```js\n    const arr = Array.from(iterable);\n    ```", "```js\n    const m  = new Map(iterableOverKeyValuePairs);\n    const wm = new WeakMap(iterableOverKeyValuePairs);\n    ```", "```js\n    const s  = new Set(iterableOverElements);\n    const ws = new WeakSet(iterableOverElements);\n    ```", "```js\n    const promise1 = Promise.all(iterableOverPromises);\n    const promise2 = Promise.race(iterableOverPromises);\n    const promise3 = Promise.any(iterableOverPromises);\n    const promise4 = Promise.allSettled(iterableOverPromises);\n    ```"]