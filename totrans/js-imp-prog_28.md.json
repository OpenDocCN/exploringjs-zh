["```js\nfor (const x of ['a', 'b', 'c']) {\n console.log(x);\n if (x === 'b') break;\n console.log('---')\n}\n\n// Output:\n// 'a'\n// '---'\n// 'b'\n```", "```js\nmy_label: { // label\n if (condition) break my_label; // labeled break\n // \u00b7\u00b7\u00b7\n}\n```", "```js\nfunction findSuffix(stringArray, suffix) {\n let result;\n search_block: {\n for (const str of stringArray) {\n if (str.endsWith(suffix)) {\n // Success:\n result = str;\n break search_block; // (A)\n }\n } // for\n // Failure:\n result = '(Untitled)'; // (B)\n } // search_block\n\n return { suffix, result };\n // Same as: {suffix: suffix, result: result}\n}\nassert.deepEqual(\n findSuffix(['notes.txt', 'index.html'], '.html'),\n { suffix: '.html', result: 'index.html' }\n);\nassert.deepEqual(\n findSuffix(['notes.txt', 'index.html'], '.mjs'),\n { suffix: '.mjs', result: '(Untitled)' }\n);\n```", "```js\nconst lines = [\n 'Normal line',\n '# Comment',\n 'Another normal line',\n];\nfor (const line of lines) {\n if (line.startsWith('#')) continue;\n console.log(line);\n}\n// Output:\n// 'Normal line'\n// 'Another normal line'\n```", "```js\nif (value) {}\nif (Boolean(value) === true) {}\n```", "```js\nif (cond) {\n // then branch\n}\n\nif (cond) {\n // then branch\n} else {\n // else branch\n}\n```", "```js\nif (cond1) {\n // \u00b7\u00b7\u00b7\n} else if (cond2) {\n // \u00b7\u00b7\u00b7\n}\n\nif (cond1) {\n // \u00b7\u00b7\u00b7\n} else if (cond2) {\n // \u00b7\u00b7\u00b7\n} else {\n // \u00b7\u00b7\u00b7\n}\n```", "```js\nif (cond) \u00abthen_statement\u00bb\nelse \u00abelse_statement\u00bb\n```", "```js\nif (true) console.log('Yes'); else console.log('No');\n```", "```js\nswitch (\u00abswitch_expression\u00bb) {\n  \u00abswitch_body\u00bb\n}\n```", "```js\ncase \u00abcase_expression\u00bb:\n  \u00abstatements\u00bb\n```", "```js\ndefault:\n  \u00abstatements\u00bb\n```", "```js\nfunction dayOfTheWeek(num) {\n switch (num) {\n case 1:\n return 'Monday';\n case 2:\n return 'Tuesday';\n case 3:\n return 'Wednesday';\n case 4:\n return 'Thursday';\n case 5:\n return 'Friday';\n case 6:\n return 'Saturday';\n case 7:\n return 'Sunday';\n }\n}\nassert.equal(dayOfTheWeek(5), 'Friday');\n```", "```js\nfunction englishToFrench(english) {\n let french;\n switch (english) {\n case 'hello':\n french = 'bonjour';\n case 'goodbye':\n french = 'au revoir';\n }\n return french;\n}\n// The result should be 'bonjour'!\nassert.equal(englishToFrench('hello'), 'au revoir');\n```", "```js\nfunction englishToFrench(english) {\n let french;\n switch (english) {\n case 'hello':\n french = 'bonjour';\n break;\n case 'goodbye':\n french = 'au revoir';\n break;\n }\n return french;\n}\nassert.equal(englishToFrench('hello'), 'bonjour'); // ok\n```", "```js\nfunction isWeekDay(name) {\n switch (name) {\n case 'Monday':\n case 'Tuesday':\n case 'Wednesday':\n case 'Thursday':\n case 'Friday':\n return true;\n case 'Saturday':\n case 'Sunday':\n return false;\n }\n}\nassert.equal(isWeekDay('Wednesday'), true);\nassert.equal(isWeekDay('Sunday'), false);\n```", "```js\nfunction isWeekDay(name) {\n switch (name) {\n case 'Monday':\n case 'Tuesday':\n case 'Wednesday':\n case 'Thursday':\n case 'Friday':\n return true;\n case 'Saturday':\n case 'Sunday':\n return false;\n default:\n throw new Error('Illegal value: '+name);\n }\n}\nassert.throws(\n () => isWeekDay('January'),\n {message: 'Illegal value: January'});\n```", "```js\nwhile (\u00abcondition\u00bb) {\n  \u00abstatements\u00bb\n}\n```", "```js\nconst arr = ['a', 'b', 'c'];\nwhile (arr.length > 0) {\n const elem = arr.shift(); // remove first element\n console.log(elem);\n}\n// Output:\n// 'a'\n// 'b'\n// 'c'\n```", "```js\nwhile (true) {\n if (Math.random() === 0) break;\n}\n```", "```js\nlet input;\ndo {\n input = prompt('Enter text:');\n console.log(input);\n} while (input !== ':q');\n```", "```js\nfor (\u00abinitialization\u00bb; \u00abcondition\u00bb; \u00abpost_iteration\u00bb) {\n  \u00abstatements\u00bb\n}\n```", "```js\n\u00abinitialization\u00bb\nwhile (\u00abcondition\u00bb) {\n  \u00abstatements\u00bb\n  \u00abpost_iteration\u00bb\n}\n```", "```js\nfor (let i=0; i<3; i++) {\n console.log(i);\n}\n\n// Output:\n// 0\n// 1\n// 2\n```", "```js\nconst arr = ['a', 'b', 'c'];\nfor (let i=0; i<arr.length; i++) {\n console.log(arr[i]);\n}\n\n// Output:\n// 'a'\n// 'b'\n// 'c'\n```", "```js\nfor (;;) {\n if (Math.random() === 0) break;\n}\n```", "```js\nfor (\u00abiteration_variable\u00bb of \u00abiterable\u00bb) {\n  \u00abstatements\u00bb\n}\n```", "```js\nconst iterable = ['hello', 'world'];\nfor (const elem of iterable) {\n console.log(elem);\n}\n// Output:\n// 'hello'\n// 'world'\n```", "```js\nconst iterable = ['hello', 'world'];\nlet elem;\nfor (elem of iterable) {\n console.log(elem);\n}\n```", "```js\nconst set = new Set(['hello', 'world']);\nfor (const elem of set) {\n console.log(elem);\n}\n```", "```js\nconst arr = ['a', 'b', 'c'];\nfor (const [index, elem] of arr.entries()) {\n console.log(`${index} -> ${elem}`);\n}\n// Output:\n// '0 -> a'\n// '1 -> b'\n// '2 -> c'\n```", "```js\nfor await (const item of asyncIterable) {\n // \u00b7\u00b7\u00b7\n}\n```", "```js\nconst arr = ['a', 'b', 'c'];\narr.propKey = 'property value';\n\nfor (const key in arr) {\n console.log(key);\n}\n\n// Output:\n// '0'\n// '1'\n// '2'\n// 'propKey'\n```"]