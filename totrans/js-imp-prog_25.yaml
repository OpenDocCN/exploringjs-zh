- en: 21 Using template literals and tagged templates
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 21 使用模板文字和标记模板
- en: 原文：[https://exploringjs.com/impatient-js/ch_template-literals.html](https://exploringjs.com/impatient-js/ch_template-literals.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/impatient-js/ch_template-literals.html](https://exploringjs.com/impatient-js/ch_template-literals.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '21.1 [Disambiguation: “template”](ch_template-literals.html#disambiguation-template)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 21.1 [消歧：“模板”](ch_template-literals.html#disambiguation-template)
- en: 21.2 [Template literals](ch_template-literals.html#template-literals)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 21.2 [模板文字](ch_template-literals.html#template-literals)
- en: 21.3 [Tagged templates](ch_template-literals.html#tagged-templates)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 21.3 [标记模板](ch_template-literals.html#tagged-templates)
- en: 21.3.1 [Cooked vs. raw template strings (advanced)](ch_template-literals.html#template-strings-cooked-vs-raw)
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 21.3.1 熟练与原始模板字符串（高级）(ch_template-literals.html#template-strings-cooked-vs-raw)
- en: 21.4 [Examples of tagged templates (as provided via libraries)](ch_template-literals.html#examples-of-tagged-templates-as-provided-via-libraries)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 21.4 [标记模板的示例（通过库提供）](ch_template-literals.html#examples-of-tagged-templates-as-provided-via-libraries)
- en: '21.4.1 [Tag function library: lit-html](ch_template-literals.html#tag-function-library-lit-html)'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 21.4.1 [标记函数库：lit-html](ch_template-literals.html#tag-function-library-lit-html)
- en: '21.4.2 [Tag function library: re-template-tag](ch_template-literals.html#tag-function-library-re-template-tag)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 21.4.2 [标记函数库：re-template-tag](ch_template-literals.html#tag-function-library-re-template-tag)
- en: '21.4.3 [Tag function library: graphql-tag](ch_template-literals.html#tag-function-library-graphql-tag)'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 21.4.3 [标记函数库：graphql-tag](ch_template-literals.html#tag-function-library-graphql-tag)
- en: 21.5 [Raw string literals](ch_template-literals.html#raw-string-literals)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 21.5 [原始字符串文字](ch_template-literals.html#raw-string-literals)
- en: 21.6 [(Advanced)](ch_template-literals.html#advanced-3)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 21.6 （高级）(ch_template-literals.html#advanced-3)
- en: 21.7 [Multiline template literals and indentation](ch_template-literals.html#multiline-template-literals-and-indentation)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 21.7 多行模板文字和缩进(ch_template-literals.html#multiline-template-literals-and-indentation)
- en: '21.7.1 [Fix: template tag for dedenting](ch_template-literals.html#fix-template-tag-for-dedenting)'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 21.7.1 修复：用于去除缩进的模板标记(ch_template-literals.html#fix-template-tag-for-dedenting)
- en: '21.7.2 [Fix: `.trim()`](ch_template-literals.html#fix-.trim)'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 21.7.2 修复：`.trim()`(ch_template-literals.html#fix-.trim)
- en: 21.8 [Simple templating via template literals](ch_template-literals.html#simple-templating-via-template-literals)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 21.8 [通过模板文字进行简单模板化](ch_template-literals.html#simple-templating-via-template-literals)
- en: 21.8.1 [A more complex example](ch_template-literals.html#a-more-complex-example)
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 21.8.1 [更复杂的例子](ch_template-literals.html#a-more-complex-example)
- en: 21.8.2 [Simple HTML-escaping](ch_template-literals.html#simple-html-escaping)
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 21.8.2 [简单的HTML转义](ch_template-literals.html#simple-html-escaping)
- en: '* * *'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Before we dig into the two features *template literal* and *tagged template*,
    let’s first examine the multiple meanings of the term *template*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究*模板文字*和*标记模板*这两个功能之前，让我们先来看看术语*模板*的多重含义。
- en: '21.1 Disambiguation: “template”'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 21.1 消歧：“模板”
- en: 'The following three things are significantly different despite all having *template*
    in their names and despite all of them looking similar:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管所有这些名称中都有*模板*，并且它们看起来都很相似，但以下三个事物在很大程度上是不同的：
- en: 'A *text template* is a function from data to text. It is frequently used in
    web development and often defined via text files. For example, the following text
    defines a template for the library [Handlebars](https://handlebarsjs.com):'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*文本模板*是从数据到文本的函数。它经常用于Web开发，并经常通过文本文件定义。例如，以下文本定义了库[Handlebars](https://handlebarsjs.com)的模板：'
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This template has two blanks to be filled in: `title` and `body`. It is used
    like this:'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个模板有两个空白需要填写：`title`和`body`。它的使用方式如下：
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A *template literal* is similar to a string literal, but has additional features
    – for example, interpolation. It is delimited by backticks:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*模板文字*类似于字符串文字，但具有附加功能-例如插值。它由反引号界定：'
- en: '[PRE2]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Syntactically, a *tagged template* is a template literal that follows a function
    (or rather, an expression that evaluates to a function). That leads to the function
    being called. Its arguments are derived from the contents of the template literal.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在语法上，*标记模板*是一个遵循函数（或者更确切地说，求值为函数的表达式）的模板文字。这导致函数被调用。它的参数来自模板文字的内容。
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that `getArgs()` receives both the text of the literal and the data interpolated
    via `${}`.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，`getArgs()`接收文字模板的文本和通过`${}`插值的数据。
- en: 21.2 Template literals
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 21.2 模板文字
- en: A template literal has two new features compared to a normal string literal.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 模板文字与普通字符串文字相比具有两个新功能。
- en: 'First, it supports *string interpolation*: if we put a dynamically computed
    value inside a `${}`, it is converted to a string and inserted into the string
    returned by the literal.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，它支持*字符串插值*：如果我们将动态计算的值放在`${}`中，它将被转换为字符串并插入到文字模板返回的字符串中。
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Second, template literals can span multiple lines:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，模板文字可以跨越多行：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Template literals always produce strings.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 模板文字始终产生字符串。
- en: 21.3 Tagged templates
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 21.3 标记模板
- en: The expression in line A is a *tagged template*. It is equivalent to invoking
    `tagFunc()` with the arguments listed in the Array in line B.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: A行中的表达式是*标记模板*。它相当于使用B行中数组中列出的参数调用`tagFunc()`。
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The function `tagFunc` before the first backtick is called a *tag function*.
    Its arguments are:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个反引号之前的函数`tagFunc`称为*标记函数*。它的参数是：
- en: '*Template strings* (first argument): an Array with the text fragments surrounding
    the interpolations `${}`.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*模板字符串*（第一个参数）：一个包含围绕插值`${}`的文本片段的数组。'
- en: 'In the example: `[''Setting '', '' is '', ''!'']`'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在示例中：`['Setting ', ' is ', '!']`
- en: '*Substitutions* (remaining arguments): the interpolated values.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*替换*（剩余参数）：插值的值。'
- en: 'In the example: `''dark mode''` and `true`'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在示例中：`'dark mode'`和`true`
- en: The static (fixed) parts of the literal (the template strings) are kept separate
    from the dynamic parts (the substitutions).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 文字模板的静态（固定）部分（模板字符串）与动态部分（替换）保持分开。
- en: A tag function can return arbitrary values.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 标记函数可以返回任意值。
- en: 21.3.1 Cooked vs. raw template strings (advanced)
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 21.3.1 熟练与原始模板字符串（高级）
- en: 'So far, we have only seen the *cooked interpretation* of template strings.
    But tag functions actually get two interpretations:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: A *cooked interpretation* where backslashes have special meaning. For example,
    `\t` produces a tab character. This interpretation of the template strings is
    stored as an Array in the first argument.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *raw interpretation* where backslashes do not have special meaning. For example,
    `\t` produces two characters – a backslash and a `t`. This interpretation of the
    template strings is stored in property `.raw` of the first argument (an Array).
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The raw interpretation enables raw string literals via `String.raw` [(described
    later)](ch_template-literals.html#raw-string-literals) and similar applications.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'The following tag function `cookedRaw` uses both interpretations:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can also use Unicode code point escapes (`\u{1F642}`), Unicode code unit
    escapes (`\u03A9`), and ASCII escapes (`\x52`) in tagged templates:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If the syntax of one of these escapes isn’t correct, the corresponding cooked
    template string is `undefined`, while the raw version is still verbatim:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Incorrect escapes produce syntax errors in template literals and string literals.
    Before ES2018, they even produced errors in tagged templates. Why was that changed?
    We can now use tagged templates for text that was previously illegal – for example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 21.4 Examples of tagged templates (as provided via libraries)
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tagged templates are great for supporting small embedded languages (so-called
    *domain-specific languages*). We’ll continue with a few examples.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '21.4.1 Tag function library: lit-html'
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[lit-html](https://github.com/Polymer/lit-html) is a templating library that
    is based on tagged templates and used by [the frontend framework Polymer](https://www.polymer-project.org/):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`repeat()` is a custom function for looping. Its 2nd parameter produces unique
    keys for the values returned by the 3rd parameter. Note the nested tagged template
    used by that parameter.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '21.4.2 Tag function library: re-template-tag'
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[re-template-tag](https://github.com/rauschma/re-template-tag) is a simple
    library for composing regular expressions. Templates tagged with `re` produce
    regular expressions. The main benefit is that we can interpolate regular expressions
    and plain text via `${}` (line A):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '21.4.3 Tag function library: graphql-tag'
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[The library graphql-tag](https://github.com/apollographql/graphql-tag) lets
    us create GraphQL queries via tagged templates:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Additionally, there are plugins for pre-compiling such queries in Babel, TypeScript,
    etc.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 21.5 Raw string literals
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Raw string literals are implemented via the tag function `String.raw`. They
    are string literals where backslashes don’t do anything special (such as escaping
    characters, etc.):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This helps whenever data contains backslashes – for example, strings with regular
    expressions:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: All three regular expressions are equivalent. With a normal string literal,
    we have to write the backslash twice, to escape it for that literal. With a raw
    string literal, we don’t have to do that.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'Raw string literals are also useful for specifying Windows filename paths:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 21.6 (Advanced)
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All remaining sections are advanced
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 21.7 Multiline template literals and indentation
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we put multiline text in template literals, two goals are in conflict: On
    one hand, the template literal should be indented to fit inside the source code.
    On the other hand, the lines of its content should start in the leftmost column.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Due to the indentation, the template literal fits well into the source code.
    Alas, the output is also indented. And we don’t want the return at the beginning
    and the return plus two spaces at the end.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'There are two ways to fix this: via a tagged template or by trimming the result
    of the template literal.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '21.7.1 Fix: template tag for dedenting'
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The first fix is to use a custom template tag that removes the unwanted whitespace.
    It uses the first line after the initial line break to determine in which column
    the text starts and shortens the indentation everywhere. It also removes the line
    break at the very beginning and the indentation at the very end. One such template
    tag is [`dedent` by Desmond Brand](https://github.com/dmnd/dedent):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个修复是使用自定义模板标签来移除不需要的空白。它使用初始换行后的第一行来确定文本从哪一列开始，并在所有地方缩短缩进。它还移除了开头的换行和结尾的缩进。一个这样的模板标签是[Desmond
    Brand的`dedent`](https://github.com/dmnd/dedent)：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This time, the output is not indented:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，输出没有缩进：
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '21.7.2 Fix: `.trim()`'
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 21.7.2 修复：`.trim()`
- en: 'The second fix is quicker, but also dirtier:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个修复更快，但也更脏：
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The string method `.trim()` removes the superfluous whitespace at the beginning
    and at the end, but the content itself must start in the leftmost column. The
    advantage of this solution is that we don’t need a custom tag function. The downside
    is that it looks ugly.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串方法`.trim()`会移除开头和结尾的多余空白，但内容本身必须从最左边的列开始。这种解决方案的优点是我们不需要自定义标签函数。缺点是它看起来很丑。
- en: 'The output is the same as with `dedent`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 输出与`dedent`相同：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 21.8 Simple templating via template literals
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 21.8 使用模板文字进行简单模板化
- en: 'While template literals look like text templates, it is not immediately obvious
    how to use them for (text) templating: A text template gets its data from an object,
    while a template literal gets its data from variables. The solution is to use
    a template literal in the body of a function whose parameter receives the templating
    data – for example:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然模板文字看起来像文本模板，但如何使用它们进行（文本）模板化并不是立即明显的：文本模板从对象中获取数据，而模板文字从变量中获取数据。解决方案是在接收模板数据的函数的主体中使用模板文字，例如：
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 21.8.1 A more complex example
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 21.8.1 一个更复杂的例子
- en: 'As a more complex example, we’d like to take an Array of addresses and produce
    an HTML table. This is the Array:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个更复杂的例子，我们想要取一个地址数组并生成一个HTML表格。这是数组：
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The function `tmpl()` that produces the HTML table looks as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 生成HTML表格的函数`tmpl()`如下所示：
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This code contains two templating functions:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码包含两个模板函数：
- en: The first one (line 1) takes `addrs`, an Array with addresses, and returns a
    string with a table.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个函数（第1行）接受一个包含地址的数组`addrs`，并返回一个带有表格的字符串。
- en: The second one (line 4) takes `addr`, an object containing an address, and returns
    a string with a table row. Note the `.trim()` at the end, which removes unnecessary
    whitespace.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个函数（第4行）接受一个包含地址的对象`addr`，并返回一个带有表格行的字符串。注意末尾的`.trim()`，它会移除不必要的空白。
- en: The first templating function produces its result by wrapping a table element
    around an Array that it joins into a string (line 10). That Array is produced
    by mapping the second templating function to each element of `addrs` (line 3).
    It therefore contains strings with table rows.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个模板函数通过将一个包含在HTML中的数组包装成一个字符串来生成其结果（第10行）。该数组是通过将第二个模板函数映射到`addrs`的每个元素（第3行）而生成的。因此，它包含带有表格行的字符串。
- en: The helper function `escapeHtml()` is used to escape special HTML characters
    (line 6 and line 7). Its implementation is shown in the next subsection.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助函数`escapeHtml()`用于转义特殊的HTML字符（第6行和第7行）。其实现在下一小节中显示。
- en: 'Let us call `tmpl()` with the addresses and log the result:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用地址调用`tmpl()`并记录结果：
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The output is:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 21.8.2 Simple HTML-escaping
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 21.8.2 简单的HTML转义
- en: 'The following function escapes plain text so that it is displayed verbatim
    in HTML:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数会转义纯文本，以便在HTML中原样显示：
- en: '[PRE28]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Exercise: HTML templating**'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **练习：HTML模板化**'
- en: 'Exercise with bonus challenge: `exercises/template-literals/templating_test.mjs`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 练习和奖励挑战：`exercises/template-literals/templating_test.mjs`
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **测验**'
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[测验应用](ch_quizzes-exercises.html#quizzes)。
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/14)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/impatient-js/issues/14)'
