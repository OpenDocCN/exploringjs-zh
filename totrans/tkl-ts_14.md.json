["```ts\nfunction func(value: any) {\n // Only allowed for numbers, but they are a subtype of `any`\n 5 * value;\n\n // Normally the type signature of `value` must contain .propName\n value.propName;\n\n // Normally only allowed for Arrays and types with index signatures\n value[123];\n}\n```", "```ts\nlet storageLocation: any;\n\nstorageLocation = null;\nstorageLocation = true;\nstorageLocation = {};\n```", "```ts\nfunction func(value: any) {\n const a: null = value;\n const b: boolean = value;\n const c: object = value;\n}\n```", "```ts\nJSON.parse(text: string): any;\n```", "```ts\ninterface StringConstructor {\n (value?: any): string; // call signature\n // \u00b7\u00b7\u00b7\n}\n```", "```ts\n    function func(value: unknown) {\n     // @ts-expect-error: Object is of type 'unknown'.\n     value.toFixed(2);\n\n     // Type assertion:\n     (value as number).toFixed(2); // OK\n    }\n    ```", "```ts\n    function func(value: unknown) {\n     // @ts-expect-error: Object is of type 'unknown'.\n     value * 5;\n\n     if (value === 123) { // equality\n     // %inferred-type: 123\n     value;\n\n     value * 5; // OK\n     }\n    }\n    ```", "```ts\n    function func(value: unknown) {\n     // @ts-expect-error: Object is of type 'unknown'.\n     value.length;\n\n     if (typeof value === 'string') { // type guard\n     // %inferred-type: string\n     value;\n\n     value.length; // OK\n     }\n    }\n    ```", "```ts\n    function func(value: unknown) {\n     // @ts-expect-error: Object is of type 'unknown'.\n     value.test('abc');\n\n     assertIsRegExp(value);\n\n     // %inferred-type: RegExp\n     value;\n\n     value.test('abc'); // OK\n    }\n\n    /** An assertion function */\n    function assertIsRegExp(arg: unknown): asserts arg is RegExp {\n     if (! (arg instanceof RegExp)) {\n     throw new TypeError('Not a RegExp: ' + arg);\n     }\n    }\n    ```"]