- en: 19 Typing Arrays
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://exploringjs.com/tackling-ts/ch_typing-arrays.html](https://exploringjs.com/tackling-ts/ch_typing-arrays.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 19.1 [Roles of Arrays](ch_typing-arrays.html#roles-of-arrays)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 19.2 [Ways of typing Arrays](ch_typing-arrays.html#ways-of-typing-arrays)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '19.2.1 [Array role “list”: Array type literals vs. interface type `Array`](ch_typing-arrays.html#array-role-list-array-type-literals-vs.-interface-type-array)'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '19.2.2 [Array role “tuple”: tuple type literals](ch_typing-arrays.html#array-role-tuple-tuple-type-literals)'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '19.2.3 [Objects that are also Array-ish: interfaces with index signatures](ch_typing-arrays.html#objects-that-are-also-array-ish-interfaces-with-index-signatures)'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '19.3 [Pitfall: type inference doesn’t always get Array types right](ch_typing-arrays.html#pitfall-type-inference-doesnt-always-get-array-types-right)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 19.3.1 [Inferring types of Arrays is difficult](ch_typing-arrays.html#inferring-types-of-arrays-is-difficult)
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 19.3.2 [Type inference for non-empty Array literals](ch_typing-arrays.html#type-inference-for-non-empty-array-literals)
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 19.3.3 [Type inference for empty Array literals](ch_typing-arrays.html#type-inference-for-empty-array-literals)
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 19.3.4 [`const` assertions for Arrays and type inference](ch_typing-arrays.html#const-assertions-for-arrays-and-type-inference)
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '19.4 [Pitfall: TypeScript assumes indices are never out of bounds](ch_typing-arrays.html#pitfall-typescript-assumes-indices-are-never-out-of-bounds)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we examine how Arrays can be typed in TypeScript.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 19.1 Roles of Arrays
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Arrays can play the following roles in JavaScript (either one or a mix of them):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'Lists: All elements have the same type. The length of the Array varies.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Tuple: The length of the Array is fixed. The elements do not necessarily have
    the same type.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScript accommodates these two roles by offering various ways of typing arrays.
    We will look at those next.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 19.2 Ways of typing Arrays
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '19.2.1 Array role “list”: Array type literals vs. interface type `Array`'
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'An Array type literal consists of the element type followed by `[]`. In the
    following code, the Array type literal is `string[]`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'An Array type literal is a shorthand for using the global generic interface
    type `Array`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If the element type is more complicated, we need parentheses for Array type
    literals:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The generic type `Array` works better in this case:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '19.2.2 Array role “tuple”: tuple type literals'
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If the Array has a fixed length and each element has a different, fixed type
    that depends on its position, then we can use tuple type literals such as `[string,
    string, boolean]`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '19.2.3 Objects that are also Array-ish: interfaces with index signatures'
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If an interface has only an index signature, we can use it for Arrays:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'An interface that has both an index signature and property signatures, only
    works for objects (because indexed elements and properties need to be defined
    at the same time):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '19.3 Pitfall: type inference doesn’t always get Array types right'
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 19.3.1 Inferring types of Arrays is difficult
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Due to the two roles of Arrays, it is impossible for TypeScript to always guess
    the right type. As an example, consider the following Array literal that is assigned
    to the variable `fields`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'What is the best type for `fields`? The following are all reasonable choices:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 19.3.2 Type inference for non-empty Array literals
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When we use non-empty Array literals, TypeScript’s default is to infer list
    types (not tuple types):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Alas, that’s not always what we want:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can fix this by adding a type annotation to the `const` declaration, which
    avoids type inference:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 19.3.3 Type inference for empty Array literals
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If we initialize a variable with an empty Array literal, then TypeScript initially
    infers the type `any[]` and incrementally updates that type as we make changes:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note that the initial inferred type isn’t influenced by what happens later.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'If we use assignment instead of `.push()`, things work the same:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In contrast, if the Array literal has at least one element, then the element
    type is fixed and doesn’t change later:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，如果数组文字至少有一个元素，则元素类型是固定的，以后不会改变：
- en: '[PRE19]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 19.3.4 `const` assertions for Arrays and type inference
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 19.3.4 数组和类型推断的`const`断言
- en: 'We can suffix an Array literal with [a `const` assertion](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在数组文字后缀中使用[a `const` assertion](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions)：
- en: '[PRE20]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We are declaring that `rockCategories` won’t change. That has the following
    effects:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明`rockCategories`不会改变。这有以下影响：
- en: 'The Array becomes `readonly` – we can’t use operations that change it:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组变为`readonly` - 我们不能使用改变它的操作：
- en: '[PRE21]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'TypeScript infers a tuple. Compare:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript推断出一个元组。比较：
- en: '[PRE22]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: TypeScript infers literal types (`"igneous"` etc.) instead of more general types.
    That is, the inferred tuple type is not `[string, string, string]`.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript推断出文字类型（例如`"igneous"`等）而不是更一般的类型。也就是说，推断的元组类型不是`[string, string, string]`。
- en: 'Here are more examples of Array literals with and without `const` assertions:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用和不使用`const`断言的更多数组文字的示例：
- en: '[PRE23]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 19.3.4.1 Potential pitfalls of `const` assertions
  id: totrans-76
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 19.3.4.1 `const`断言的潜在陷阱
- en: There are two potential pitfalls with `const` assertions.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`const`断言有两个潜在的陷阱。'
- en: 'First, the inferred type is as narrow as possible. That causes an issue for
    `let`-declared variables: We cannot assign any tuple other than the one that we
    used for intialization:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，推断类型尽可能狭窄。这对于使用`let`声明的变量会造成问题：我们不能分配除了初始化时使用的元组之外的任何其他元组：
- en: '[PRE24]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Second, tuples declared via `as const` can’t be mutated:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，通过`as const`声明的元组不能被改变：
- en: '[PRE25]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: That is neither an upside nor a downside, but we need to be aware that it happens.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这既不是优势也不是劣势，但我们需要意识到这一点。
- en: '19.4 Pitfall: TypeScript assumes indices are never out of bounds'
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 19.4 陷阱：TypeScript假设索引永远不会超出范围
- en: 'Whenever we access an Array element via an index, TypeScript always assumes
    that the index is within range (line A):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们通过索引访问数组元素时，TypeScript总是假设索引在范围内（A行）：
- en: '[PRE26]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Due to this assumption, the type of `message` is `string`. And not `undefined`
    or `undefined|string`, as we may have expected.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个假设，`message`的类型是`string`。而不是`undefined`或`undefined|string`，正如我们可能期望的那样。
- en: 'We do get an error if we use a tuple type:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用元组类型，我们会得到一个错误：
- en: '[PRE27]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`as const` would have had the same effect because it leads to a tuple type
    being inferred.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`as const`会产生相同的效果，因为它会导致推断出一个元组类型。'
- en: '[Comments](https://github.com/rauschma/tackling-ts/issues/19)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/tackling-ts/issues/19)'
