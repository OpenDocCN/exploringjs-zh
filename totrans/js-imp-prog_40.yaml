- en: 33 Maps (Map)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://exploringjs.com/impatient-js/ch_maps.html](https://exploringjs.com/impatient-js/ch_maps.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 33.1 [Using Maps](ch_maps.html#using-maps)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 33.1.1 [Creating Maps](ch_maps.html#creating-maps)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 33.1.2 [Copying Maps](ch_maps.html#copying-maps)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 33.1.3 [Working with single entries](ch_maps.html#working-with-single-entries)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 33.1.4 [Determining the size of a Map and clearing it](ch_maps.html#determining-the-size-of-a-map-and-clearing-it)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 33.1.5 [Getting the keys and values of a Map](ch_maps.html#getting-the-keys-and-values-of-a-map)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 33.1.6 [Getting the entries of a Map](ch_maps.html#getting-the-entries-of-a-map)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '33.1.7 [Listed in insertion order: entries, keys, values](ch_maps.html#listed-in-insertion-order-entries-keys-values)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 33.1.8 [Converting between Maps and Objects](ch_maps.html#converting-maps-objects)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '33.2 [Example: Counting characters](ch_maps.html#example-counting-characters)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 33.3 [A few more details about the keys of Maps (advanced)](ch_maps.html#a-few-more-details-about-the-keys-of-maps-advanced)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 33.3.1 [What keys are considered equal?](ch_maps.html#what-keys-are-considered-equal)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 33.4 [Missing Map operations](ch_maps.html#missing-map-operations)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 33.4.1 [Mapping and filtering Maps](ch_maps.html#mapping-and-filtering-maps)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 33.4.2 [Combining Maps](ch_maps.html#combining-maps)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '33.5 [Quick reference: `Map<K,V>`](ch_maps.html#quickref-maps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 33.5.1 [Constructor](ch_maps.html#constructor)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '33.5.2 [`Map<K,V>.prototype`: handling single entries](ch_maps.html#mapkv.prototype-handling-single-entries)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '33.5.3 [`Map<K,V>.prototype`: handling all entries](ch_maps.html#mapkv.prototype-handling-all-entries)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '33.5.4 [`Map<K,V>.prototype`: iterating and looping](ch_maps.html#mapkv.prototype-iterating-and-looping)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 33.5.5 [Sources of this section](ch_maps.html#sources-of-this-section-1)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '33.6 [FAQ: Maps](ch_maps.html#faq-maps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 33.6.1 [When should I use a Map, and when should I use an object?](ch_maps.html#when-should-i-use-a-map-and-when-should-i-use-an-object)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 33.6.2 [When would I use an object as a key in a Map?](ch_maps.html#when-would-i-use-an-object-as-a-key-in-a-map)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 33.6.3 [Why do Maps preserve the insertion order of entries?](ch_maps.html#why-do-maps-preserve-the-insertion-order-of-entries)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 33.6.4 [Why do Maps have a `.size`, while Arrays have a `.length`?](ch_maps.html#collection-size-vs-length)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Before ES6, JavaScript didn’t have a data structure for dictionaries and (ab)used
    objects as dictionaries from strings to arbitrary values. ES6 brought Maps, which
    are dictionaries from arbitrary values to arbitrary values.
  prefs: []
  type: TYPE_NORMAL
- en: 33.1 Using Maps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An instance of `Map` maps keys to values. A single key-value mapping is called
    an *entry*.
  prefs: []
  type: TYPE_NORMAL
- en: 33.1.1 Creating Maps
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are three common ways of creating Maps.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you can use the constructor without any parameters to create an empty
    Map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Second, you can pass an iterable (e.g., an Array) over key-value “pairs” (Arrays
    with two elements) to the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Third, the `.set()` method adds entries to a Map and is chainable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 33.1.2 Copying Maps
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As we’ll see later, Maps are also iterables over key-value pairs. Therefore,
    you can use the constructor to create a copy of a Map. That copy is *shallow*:
    keys and values are the same; they are not duplicated.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 33.1.3 Working with single entries
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`.set()` and `.get()` are for writing and reading values (given keys).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`.has()` checks if a Map has an entry with a given key. `.delete()` removes
    entries.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 33.1.4 Determining the size of a Map and clearing it
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`.size` contains the number of entries in a Map. `.clear()` removes all entries
    of a Map.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 33.1.5 Getting the keys and values of a Map
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`.keys()` returns an iterable over the keys of a Map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We use [`Array.from()`](ch_arrays.html#Array.from) to convert the iterable
    returned by `.keys()` to an Array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`.values()` works like `.keys()`, but for values instead of keys.'
  prefs: []
  type: TYPE_NORMAL
- en: 33.1.6 Getting the entries of a Map
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`.entries()` returns an iterable over the entries of a Map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[`Array.from()`](ch_arrays.html#Array.from) converts the iterable returned
    by `.entries()` to an Array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Map instances are also iterables over entries. In the following code, we use
    [destructuring](ch_destructuring.html) to access the keys and values of `map`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '33.1.7 Listed in insertion order: entries, keys, values'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Maps record in which order entries were created and honor that order when listing
    entries, keys, or values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 33.1.8 Converting between Maps and Objects
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As long as a Map only uses strings and symbols as keys, you can convert it
    to an object (via [`Object.fromEntries()`](ch_objects.html#Object.fromEntries)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also convert an object to a Map with string or symbol keys (via [`Object.entries()`](ch_objects.html#Object.entries)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '33.2 Example: Counting characters'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`countChars()` returns a Map that maps characters to numbers of occurrences.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 33.3 A few more details about the keys of Maps (advanced)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Any value can be a key, even an object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 33.3.1 What keys are considered equal?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Most Map operations need to check whether a value is equal to one of the keys.
    They do so via the internal operation [SameValueZero](http://www.ecma-international.org/ecma-262/6.0/#sec-samevaluezero),
    which works like `===` but considers `NaN` to be equal to itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a consequence, you can use `NaN` as a key in Maps, just like any other value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Different objects are always considered to be different. That is something that
    can’t be changed (yet – configuring key equality is on TC39’s long-term roadmap).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 33.4 Missing Map operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 33.4.1 Mapping and filtering Maps
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can `.map()` and `.filter()` an Array, but there are no such operations
    for a Map. The solution is:'
  prefs: []
  type: TYPE_NORMAL
- en: Convert the Map to an Array of [key, value] pairs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Map or filter the Array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert the result back to a Map.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I’ll use the following Map to demonstrate how that works.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Mapping `originalMap`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Filtering `originalMap`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[`Array.from()`](ch_arrays.html#Array.from) converts any iterable to an Array.'
  prefs: []
  type: TYPE_NORMAL
- en: 33.4.2 Combining Maps
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are no methods for combining Maps, which is why we must use a workaround
    that is similar to the one from the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s combine the following two Maps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To combine `map1` and `map2` we create a new Array and spread (`...`) the entries
    (key-value pairs) of `map1` and `map2` into it (via iteration). Then we convert
    the Array back into a Map. All of that is done in line A:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Exercise: Combining
    two Maps**'
  prefs: []
  type: TYPE_NORMAL
- en: '`exercises/maps/combine_maps_test.mjs`'
  prefs: []
  type: TYPE_NORMAL
- en: '33.5 Quick reference: `Map<K,V>`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note: For the sake of conciseness, I’m pretending that all keys have the same
    type `K` and that all values have the same type `V`.'
  prefs: []
  type: TYPE_NORMAL
- en: 33.5.1 Constructor
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`new Map<K, V>(entries?: Iterable<[K, V]>)` ^([ES6])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you don’t provide the parameter `entries`, then an empty Map is created.
    If you do provide an iterable over [key, value] pairs, then those pairs are added
    as entries to the Map. For example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '33.5.2 `Map<K,V>.prototype`: handling single entries'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`.get(key: K): V` ^([ES6])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns the `value` that `key` is mapped to in this Map. If there is no key
    `key` in this Map, `undefined` is returned.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`.set(key: K, value: V): this` ^([ES6])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maps the given key to the given value. If there is already an entry whose key
    is `key`, it is updated. Otherwise, a new entry is created. This method returns
    `this`, which means that you can chain it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`.has(key: K): boolean` ^([ES6])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns whether the given key exists in this Map.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`.delete(key: K): boolean` ^([ES6])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there is an entry whose key is `key`, it is removed and `true` is returned.
    Otherwise, nothing happens and `false` is returned.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '33.5.3 `Map<K,V>.prototype`: handling all entries'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`get .size: number` ^([ES6])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns how many entries this Map has.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`.clear(): void` ^([ES6])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removes all entries from this Map.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '33.5.4 `Map<K,V>.prototype`: iterating and looping'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Both iterating and looping happen in the order in which entries were added to
    a Map.
  prefs: []
  type: TYPE_NORMAL
- en: '`.entries(): Iterable<[K,V]>` ^([ES6])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns an iterable with one [key, value] pair for each entry in this Map. The
    pairs are Arrays of length 2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`.forEach(callback: (value: V, key: K, theMap: Map<K,V>) => void, thisArg?:
    any): void` ^([ES6])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first parameter is a callback that is invoked once for each entry in this
    Map. If `thisArg` is provided, `this` is set to it for each invocation. Otherwise,
    `this` is set to `undefined`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`.keys(): Iterable<K>` ^([ES6])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns an iterable over all keys in this Map.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`.values(): Iterable<V>` ^([ES6])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns an iterable over all values in this Map.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`[Symbol.iterator](): Iterable<[K,V]>` ^([ES6])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default way of iterating over Maps. Same as `.entries()`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 33.5.5 Sources of this section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[TypeScript’s built-in typings](https://github.com/Microsoft/TypeScript/blob/master/lib/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '33.6 FAQ: Maps'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 33.6.1 When should I use a Map, and when should I use an object?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If you need a dictionary-like data structure with keys that are neither strings
    nor symbols, you have no choice: you must use a Map.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If, however, your keys are either strings or symbols, you must decide whether
    or not to use an object. A rough general guideline is:'
  prefs: []
  type: TYPE_NORMAL
- en: Is there a fixed set of keys (known at development time)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then use an object `obj` and access the values via fixed keys:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Can the set of keys change at runtime?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then use a Map `map` and access the values via keys stored in variables:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 33.6.2 When would I use an object as a key in a Map?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You normally want Map keys to be compared by value (two keys are considered
    equal if they have the same content). That excludes objects. However, there is
    one use case for objects as keys: externally attaching data to objects. But that
    use case is served better by WeakMaps, where entries don’t prevent keys from being
    garbage-collected (for details, consult [the next chapter](ch_weakmaps.html)).'
  prefs: []
  type: TYPE_NORMAL
- en: 33.6.3 Why do Maps preserve the insertion order of entries?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In principle, Maps are unordered. The main reason for ordering entries is so
    that operations that list entries, keys, or values are deterministic. That helps,
    for example, with testing.
  prefs: []
  type: TYPE_NORMAL
- en: 33.6.4 Why do Maps have a `.size`, while Arrays have a `.length`?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In JavaScript, indexable sequences (such as Arrays and strings) have a `.length`,
    while unindexed collections (such as Maps and Sets) have a `.size`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.length` is based on indices; it is always the highest index plus one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.size` counts the number of elements in a collection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz**'
  prefs: []
  type: TYPE_NORMAL
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  prefs: []
  type: TYPE_NORMAL
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/35)'
  prefs: []
  type: TYPE_NORMAL
