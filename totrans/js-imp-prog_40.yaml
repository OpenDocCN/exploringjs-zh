- en: 33 Maps (Map)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 33 地图（Map）
- en: 原文：[https://exploringjs.com/impatient-js/ch_maps.html](https://exploringjs.com/impatient-js/ch_maps.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/impatient-js/ch_maps.html](https://exploringjs.com/impatient-js/ch_maps.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 33.1 [Using Maps](ch_maps.html#using-maps)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.1 使用地图
- en: 33.1.1 [Creating Maps](ch_maps.html#creating-maps)
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.1.1 创建地图
- en: 33.1.2 [Copying Maps](ch_maps.html#copying-maps)
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.1.2 复制地图
- en: 33.1.3 [Working with single entries](ch_maps.html#working-with-single-entries)
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.1.3 处理单个条目
- en: 33.1.4 [Determining the size of a Map and clearing it](ch_maps.html#determining-the-size-of-a-map-and-clearing-it)
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.1.4 确定地图的大小并清除它
- en: 33.1.5 [Getting the keys and values of a Map](ch_maps.html#getting-the-keys-and-values-of-a-map)
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.1.5 获取地图的键和值
- en: 33.1.6 [Getting the entries of a Map](ch_maps.html#getting-the-entries-of-a-map)
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.1.6 获取地图的条目
- en: '33.1.7 [Listed in insertion order: entries, keys, values](ch_maps.html#listed-in-insertion-order-entries-keys-values)'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.1.7 按插入顺序列出：条目、键、值
- en: 33.1.8 [Converting between Maps and Objects](ch_maps.html#converting-maps-objects)
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.1.8 在地图和对象之间转换
- en: '33.2 [Example: Counting characters](ch_maps.html#example-counting-characters)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.2 示例：计算字符
- en: 33.3 [A few more details about the keys of Maps (advanced)](ch_maps.html#a-few-more-details-about-the-keys-of-maps-advanced)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.3 关于地图键的一些细节（高级）
- en: 33.3.1 [What keys are considered equal?](ch_maps.html#what-keys-are-considered-equal)
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.3.1 哪些键被视为相等？
- en: 33.4 [Missing Map operations](ch_maps.html#missing-map-operations)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.4 地图操作缺失
- en: 33.4.1 [Mapping and filtering Maps](ch_maps.html#mapping-and-filtering-maps)
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.4.1 映射和过滤地图
- en: 33.4.2 [Combining Maps](ch_maps.html#combining-maps)
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.4.2 组合地图
- en: '33.5 [Quick reference: `Map<K,V>`](ch_maps.html#quickref-maps)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.5 快速参考：`Map<K,V>`
- en: 33.5.1 [Constructor](ch_maps.html#constructor)
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.5.1 构造函数
- en: '33.5.2 [`Map<K,V>.prototype`: handling single entries](ch_maps.html#mapkv.prototype-handling-single-entries)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.5.2 `Map<K,V>.prototype`：处理单个条目
- en: '33.5.3 [`Map<K,V>.prototype`: handling all entries](ch_maps.html#mapkv.prototype-handling-all-entries)'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.5.3 `Map<K,V>.prototype`：处理所有条目
- en: '33.5.4 [`Map<K,V>.prototype`: iterating and looping](ch_maps.html#mapkv.prototype-iterating-and-looping)'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.5.4 `Map<K,V>.prototype`：迭代和循环
- en: 33.5.5 [Sources of this section](ch_maps.html#sources-of-this-section-1)
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.5.5 本节的来源
- en: '33.6 [FAQ: Maps](ch_maps.html#faq-maps)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.6 常见问题：地图
- en: 33.6.1 [When should I use a Map, and when should I use an object?](ch_maps.html#when-should-i-use-a-map-and-when-should-i-use-an-object)
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.6.1 何时应该使用地图，何时应该使用对象？
- en: 33.6.2 [When would I use an object as a key in a Map?](ch_maps.html#when-would-i-use-an-object-as-a-key-in-a-map)
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.6.2 [何时我会使用对象作为地图中的键？](ch_maps.html#when-would-i-use-an-object-as-a-key-in-a-map)
- en: 33.6.3 [Why do Maps preserve the insertion order of entries?](ch_maps.html#why-do-maps-preserve-the-insertion-order-of-entries)
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.6.3 地图为什么保留插入顺序？
- en: 33.6.4 [Why do Maps have a `.size`, while Arrays have a `.length`?](ch_maps.html#collection-size-vs-length)
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 33.6.4 地图为什么有`.size`，而数组有`.length`？
- en: '* * *'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Before ES6, JavaScript didn’t have a data structure for dictionaries and (ab)used
    objects as dictionaries from strings to arbitrary values. ES6 brought Maps, which
    are dictionaries from arbitrary values to arbitrary values.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在ES6之前，JavaScript没有字典的数据结构，并且（滥用）对象作为从字符串到任意值的字典。ES6引入了地图，这是从任意值到任意值的字典。
- en: 33.1 Using Maps
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 33.1 使用地图
- en: An instance of `Map` maps keys to values. A single key-value mapping is called
    an *entry*.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`Map`的实例将键映射到值。单个键值映射称为*条目*。'
- en: 33.1.1 Creating Maps
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 33.1.1 创建地图
- en: There are three common ways of creating Maps.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种常见的创建地图的方法。
- en: 'First, you can use the constructor without any parameters to create an empty
    Map:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您可以使用没有任何参数的构造函数创建一个空地图：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Second, you can pass an iterable (e.g., an Array) over key-value “pairs” (Arrays
    with two elements) to the constructor:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，您可以将可迭代对象（例如数组）传递给构造函数的键值“对”（具有两个元素的数组）：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Third, the `.set()` method adds entries to a Map and is chainable:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，`.set()`方法向地图添加条目，并且是可链接的：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 33.1.2 Copying Maps
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 33.1.2 复制地图
- en: 'As we’ll see later, Maps are also iterables over key-value pairs. Therefore,
    you can use the constructor to create a copy of a Map. That copy is *shallow*:
    keys and values are the same; they are not duplicated.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将在后面看到的，地图也是键值对的可迭代对象。因此，您可以使用构造函数创建地图的副本。该副本是*浅层*的：键和值是相同的；它们不是重复的。
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 33.1.3 Working with single entries
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 33.1.3 处理单个条目
- en: '`.set()` and `.get()` are for writing and reading values (given keys).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`.set()`和`.get()`用于写入和读取值（给定键）。'
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`.has()` checks if a Map has an entry with a given key. `.delete()` removes
    entries.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`.has()`检查地图是否具有具有给定键的条目。`.delete()`删除条目。'
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 33.1.4 Determining the size of a Map and clearing it
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 33.1.4 确定地图的大小并清除它
- en: '`.size` contains the number of entries in a Map. `.clear()` removes all entries
    of a Map.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`.size`包含地图中的条目数。`.clear()`删除地图的所有条目。'
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 33.1.5 Getting the keys and values of a Map
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 33.1.5 获取地图的键和值
- en: '`.keys()` returns an iterable over the keys of a Map:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`.keys()`返回地图的键的可迭代对象：'
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We use [`Array.from()`](ch_arrays.html#Array.from) to convert the iterable
    returned by `.keys()` to an Array:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用[`Array.from()`](ch_arrays.html#Array.from)将`.keys()`返回的可迭代对象转换为数组：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`.values()` works like `.keys()`, but for values instead of keys.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`.values()`的工作原理类似于`.keys()`，但是针对值而不是键。'
- en: 33.1.6 Getting the entries of a Map
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 33.1.6 获取地图的条目
- en: '`.entries()` returns an iterable over the entries of a Map:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`.entries()`返回地图的条目的可迭代对象。'
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[`Array.from()`](ch_arrays.html#Array.from) converts the iterable returned
    by `.entries()` to an Array:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Array.from()`](ch_arrays.html#Array.from) 将 `.entries()` 返回的可迭代对象转换为数组：'
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Map instances are also iterables over entries. In the following code, we use
    [destructuring](ch_destructuring.html) to access the keys and values of `map`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 地图实例也是条目的可迭代对象。在下面的代码中，我们使用 [解构](ch_destructuring.html) 来访问 `map` 的键和值：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '33.1.7 Listed in insertion order: entries, keys, values'
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 33.1.7 按插入顺序列出：条目、键、值
- en: 'Maps record in which order entries were created and honor that order when listing
    entries, keys, or values:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 地图记录了条目创建的顺序，并在列出条目、键或值时遵守该顺序：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 33.1.8 Converting between Maps and Objects
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 33.1.8 在地图和对象之间转换
- en: 'As long as a Map only uses strings and symbols as keys, you can convert it
    to an object (via [`Object.fromEntries()`](ch_objects.html#Object.fromEntries)):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 只要地图只使用字符串和符号作为键，就可以将其转换为对象（通过 [`Object.fromEntries()`](ch_objects.html#Object.fromEntries)）：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can also convert an object to a Map with string or symbol keys (via [`Object.entries()`](ch_objects.html#Object.entries)):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用字符串或符号键将对象转换为地图（通过 [`Object.entries()`](ch_objects.html#Object.entries)）：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '33.2 Example: Counting characters'
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 33.2 示例：计算字符
- en: '`countChars()` returns a Map that maps characters to numbers of occurrences.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`countChars()` 返回一个将字符映射到出现次数的地图。'
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 33.3 A few more details about the keys of Maps (advanced)
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 33.3 关于地图键的一些细节（高级）
- en: 'Any value can be a key, even an object:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 任何值都可以是一个键，甚至是一个对象：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 33.3.1 What keys are considered equal?
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 33.3.1 哪些键被认为是相等的？
- en: Most Map operations need to check whether a value is equal to one of the keys.
    They do so via the internal operation [SameValueZero](http://www.ecma-international.org/ecma-262/6.0/#sec-samevaluezero),
    which works like `===` but considers `NaN` to be equal to itself.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数地图操作需要检查一个值是否等于其中一个键。它们通过内部操作 [SameValueZero](http://www.ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
    来进行，它的工作方式类似于 `===`，但认为 `NaN` 等于它自己。
- en: 'As a consequence, you can use `NaN` as a key in Maps, just like any other value:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以像任何其他值一样在地图中使用 `NaN` 作为键：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Different objects are always considered to be different. That is something that
    can’t be changed (yet – configuring key equality is on TC39’s long-term roadmap).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的对象总是被认为是不同的。这是无法改变的事情（但是 - 配置键相等性在 TC39 的长期路线图上）。
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 33.4 Missing Map operations
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 33.4 缺失的地图操作
- en: 33.4.1 Mapping and filtering Maps
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 33.4.1 映射和过滤地图
- en: 'You can `.map()` and `.filter()` an Array, but there are no such operations
    for a Map. The solution is:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以对数组进行 `.map()` 和 `.filter()`，但对于地图没有这样的操作。解决方法是：
- en: Convert the Map to an Array of [key, value] pairs.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将地图转换为 [键，值] 对的数组。
- en: Map or filter the Array.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 地图或过滤数组。
- en: Convert the result back to a Map.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将结果转换回地图。
- en: I’ll use the following Map to demonstrate how that works.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用以下地图来演示它是如何工作的。
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Mapping `originalMap`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 映射 `originalMap`：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Filtering `originalMap`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤 `originalMap`：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[`Array.from()`](ch_arrays.html#Array.from) converts any iterable to an Array.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Array.from()`](ch_arrays.html#Array.from) 将任何可迭代对象转换为数组。'
- en: 33.4.2 Combining Maps
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 33.4.2 合并地图
- en: There are no methods for combining Maps, which is why we must use a workaround
    that is similar to the one from the previous section.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 没有合并地图的方法，这就是为什么我们必须使用类似于上一节的解决方法。
- en: 'Let’s combine the following two Maps:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们合并以下两个地图：
- en: '[PRE22]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To combine `map1` and `map2` we create a new Array and spread (`...`) the entries
    (key-value pairs) of `map1` and `map2` into it (via iteration). Then we convert
    the Array back into a Map. All of that is done in line A:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要合并 `map1` 和 `map2`，我们创建一个新数组，并将 `map1` 和 `map2` 的条目（键值对）扩展（`...`）到其中（通过迭代）。然后我们将数组转换回地图。所有这些都在
    A 行中完成：
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Exercise: Combining
    two Maps**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **练习：合并两个地图**'
- en: '`exercises/maps/combine_maps_test.mjs`'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`exercises/maps/combine_maps_test.mjs`'
- en: '33.5 Quick reference: `Map<K,V>`'
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 33.5 快速参考：`Map<K,V>`
- en: 'Note: For the sake of conciseness, I’m pretending that all keys have the same
    type `K` and that all values have the same type `V`.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：为了简洁起见，我假装所有键都具有相同的类型 `K`，所有值都具有相同的类型 `V`。
- en: 33.5.1 Constructor
  id: totrans-108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 33.5.1 构造函数
- en: '`new Map<K, V>(entries?: Iterable<[K, V]>)` ^([ES6])'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new Map<K, V>(entries?: Iterable<[K, V]>)` ^([ES6])'
- en: 'If you don’t provide the parameter `entries`, then an empty Map is created.
    If you do provide an iterable over [key, value] pairs, then those pairs are added
    as entries to the Map. For example:'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您不提供参数 `entries`，则会创建一个空地图。如果您提供一个 [键，值] 对的可迭代对象，则这些对将作为条目添加到地图中。例如：
- en: '[PRE24]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '33.5.2 `Map<K,V>.prototype`: handling single entries'
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '33.5.2 `Map<K,V>.prototype`: 处理单个条目'
- en: '`.get(key: K): V` ^([ES6])'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.get(key: K): V` ^([ES6])'
- en: Returns the `value` that `key` is mapped to in this Map. If there is no key
    `key` in this Map, `undefined` is returned.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回此地图中将 `key` 映射到的 `value`。如果在此地图中没有键 `key`，则返回 `undefined`。
- en: '[PRE25]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`.set(key: K, value: V): this` ^([ES6])'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.set(key: K, value: V): this` ^([ES6])'
- en: Maps the given key to the given value. If there is already an entry whose key
    is `key`, it is updated. Otherwise, a new entry is created. This method returns
    `this`, which means that you can chain it.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将给定的键映射到给定的值。如果已经有一个键是 `key` 的条目，它将被更新。否则，将创建一个新条目。此方法返回 `this`，这意味着您可以链接它。
- en: '[PRE26]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`.has(key: K): boolean` ^([ES6])'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.has(key: K): boolean` ^([ES6])'
- en: Returns whether the given key exists in this Map.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回此地图中是否存在给定的键。
- en: '[PRE27]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`.delete(key: K): boolean` ^([ES6])'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.delete(key: K): boolean` ^([ES6])'
- en: If there is an entry whose key is `key`, it is removed and `true` is returned.
    Otherwise, nothing happens and `false` is returned.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果有一个键是 `key` 的条目，它将被移除并返回 `true`。否则，什么也不会发生，并返回 `false`。
- en: '[PRE28]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '33.5.3 `Map<K,V>.prototype`: handling all entries'
  id: totrans-125
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '33.5.3 `Map<K,V>.prototype`: 处理所有条目'
- en: '`get .size: number` ^([ES6])'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get .size: number` ^([ES6])'
- en: Returns how many entries this Map has.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回此地图有多少条目。
- en: '[PRE29]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`.clear(): void` ^([ES6])'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.clear(): void` ^([ES6])'
- en: Removes all entries from this Map.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从此地图中删除所有条目。
- en: '[PRE30]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '33.5.4 `Map<K,V>.prototype`: iterating and looping'
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '33.5.4 `Map<K,V>.prototype`: 迭代和循环'
- en: Both iterating and looping happen in the order in which entries were added to
    a Map.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代和循环都是按照条目添加到地图的顺序进行的。
- en: '`.entries(): Iterable<[K,V]>` ^([ES6])'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.entries(): Iterable<[K,V]>` ^([ES6])'
- en: Returns an iterable with one [key, value] pair for each entry in this Map. The
    pairs are Arrays of length 2.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回一个可迭代对象，其中每个条目都有一个[key, value]对。这些对是长度为2的数组。
- en: '[PRE31]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '`.forEach(callback: (value: V, key: K, theMap: Map<K,V>) => void, thisArg?:
    any): void` ^([ES6])'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.forEach(callback: (value: V, key: K, theMap: Map<K,V>) => void, thisArg?:
    any): void` ^([ES6])'
- en: The first parameter is a callback that is invoked once for each entry in this
    Map. If `thisArg` is provided, `this` is set to it for each invocation. Otherwise,
    `this` is set to `undefined`.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个参数是一个回调，对此地图中的每个条目调用一次。如果提供了`thisArg`，则对每次调用都将其设置为`this`。否则，将`this`设置为`undefined`。
- en: '[PRE32]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '`.keys(): Iterable<K>` ^([ES6])'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.keys(): Iterable<K>` ^([ES6])'
- en: Returns an iterable over all keys in this Map.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回此地图中所有键的可迭代对象。
- en: '[PRE33]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '`.values(): Iterable<V>` ^([ES6])'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.values(): Iterable<V>` ^([ES6])'
- en: Returns an iterable over all values in this Map.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回此地图中所有值的可迭代对象。
- en: '[PRE34]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`[Symbol.iterator](): Iterable<[K,V]>` ^([ES6])'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[Symbol.iterator](): Iterable<[K,V]>` ^([ES6])'
- en: The default way of iterating over Maps. Same as `.entries()`.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 迭代地图的默认方式。与`.entries()`相同。
- en: '[PRE35]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 33.5.5 Sources of this section
  id: totrans-149
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 33.5.5 本节的来源
- en: '[TypeScript’s built-in typings](https://github.com/Microsoft/TypeScript/blob/master/lib/)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TypeScript的内置类型](https://github.com/Microsoft/TypeScript/blob/master/lib/)'
- en: '33.6 FAQ: Maps'
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 33.6 常见问题：地图
- en: 33.6.1 When should I use a Map, and when should I use an object?
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 33.6.1 何时应该使用地图，何时应该使用对象？
- en: 'If you need a dictionary-like data structure with keys that are neither strings
    nor symbols, you have no choice: you must use a Map.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要一个类似字典的数据结构，其键既不是字符串也不是符号，那么您别无选择，必须使用地图。
- en: 'If, however, your keys are either strings or symbols, you must decide whether
    or not to use an object. A rough general guideline is:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您的键是字符串或符号，则必须决定是否使用对象。一个粗略的一般指导原则是：
- en: Is there a fixed set of keys (known at development time)?
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否有一组在开发时已知的键？
- en: 'Then use an object `obj` and access the values via fixed keys:'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后使用对象`obj`，并通过固定键访问值：
- en: '[PRE36]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Can the set of keys change at runtime?
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键的集合是否可以在运行时更改？
- en: 'Then use a Map `map` and access the values via keys stored in variables:'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后使用地图`map`，并通过存储在变量中的键访问值：
- en: '[PRE37]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 33.6.2 When would I use an object as a key in a Map?
  id: totrans-161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 33.6.2 何时应该将对象用作地图中的键？
- en: 'You normally want Map keys to be compared by value (two keys are considered
    equal if they have the same content). That excludes objects. However, there is
    one use case for objects as keys: externally attaching data to objects. But that
    use case is served better by WeakMaps, where entries don’t prevent keys from being
    garbage-collected (for details, consult [the next chapter](ch_weakmaps.html)).'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 通常希望地图键通过值进行比较（如果两个键具有相同的内容，则认为它们相等）。这排除了对象。但是，对象作为键有一个用例：将数据外部附加到对象上。但是，WeakMaps更适合这种用例，其中条目不会阻止键被垃圾回收（有关详细信息，请参阅[下一章](ch_weakmaps.html)）。
- en: 33.6.3 Why do Maps preserve the insertion order of entries?
  id: totrans-163
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 33.6.3 为什么地图保留插入条目的顺序？
- en: In principle, Maps are unordered. The main reason for ordering entries is so
    that operations that list entries, keys, or values are deterministic. That helps,
    for example, with testing.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 原则上，地图是无序的。排序条目的主要原因是列出条目、键或值的操作是确定性的。例如，这有助于测试。
- en: 33.6.4 Why do Maps have a `.size`, while Arrays have a `.length`?
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 33.6.4 为什么地图有`.size`，而数组有`.length`？
- en: 'In JavaScript, indexable sequences (such as Arrays and strings) have a `.length`,
    while unindexed collections (such as Maps and Sets) have a `.size`:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，可索引的序列（例如数组和字符串）具有`.length`，而不可索引的集合（例如地图和集合）具有`.size`：
- en: '`.length` is based on indices; it is always the highest index plus one.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.length`基于索引；它始终是最高索引加一。'
- en: '`.size` counts the number of elements in a collection.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.size`计算集合中元素的数量。'
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz**'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png) **测验**'
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[测验应用程序](ch_quizzes-exercises.html#quizzes)。
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/35)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/impatient-js/issues/35)'
