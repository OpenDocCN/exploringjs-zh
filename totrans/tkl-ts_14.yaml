- en: 11 The top types any and unknown
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11 The top types any and unknown
- en: 原文：[https://exploringjs.com/tackling-ts/ch_any-unknown.html](https://exploringjs.com/tackling-ts/ch_any-unknown.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/tackling-ts/ch_any-unknown.html](https://exploringjs.com/tackling-ts/ch_any-unknown.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 11.1 [TypeScript’s two top types](ch_any-unknown.html#typescripts-two-top-types)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 11.1 [TypeScript的两个顶级类型](ch_any-unknown.html#typescripts-two-top-types)
- en: 11.2 [The top type `any`](ch_any-unknown.html#the-top-type-any)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 11.2 [顶级类型`any`](ch_any-unknown.html#the-top-type-any)
- en: '11.2.1 [Example: `JSON.parse()`](ch_any-unknown.html#example-json.parse)'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 11.2.1 [示例：`JSON.parse()`](ch_any-unknown.html#example-json.parse)
- en: '11.2.2 [Example: `String()`](ch_any-unknown.html#example-string)'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 11.2.2 [示例：`String()`](ch_any-unknown.html#example-string)
- en: 11.3 [The top type `unknown`](ch_any-unknown.html#the-top-type-unknown)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 11.3 [顶级类型`unknown`](ch_any-unknown.html#the-top-type-unknown)
- en: '* * *'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In TypeScript, `any` and `unknown` are types that contain all values. In this
    chapter, we examine what they are and what they can be used for.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在TypeScript中，`any`和`unknown`是包含所有值的类型。在本章中，我们将研究它们是什么以及它们可以用于什么。
- en: 11.1 TypeScript’s two top types
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 11.1 TypeScript的两个顶级类型
- en: '`any` and `unknown` are so-called *top types* in TypeScript. Quoting [Wikipedia](https://en.wikipedia.org/wiki/Top_type):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`any`和`unknown`是TypeScript中所谓的*顶级类型*。引用[Wikipedia](https://en.wikipedia.org/wiki/Top_type)：'
- en: The *top type* […] is the *universal* type, sometimes called the *universal
    supertype* as all other types in any given type system are subtypes […]. In most
    cases it is the type which contains every possible [value] in the type system
    of interest.
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*顶级类型*是*通用*类型，有时被称为*通用超类型*，因为在任何给定类型系统中，所有其他类型都是子类型。在大多数情况下，它是包含感兴趣的类型系统中的每个可能值的类型。'
- en: That is, when viewing types as sets of values (for more information on what
    types are, see [[content not included]](ch_missing-chapters-online.html)), `any`
    and `unknown` are sets that contain all values. As an aside, TypeScript also has
    the *bottom type* `never`, which is the empty set.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，当将类型视为值的集合时（有关类型是什么的更多信息，请参见[[content not included]](ch_missing-chapters-online.html)），`any`和`unknown`是包含所有值的集合。顺便说一句，TypeScript还有*底部类型*`never`，它是空集。
- en: 11.2 The top type `any`
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 11.2 顶级类型`any`
- en: 'If a value has type `any`, we can do everything with it:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个值的类型是`any`，我们可以对它做任何事情：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Every type is assignable to type `any`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 每种类型都可以分配给类型`any`：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Type `any` is assignable to every type:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 类型`any`可以分配给每种类型：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: With `any` we lose any protection that is normally given to us by TypeScript’s
    static type system. Therefore, it should only be used as a last resort, if we
    can’t use more specific types or `unknown`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`any`会失去TypeScript静态类型系统通常给我们的任何保护。因此，只有在无法使用更具体的类型或`unknown`时，才应该使用它作为最后的手段。
- en: '11.2.1 Example: `JSON.parse()`'
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 11.2.1 示例：`JSON.parse()`
- en: 'The result of `JSON.parse()` depends on dynamic input, which is why the return
    type is `any` (I have omitted the parameter `reviver` from the signature):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSON.parse()`的结果取决于动态输入，这就是为什么返回类型是`any`（我已经从签名中省略了参数`reviver`）：'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`JSON.parse()` was added to TypeScript before the type `unknown` existed. Otherwise,
    its return type would probably be `unknown`.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在类型`unknown`存在之前，`JSON.parse()`被添加到TypeScript中。否则，它的返回类型可能是`unknown`。
- en: '11.2.2 Example: `String()`'
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 11.2.2 示例：`String()`
- en: 'The function `String()`, which converts arbitrary values to strings, has the
    following type signature:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 将任意值转换为字符串的函数`String()`具有以下类型签名：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 11.3 The top type `unknown`
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 11.3 顶级类型`unknown`
- en: The type `unknown` is a type-safe version of the type `any`. Whenever you are
    thinking of using `any`, try using `unknown` first.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 类型`unknown`是类型`any`的类型安全版本。每当你考虑使用`any`时，先尝试使用`unknown`。
- en: Where `any` allows us to do anything, `unknown` is much more restrictive.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`any`允许我们做任何事情，而`unknown`则更加限制。'
- en: 'Before we can perform any operation on values of type `unknown`, we must first
    narrow their types via:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在对类型为`unknown`的值执行任何操作之前，我们必须通过以下方式先缩小它们的类型：
- en: '[Type assertions](ch_type-assertions.html):'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[类型断言](ch_type-assertions.html)：'
- en: '[PRE5]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Equality:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相等性：
- en: '[PRE6]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[Type guards](ch_type-guards-assertion-functions.html):'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[类型守卫](ch_type-guards-assertion-functions.html)：'
- en: '[PRE7]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[Assertion functions](ch_type-guards-assertion-functions.html):'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[断言函数](ch_type-guards-assertion-functions.html)：'
- en: '[PRE8]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Comments](https://github.com/rauschma/tackling-ts/issues/21)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/tackling-ts/issues/21)'
