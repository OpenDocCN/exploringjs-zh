- en: 11 The top types any and unknown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://exploringjs.com/tackling-ts/ch_any-unknown.html](https://exploringjs.com/tackling-ts/ch_any-unknown.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 11.1 [TypeScript’s two top types](ch_any-unknown.html#typescripts-two-top-types)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 11.2 [The top type `any`](ch_any-unknown.html#the-top-type-any)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '11.2.1 [Example: `JSON.parse()`](ch_any-unknown.html#example-json.parse)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '11.2.2 [Example: `String()`](ch_any-unknown.html#example-string)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 11.3 [The top type `unknown`](ch_any-unknown.html#the-top-type-unknown)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: In TypeScript, `any` and `unknown` are types that contain all values. In this
    chapter, we examine what they are and what they can be used for.
  prefs: []
  type: TYPE_NORMAL
- en: 11.1 TypeScript’s two top types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`any` and `unknown` are so-called *top types* in TypeScript. Quoting [Wikipedia](https://en.wikipedia.org/wiki/Top_type):'
  prefs: []
  type: TYPE_NORMAL
- en: The *top type* […] is the *universal* type, sometimes called the *universal
    supertype* as all other types in any given type system are subtypes […]. In most
    cases it is the type which contains every possible [value] in the type system
    of interest.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: That is, when viewing types as sets of values (for more information on what
    types are, see [[content not included]](ch_missing-chapters-online.html)), `any`
    and `unknown` are sets that contain all values. As an aside, TypeScript also has
    the *bottom type* `never`, which is the empty set.
  prefs: []
  type: TYPE_NORMAL
- en: 11.2 The top type `any`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If a value has type `any`, we can do everything with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Every type is assignable to type `any`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Type `any` is assignable to every type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: With `any` we lose any protection that is normally given to us by TypeScript’s
    static type system. Therefore, it should only be used as a last resort, if we
    can’t use more specific types or `unknown`.
  prefs: []
  type: TYPE_NORMAL
- en: '11.2.1 Example: `JSON.parse()`'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The result of `JSON.parse()` depends on dynamic input, which is why the return
    type is `any` (I have omitted the parameter `reviver` from the signature):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`JSON.parse()` was added to TypeScript before the type `unknown` existed. Otherwise,
    its return type would probably be `unknown`.'
  prefs: []
  type: TYPE_NORMAL
- en: '11.2.2 Example: `String()`'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The function `String()`, which converts arbitrary values to strings, has the
    following type signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 11.3 The top type `unknown`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The type `unknown` is a type-safe version of the type `any`. Whenever you are
    thinking of using `any`, try using `unknown` first.
  prefs: []
  type: TYPE_NORMAL
- en: Where `any` allows us to do anything, `unknown` is much more restrictive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we can perform any operation on values of type `unknown`, we must first
    narrow their types via:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Type assertions](ch_type-assertions.html):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Equality:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[Type guards](ch_type-guards-assertion-functions.html):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[Assertion functions](ch_type-guards-assertion-functions.html):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[Comments](https://github.com/rauschma/tackling-ts/issues/21)'
  prefs: []
  type: TYPE_NORMAL
