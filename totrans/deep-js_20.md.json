["```js\nclass Wrapper {\n #wrapped;\n constructor(wrapped) {\n this.#wrapped = wrapped;\n }\n allowedMethod1(...args) {\n return this.#wrapped.allowedMethod1(...args);\n }\n allowedMethod2(...args) {\n return this.#wrapped.allowedMethod2(...args);\n }\n}\n```", "```js\nclass ImmutableMapWrapper {\n static _setUpPrototype() {\n // Only forward non-destructive methods to the wrapped Map:\n for (const methodName of ['get', 'has', 'keys', 'size']) {\n ImmutableMapWrapper.prototype[methodName] = function (...args) {\n return this.#wrappedMap[methodName](...args);\n }\n }\n }\n\n #wrappedMap;\n constructor(wrappedMap) {\n this.#wrappedMap = wrappedMap;\n }\n}\nImmutableMapWrapper._setUpPrototype();\n```", "```js\nconst map = new Map([[false, 'no'], [true, 'yes']]);\nconst wrapped = new ImmutableMapWrapper(map);\n\n// Non-destructive operations work as usual:\nassert.equal(\n wrapped.get(true), 'yes');\nassert.equal(\n wrapped.has(false), true);\nassert.deepEqual(\n [...wrapped.keys()], [false, true]);\n\n// Destructive operations are not available:\nassert.throws(\n () => wrapped.set(false, 'never!'),\n /^TypeError: wrapped.set is not a function$/);\nassert.throws(\n () => wrapped.clear(),\n /^TypeError: wrapped.clear is not a function$/);\n```", "```js\nconst RE_INDEX_PROP_KEY = /^[0-9]+$/;\nconst ALLOWED_PROPERTIES = new Set([\n 'length', 'constructor', 'slice', 'concat']);\n\nfunction wrapArrayImmutably(arr) {\n const handler = {\n get(target, propKey, receiver) {\n // We assume that propKey is a string (not a symbol)\n if (RE_INDEX_PROP_KEY.test(propKey) // simplified check!\n || ALLOWED_PROPERTIES.has(propKey)) {\n return Reflect.get(target, propKey, receiver);\n }\n throw new TypeError(`Property \"${propKey}\" can\u2019t be accessed`);\n },\n set(target, propKey, value, receiver) {\n throw new TypeError('Setting is not allowed');\n },\n deleteProperty(target, propKey) {\n throw new TypeError('Deleting is not allowed');\n },\n };\n return new Proxy(arr, handler);\n}\n```", "```js\nconst arr = ['a', 'b', 'c'];\nconst wrapped = wrapArrayImmutably(arr);\n\n// Non-destructive operations are allowed:\nassert.deepEqual(\n wrapped.slice(1), ['b', 'c']);\nassert.equal(\n wrapped[1], 'b');\n\n// Destructive operations are not allowed:\nassert.throws(\n () => wrapped[1] = 'x',\n /^TypeError: Setting is not allowed$/);\nassert.throws(\n () => wrapped.shift(),\n /^TypeError: Property \"shift\" can\u2019t be accessed$/);\n```"]