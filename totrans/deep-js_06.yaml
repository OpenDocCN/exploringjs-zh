- en: '4 Environments: under the hood of variables'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://exploringjs.com/deep-js/ch_environments.html](https://exploringjs.com/deep-js/ch_environments.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '4.1 [Environment: data structure for managing variables](ch_environments.html#environment-data-structure-for-managing-variables)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.2 [Recursion via environments](ch_environments.html#recursion-via-environments)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.2.1 [Executing the code](ch_environments.html#executing-the-code)
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.3 [Nested scopes via environments](ch_environments.html#nested-scopes-via-environments)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.3.1 [Executing the code](ch_environments.html#executing-the-code-1)
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.4 [Closures and environments](ch_environments.html#closures-environments)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we take a closer look at how the ECMAScript language specification
    handles variables.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '4.1 Environment: data structure for managing variables'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An environment is the data structure that the ECMAScript specification uses
    to manage variables. It is a dictionary whose keys are variable names and whose
    values are the values of those variables. Each scope has its associated environment.
    Environments must be able to support the following phenomena related to variables:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Recursion
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nested scopes
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Closures
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll use examples to illustrate how that is done for each phenomenon.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 4.2 Recursion via environments
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We’ll tackle recursion first. Consider the following code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For each function call, you need fresh storage space for the variables (parameters
    and local variables) of the called function. This is managed via a stack of so-called
    *execution contexts*, which are references to environments (for the purpose of
    this chapter). Environments themselves are stored on the heap. That is necessary
    because they occasionally live on after execution has left their scopes (we’ll
    see that when exploring *closures*). Therefore, they themselves can’t be managed
    via a stack.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 4.2.1 Executing the code
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'While executing the code, we make the following pauses:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is what happens:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Pause 1 – before calling `g()` (fig. [1](#fig:env_recursion_1)).
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pause 2 – while executing `g()` (fig. [2](#fig:env_recursion_2)).
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pause 3 – while executing `f()` (fig. [3](#fig:env_recursion_3)).
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Remaining steps: Every time there is a `return`, one execution context is removed
    from the stack.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/500f606df20758e348b5eab435dca891.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Recursion, pause 1 – before calling `g()`: The execution context
    stack has one entry, which points to the top-level environment. In that environment,
    there are two entries; one for `f()` and one for `g()`.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5ee98ad9451eb4fc93477cf8fd9ae8cd.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Recursion, pause 2 – while executing `g()`: The top of the execution
    context stack points to the environment that was created for `g()`. That environment
    contains entries for the argument `y` and for the local variable `tmp`.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a99708ba4b44d86dd29a70adbd4f1924.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Recursion, pause 3 – while executing `f()`: The top execution context
    now points to the environment for `f()`.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 4.3 Nested scopes via environments
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We use the following code to explore how nested scopes are implemented via environments.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, we have three nested scopes: The top-level scope, the scope of `f()`,
    and the scope of `square()`. Observations:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: The scopes are connected. An inner scope “inherits” all the variables of an
    outer scope (minus the ones it shadows).
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nesting scopes as a mechanism is independent of recursion. The latter is best
    managed by a stack of independent environments. The former is a relationship that
    each environment has with the environment “in which” it is created.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Therefore, the environment of each scope points to the environment of the surrounding
    scope via a field called `outer`. When we are looking up the value of a variable,
    we first search for its name in the current environment, then in the outer environment,
    then in the outer environment’s outer environment, etc. The whole chain of outer
    environments contains all variables that can currently be accessed (minus shadowed
    variables).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每个作用域的环境都通过一个名为`outer`的字段指向周围作用域的环境。当我们查找变量的值时，首先在当前环境中搜索其名称，然后在外部环境中搜索，然后在外部环境的外部环境中搜索，依此类推。整个外部环境链包含了当前可以访问的所有变量（减去被遮蔽的变量）。
- en: When you make a function call, you create a new environment. The outer environment
    of that environment is the environment in which the function was created. To help
    set up the field `outer` of environments created via function calls, each function
    has an internal property named `[[Scope]]` that points to its “birth environment”.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当你进行函数调用时，你创建了一个新的环境。该环境的外部环境是函数创建时的环境。为了帮助设置通过函数调用创建的环境的`outer`字段，每个函数都有一个名为`[[Scope]]`的内部属性，指向它的“诞生环境”。
- en: 4.3.1 Executing the code
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 4.3.1 执行代码
- en: 'These are the pauses we are making while executing the code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在执行代码时所做的暂停：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is what happens:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么：
- en: Pause 1 – before calling `f()` (fig. [4](#fig:env_nested_1)).
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂停1 - 在调用`f()`之前（图[4](#fig:env_nested_1)）。
- en: Pause 2 – while executing `f()` (fig. [5](#fig:env_nested_2)).
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂停2 - 在执行`f()`时（图[5](#fig:env_nested_2)）。
- en: Pause 3 – while executing `square()` (fig. [6](#fig:env_nested_3)).
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂停3 - 在执行`square()`时（图[6](#fig:env_nested_3)）。
- en: After that, `return` statements pop execution entries off the stack.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 之后，`return`语句将执行条目从堆栈中弹出。
- en: '![](../Images/fc1f598c8b8a54a968403157d9bdd685.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fc1f598c8b8a54a968403157d9bdd685.png)'
- en: 'Figure 4: Nested scopes, pause 1 – before calling `f()`: The top-level environment
    has a single entry, for `f()`. The birth environment of `f()` is the top-level
    environment. Therefore, `f`’s `[[Scope]]` points to it.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图4：嵌套作用域，暂停1 - 在调用`f()`之前：顶层环境只有一个条目，即`f()`。`f()`的诞生环境是顶层环境。因此，`f`的`[[Scope]]`指向它。
- en: '![](../Images/f89abfb174e1547d600b066ac16dd7ad.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f89abfb174e1547d600b066ac16dd7ad.png)'
- en: 'Figure 5: Nested scopes, pause 2 – while executing `f()`: There is now an environment
    for the function call `f(6)`. The outer environment of that environment is the
    birth environment of `f()` (the top-level environment at index 0). We can see
    that the field `outer` was set to the value of `f`’s `[[Scope]]`. Furthermore,
    the `[[Scope]]` of the new function `square()` is the environment that was just
    created.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图5：嵌套作用域，暂停2 - 在执行`f()`时：现在有一个用于函数调用`f(6)`的环境。该环境的外部环境是`f()`的诞生环境（索引为0的顶层环境）。我们可以看到`outer`字段被设置为`f`的`[[Scope]]`的值。此外，新函数`square()`的`[[Scope]]`是刚刚创建的环境。
- en: '![](../Images/f45a800b437ff88389f3808b333e2a3e.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f45a800b437ff88389f3808b333e2a3e.png)'
- en: 'Figure 6: Nested scopes, pause 3 – while executing `square()`: The previous
    pattern was repeated: the `outer` of the most recent environment was set up via
    the `[[Scope]]` of the function that we just called. The chain of scopes created
    via `outer`, contains all variables that are active right now. For example, we
    can access `result`, `square`, and `f` if we want to. Environments reflect two
    aspects of variables. First, the chain of outer environments reflects the nested
    static scopes. Second, the stack of execution contexts reflects what function
    calls were made, dynamically.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图6：嵌套作用域，暂停3 - 在执行`square()`时：重复了之前的模式：最近环境的`outer`是通过我们刚刚调用的函数的`[[Scope]]`设置的。通过`outer`创建的作用域链包含了当前活动的所有变量。例如，我们可以访问`result`、`square`和`f`。环境反映了变量的两个方面。首先，外部环境链反映了嵌套的静态作用域。其次，执行上下文的堆栈反映了动态地进行了哪些函数调用。
- en: 4.4 Closures and environments
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.4 闭包和环境
- en: 'To see how environments are used to implement [closures](https://exploringjs.com/impatient-js/ch_variables-assignment.html#closures),
    we are using the following example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到环境是如何用来实现[闭包](https://exploringjs.com/impatient-js/ch_variables-assignment.html#closures)的，我们使用以下示例：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: What is going on here? `add()` is a function that returns a function. When we
    make the nested function call `add(3)(1)` in line B, the first parameter is for
    `add()`, the second parameter is for the function it returns. This works because
    the function created in line A does not lose the connection to its birth scope
    when it leaves that scope. The associated environment is kept alive by that connection
    and the function still has access to variable `x` in that environment (`x` is
    free inside the function).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？`add()`是一个返回函数的函数。当我们在B行进行嵌套函数调用`add(3)(1)`时，第一个参数是给`add()`，第二个参数是给它返回的函数。这是因为在A行创建的函数在离开该作用域时不会失去与其诞生作用域的连接。通过该连接，相关环境保持活动状态，函数仍然可以访问该环境中的变量`x`（`x`在函数内部是自由的）。
- en: 'This nested way of calling `add()` has an advantage: if you only make the first
    function call, you get a version of `add()` whose parameter `x` is already filled
    in:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这种嵌套调用`add()`的方式有一个优势：如果你只进行第一次函数调用，你会得到一个`add()`的版本，其中参数`x`已经填充：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Converting a function with two parameters into two nested functions with one
    parameter each, is called *currying*. `add()` is a curried function.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将具有两个参数的函数转换为具有一个参数的两个嵌套函数，称为*柯里化*。`add()`是一个柯里化的函数。
- en: Only filling in some of the parameters of a function is called *partial application*
    (the function has not been fully applied yet). [Method `.bind()` of functions](https://exploringjs.com/impatient-js/ch_single-objects.html#function-prototype-bind)
    performs partial application. In the previous example, we can see that partial
    application is simple if a function is curried.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 只填写函数的一些参数称为*部分应用*（函数尚未完全应用）。[函数的`.bind()`方法](https://exploringjs.com/impatient-js/ch_single-objects.html#function-prototype-bind)执行部分应用。在前面的例子中，我们可以看到，如果一个函数是柯里化的，部分应用是简单的。
- en: 4.4.0.1 Executing the code
  id: totrans-65
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 4.4.0.1 执行代码
- en: 'As we are executing the following code, we are making three pauses:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行以下代码时，我们会做三次暂停：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is what happens:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是发生的事情：
- en: Pause 1 – during the execution of `add(2)` (fig. [7](#fig:env_closure_2)).
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂停1 - 在执行`add(2)`期间（图[7](#fig:env_closure_2)）。
- en: Pause 2 – after the execution of `add(2)` (fig. [8](#fig:env_closure_3)).
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂停2 - 在执行`add(2)`之后（图[8](#fig:env_closure_3)）。
- en: Pause 3 – while executing `plus2(5)` (fig. [9](#fig:env_closure_4)).
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂停3 - 在执行`plus2(5)`时（图[9](#fig:env_closure_4)）。
- en: '![](../Images/aed519495eaedebf4fb2c1f3a7bdb579.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aed519495eaedebf4fb2c1f3a7bdb579.png)'
- en: 'Figure 7: Closures, pause 1 – during the execution of `add(2)`: We can see
    that the function returned by `add()` already exists (see bottom right corner)
    and that it points to its birth environment via its internal property `[[Scope]]`.
    Note that `plus2` is still in its temporal dead zone and uninitialized.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图7：闭包，暂停1 - 在执行`add(2)`期间：我们可以看到`add()`返回的函数已经存在（见右下角），并且它通过其内部属性`[[Scope]]`指向其诞生环境。请注意，`plus2`仍处于其暂时死区并未初始化。
- en: '![](../Images/797baa263d972bfe6f34680109ee7a69.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/797baa263d972bfe6f34680109ee7a69.png)'
- en: 'Figure 8: Closures, pause 2 – after the execution of `add(2)`: `plus2` now
    points to the function returned by `add(2)`. That function keeps its birth environment
    (the environment of `add(2)`) alive via its `[[Scope]]`.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图8：闭包，暂停2 - 在执行`add(2)`之后：`plus2`现在指向`add(2)`返回的函数。该函数通过其`[[Scope]]`保持其诞生环境（`add(2)`的环境）的活力。
- en: '![](../Images/0959e9029bc37c6710bb7eb4b184d49b.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0959e9029bc37c6710bb7eb4b184d49b.png)'
- en: 'Figure 9: Closures, pause 3 – while executing `plus2(5)`: The `[[Scope]]` of
    `plus2` is used to set up the `outer` of the new environment. That’s how the current
    function gets access to `x`.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图9：闭包，暂停3 - 在执行`plus2(5)`时：`plus2`的`[[Scope]]`用于设置新环境的`outer`。这就是当前函数如何访问`x`的方式。
- en: 'Next: [5 A detailed look at global variables](ch_global-scope.html)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来：[5 全局变量的详细查看](ch_global-scope.html)
