["```js\nlet myVar;\nassert.equal(myVar, undefined);\n```", "```js\nfunction func(x) {\n return x;\n}\nassert.equal(func(), undefined);\n```", "```js\nconst obj = {};\nassert.equal(obj.unknownProp, undefined);\n```", "```js\nfunction func() {}\nassert.equal(func(), undefined);\n```", "```js\n> Object.getPrototypeOf(Object.prototype)\nnull\n```", "```js\n> /a/.exec('x')\nnull\n```", "```js\n> JSON.stringify({a: undefined, b: null})\n'{\"b\":null}'\n```", "```js\nif (x === null) \u00b7\u00b7\u00b7\nif (x === undefined) \u00b7\u00b7\u00b7\n```", "```js\nif (x !== undefined && x !== null) {\n // \u00b7\u00b7\u00b7\n}\nif (x) { // truthy?\n // x is neither: undefined, null, false, 0, NaN, ''\n}\n```", "```js\nif (x === undefined || x === null) {\n // \u00b7\u00b7\u00b7\n}\nif (!x) { // falsy?\n // x is: undefined, null, false, 0, NaN, ''\n}\n```", "```js\nconst valueToUse = receivedValue ?? defaultValue;\n```", "```js\na ?? b\na !== undefined && a !== null ? a : b\n```", "```js\nfunction countMatches(regex, str) {\n const matchResult = str.match(regex); // null or Array\n return (matchResult ?? []).length;\n}\n\nassert.equal(\n countMatches(/a/g, 'ababa'), 3);\nassert.equal(\n countMatches(/b/g, 'ababa'), 2);\nassert.equal(\n countMatches(/x/g, 'ababa'), 0);\n```", "```js\nreturn matchResult?.length ?? 0;\n```", "```js\nfunction getTitle(fileDesc) {\n return fileDesc.title ?? '(Untitled)';\n}\n\nconst files = [\n {path: 'index.html', title: 'Home'},\n {path: 'tmp.html'},\n];\nassert.deepEqual(\n files.map(f => getTitle(f)),\n ['Home', '(Untitled)']);\n```", "```js\nfunction getTitle(fileDesc) {\n const {title = '(Untitled)'} = fileDesc;\n return title;\n}\n```", "```js\n> undefined || 'default'\n'default'\n> null || 'default'\n'default'\n```", "```js\n> false || 'default'\n'default'\n> 0 || 'default'\n'default'\n> 0n || 'default'\n'default'\n> '' || 'default'\n'default'\n```", "```js\n> undefined ?? 'default'\n'default'\n> null ?? 'default'\n'default'\n\n> false ?? 'default'\nfalse\n> 0 ?? 'default'\n0\n> 0n ?? 'default'\n0n\n> '' ?? 'default'\n''\n```", "```js\na ??= b\na ?? (a = b)\n```", "```js\nconst books = [\n {\n isbn: '123',\n },\n {\n title: 'ECMAScript Language Specification',\n isbn: '456',\n },\n];\n\n// Add property .title where it\u2019s missing\nfor (const book of books) {\n book.title ??= '(Untitled)';\n}\n\nassert.deepEqual(\n books,\n [\n {\n isbn: '123',\n title: '(Untitled)',\n },\n {\n title: 'ECMAScript Language Specification',\n isbn: '456',\n },\n ]);\n```", "```js\nfunction getFoo(x) {\n return x.foo;\n}\n```", "```js\n> getFoo(undefined)\nTypeError: Cannot read properties of undefined (reading 'foo')\n> getFoo(null)\nTypeError: Cannot read properties of null (reading 'foo')\n\n> getFoo(true)\nundefined\n> getFoo({})\nundefined\n```"]