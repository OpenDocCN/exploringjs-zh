["```js\n// Named exports\nexport function f() {}\nexport const one = 1;\nexport {foo, b as bar};\n\n// Default exports\nexport default function f() {} // declaration with optional name\n// Replacement for `const` (there must be exactly one value)\nexport default 123;\n\n// Re-exporting from another module\nexport {foo, b as bar} from './some-module.mjs';\nexport * from './some-module.mjs';\nexport * as ns from './some-module.mjs'; // ES2020\n```", "```js\n// Named imports\nimport {foo, bar as b} from './some-module.mjs';\n// Namespace import\nimport * as someModule from './some-module.mjs';\n// Default import\nimport someModule from './some-module.mjs';\n\n// Combinations:\nimport someModule, * as someModule from './some-module.mjs';\nimport someModule, {foo, bar as b} from './some-module.mjs';\n\n// Empty import (for modules with side effects)\nimport './some-module.mjs';\n```", "```js\n<script src=\"other-module1.js\"></script>\n<script src=\"other-module2.js\"></script>\n<script src=\"my-module.js\"></script>\n```", "```js\nvar myModule = (function () { // Open IIFE\n // Imports (via global variables)\n var importedFunc1 = otherModule1.importedFunc1;\n var importedFunc2 = otherModule2.importedFunc2;\n\n // Body\n function internalFunc() {\n // \u00b7\u00b7\u00b7\n }\n function exportedFunc() {\n importedFunc1();\n importedFunc2();\n internalFunc();\n }\n\n // Exports (assigned to global variable `myModule`)\n return {\n exportedFunc: exportedFunc,\n };\n})(); // Close IIFE\n```", "```js\n// Imports\nvar importedFunc1 = require('./other-module1.js').importedFunc1;\nvar importedFunc2 = require('./other-module2.js').importedFunc2;\n\n// Body\nfunction internalFunc() {\n // \u00b7\u00b7\u00b7\n}\nfunction exportedFunc() {\n importedFunc1();\n importedFunc2();\n internalFunc();\n}\n\n// Exports\nmodule.exports = {\n exportedFunc: exportedFunc,\n};\n```", "```js\ndefine(['./other-module1.js', './other-module2.js'],\n function (otherModule1, otherModule2) {\n var importedFunc1 = otherModule1.importedFunc1;\n var importedFunc2 = otherModule2.importedFunc2;\n\n function internalFunc() {\n // \u00b7\u00b7\u00b7\n }\n function exportedFunc() {\n importedFunc1();\n importedFunc2();\n internalFunc();\n }\n\n return {\n exportedFunc: exportedFunc,\n };\n });\n```", "```js\nimport {importedFunc1} from './other-module1.mjs';\nimport {importedFunc2} from './other-module2.mjs';\n\nfunction internalFunc() {\n \u00b7\u00b7\u00b7\n}\n\nexport function exportedFunc() {\n importedFunc1();\n importedFunc2();\n internalFunc();\n}\n```", "```js\nlib/my-math.mjs\nmain.mjs\n```", "```js\n// Not exported, private to module\nfunction times(a, b) {\n return a * b;\n}\nexport function square(x) {\n return times(x, x);\n}\nexport const LIGHTSPEED = 299792458;\n```", "```js\nimport {square} from './lib/my-math.mjs';\nassert.equal(square(3), 9);\n```", "```js\nimport {square as sq} from './lib/my-math.mjs';\nassert.equal(sq(3), 9);\n```", "```js\nimport {foo} from './bar.mjs'; // import\nconst {foo} = require('./bar.mjs'); // destructuring\n```", "```js\n    import {foo as f} from './bar.mjs'; // importing\n    const {foo: f} = require('./bar.mjs'); // destructuring\n    ```", "```js\nimport * as myMath from './lib/my-math.mjs';\nassert.equal(myMath.square(3), 9);\n\nassert.deepEqual(\n Object.keys(myMath), ['LIGHTSPEED', 'square']);\n```", "```js\nfunction times(a, b) {\n return a * b;\n}\nfunction square(x) {\n return times(x, x);\n}\nconst LIGHTSPEED = 299792458;\n\nexport { square, LIGHTSPEED }; // semicolon!\n```", "```js\nfunction times(a, b) {\n return a * b;\n}\nfunction sq(x) {\n return times(x, x);\n}\nconst LS = 299792458;\n\nexport {\n sq as square,\n LS as LIGHTSPEED, // trailing comma is optional\n};\n```", "```js\nmy-func.mjs\nmain.mjs\n```", "```js\nconst GREETING = 'Hello!';\nexport default function () {\n return GREETING;\n}\n```", "```js\nimport myFunc from './my-func.mjs';\nassert.equal(myFunc(), 'Hello!');\n```", "```js\nexport default function myFunc() {} // no semicolon!\nexport default class MyClass {} // no semicolon!\n```", "```js\nexport default myFunc; // defined elsewhere\nexport default MyClass; // defined previously\nexport default Math.sqrt(2); // result of invocation is default-exported\nexport default 'abc' + 'def';\nexport default { no: false, yes: true };\n```", "```js\n// Not legal JavaScript!\nexport default const foo = 1, bar = 2, baz = 3;\n```", "```js\nconst GREETING = 'Hello!';\nexport default function () {\n return GREETING;\n}\n```", "```js\nconst GREETING = 'Hello!';\nfunction greet() {\n return GREETING;\n}\n\nexport {\n greet as default,\n};\n```", "```js\nimport myFunc from './my-func2.mjs';\nassert.equal(myFunc(), 'Hello!');\n```", "```js\nimport {default as myFunc} from './my-func2.mjs';\nassert.equal(myFunc(), 'Hello!');\n```", "```js\nimport * as mf from './my-func2.mjs';\nassert.equal(mf.default(), 'Hello!');\n```", "```js\nconst obj = {\n default: 123,\n};\nassert.equal(obj.default, 123);\n```", "```js\ncounter.mjs\nmain.mjs\n```", "```js\nexport let counter = 3;\nexport function incCounter() {\n counter++;\n}\n```", "```js\nimport { counter, incCounter } from './counter.mjs';\n\n// The imported value `counter` is live\nassert.equal(counter, 3);\nincCounter();\nassert.equal(counter, 4);\n```", "```js\n{\n \"name\": \"my-package\",\n \"version\": \"1.0.0\",\n \"description\": \"\",\n \"main\": \"index.js\",\n \"scripts\": {\n \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n },\n \"keywords\": [],\n \"author\": \"\",\n \"license\": \"ISC\"\n}\n```", "```js\n/tmp/a/b/node_modules/some-pkg/\n```", "```js\n// /home/jane/proj/main.mjs\nimport * as theModule from 'the-package/the-module.mjs';\n```", "```js\n    ./my-module.mjs\n    ./some-func.mjs\n    ```", "```js\n    import * as myModule from './my-module.mjs';\n    ```", "```js\n    import someFunc from './some-func.mjs';\n    ```", "```js\nimport * as my_module from './my_module.mjs';\n```", "```js\n    './some/other/module.mjs'\n    '../../lib/counter.mjs'\n    ```", "```js\n    '/home/jane/file-tools.mjs'\n    ```", "```js\n    'https://example.com/some-module.mjs'\n    'file:///home/john/tmp/main.mjs'\n    ```", "```js\n    'lodash'\n    'the-package'\n    ```", "```js\n    'the-package/dist/the-module.mjs'\n    ```", "```js\nimport * as assert from 'assert/strict';\nimport * as path from 'path';\n\nassert.equal(\n path.join('a/b/c', '../d'), 'a/b/d');\n```", "```js\n'https://example.com/code/main.mjs'\n```", "```js\nnew URL(input: string, base?: string|URL)\n```", "```js\n> new URL('other.mjs', 'https://example.com/code/main.mjs').href\n'https://example.com/code/other.mjs'\n> new URL('../other.mjs', 'https://example.com/code/main.mjs').href\n'https://example.com/other.mjs'\n```", "```js\nconst urlOfData = new URL('data.txt', import.meta.url);\n```", "```js\n'file:///Users/rauschma/my-module.mjs'\n```", "```js\nimport * as fs from 'fs';\nfunction readData() {\n // data.txt sits next to current module\n const urlOfData = new URL('data.txt', import.meta.url);\n return fs.readFileSync(urlOfData, {encoding: 'UTF-8'});\n}\n```", "```js\nassert.equal(\n new URL('file:///tmp/with%20space.txt').pathname,\n '/tmp/with%20space.txt');\n```", "```js\nimport * as url from 'url';\nassert.equal(\n url.fileURLToPath('file:///tmp/with%20space.txt'),\n '/tmp/with space.txt'); // result on Unix\n```", "```js\nimport(moduleSpecifierStr)\n.then((namespaceObject) => {\n console.log(namespaceObject.namedExport);\n});\n```", "```js\nconst namespaceObject = await import(moduleSpecifierStr);\nconsole.log(namespaceObject.namedExport);\n```", "```js\nlib/my-math.mjs\nmain1.mjs\nmain2.mjs\n```", "```js\n// Not exported, private to module\nfunction times(a, b) {\n return a * b;\n}\nexport function square(x) {\n return times(x, x);\n}\nexport const LIGHTSPEED = 299792458;\n```", "```js\n// main1.mjs\nconst moduleSpecifier = './lib/my-math.mjs';\n\nfunction mathOnDemand() {\n return import(moduleSpecifier)\n .then(myMath => {\n const result = myMath.LIGHTSPEED;\n assert.equal(result, 299792458);\n return result;\n });\n}\n\nmathOnDemand()\n.then((result) => {\n assert.equal(result, 299792458);\n});\n```", "```js\n// main2.mjs\nconst moduleSpecifier = './lib/my-math.mjs';\n\nasync function mathOnDemand() {\n const myMath = await import(moduleSpecifier);\n const result = myMath.LIGHTSPEED;\n assert.equal(result, 299792458);\n return result;\n}\n```", "```js\nbutton.addEventListener('click', event => {\n import('./dialogBox.mjs')\n .then(dialogBox => {\n dialogBox.open();\n })\n .catch(error => {\n /* Error handling */\n })\n});\n```", "```js\nif (isLegacyPlatform()) {\n import('./my-polyfill.mjs')\n .then(\u00b7\u00b7\u00b7);\n}\n```", "```js\nimport(`messages_${getLocale()}.mjs`)\n .then(\u00b7\u00b7\u00b7);\n```", "```js\nconst params = new URLSearchParams(location.search);\nconst language = params.get('lang');\nconst messages = await import(`./messages-${language}.mjs`); // (A)\n\nconsole.log(messages.welcome);\n```", "```js\nlet lodash;\ntry {\n lodash = await import('https://primary.example.com/lodash');\n} catch {\n lodash = await import('https://secondary.example.com/lodash');\n}\n```", "```js\nconst resource = await Promise.any([\n fetch('http://example.com/first.txt')\n .then(response => response.text()),\n fetch('http://example.com/second.txt')\n .then(response => response.text()),\n]);\n```", "```js\nconst response = await fetch('http://example.com/first.txt');\nexport const first = await response.text();\n```", "```js\nimport {first} from './first.mjs';\nimport {second} from './second.mjs';\nassert.equal(first, 'First!');\nassert.equal(second, 'Second!');\n```", "```js\nexport let first;\nexport const promise = (async () => { // (A)\n const response = await fetch('http://example.com/first.txt');\n first = await response.text();\n})();\n```", "```js\nimport {promise as firstPromise, first} from './first.mjs';\nimport {promise as secondPromise, second} from './second.mjs';\nexport const promise = (async () => { // (B)\n await Promise.all([firstPromise, secondPromise]); // (C)\n assert.equal(first, 'First content!');\n assert.equal(second, 'Second content!');\n})();\n```"]