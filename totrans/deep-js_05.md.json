["```js\nfunction move({x=0, y=0} = {})         { \u00b7\u00b7\u00b7 }\nfunction move({x, y} = { x: 0, y: 0 }) { \u00b7\u00b7\u00b7 }\n```", "```js\n\u00abpattern\u00bb = \u00abvalue\u00bb\n```", "```js\n\u00abpattern\u00bb \u2190 \u00abvalue\u00bb\n```", "```js\n    \u00abpattern\u00bb \u2190 obj.key\n    {\u00abproperties\u00bb} \u2190 obj\n    ```", "```js\n    // We are finished\n    ```", "```js\n{first: f, last: l} \u2190 obj\n```", "```js\n    throw new TypeError();\n    ```", "```js\n    x = value\n    ```", "```js\n    throw new TypeError();\n    ```", "```js\n    throw new TypeError();\n    ```", "```js\n    \u00abpattern\u00bb \u2190 obj.key\n    {\u00abproperties\u00bb} \u2190 obj\n    ```", "```js\n    const tmp = obj.key;\n    if (tmp !== undefined) {\n     \u00abpattern\u00bb \u2190 tmp\n    } else {\n     \u00abpattern\u00bb \u2190 default_value\n    }\n    {\u00abproperties\u00bb} \u2190 obj\n    ```", "```js\n    // We are finished\n    ```", "```js\n    throw new TypeError();\n    ```", "```js\n    const iterator = iterable[Symbol.iterator]();\n    \u00abelements\u00bb \u2190 iterator\n    ```", "```js\nfunction isIterable(value) {\n return (value !== null\n && typeof value === 'object'\n && typeof value[Symbol.iterator] === 'function');\n}\n```", "```js\n    \u00abpattern\u00bb \u2190 getNext(iterator) // undefined after last item\n    \u00abelements\u00bb \u2190 iterator\n    ```", "```js\n    const tmp = getNext(iterator);  // undefined after last item\n    if (tmp !== undefined) {\n     \u00abpattern\u00bb \u2190 tmp\n    } else {\n     \u00abpattern\u00bb \u2190 default_value\n    }\n    \u00abelements\u00bb \u2190 iterator\n    ```", "```js\n    getNext(iterator); // skip\n    \u00abelements\u00bb \u2190 iterator\n    ```", "```js\n    const tmp = [];\n    for (const elem of iterator) {\n     tmp.push(elem);\n    }\n    \u00abpattern\u00bb \u2190 tmp\n    ```", "```js\n    // We are finished\n    ```", "```js\nfunction getNext(iterator) {\n const {done,value} = iterator.next();\n return (done ? undefined : value);\n}\n```", "```js\nconst {} = 123; // OK, neither undefined nor null\nassert.throws(\n () => {\n const {} = null;\n },\n /^TypeError: Cannot destructure 'null' as it is null.$/)\n```", "```js\nconst [] = 'abc'; // OK, iterable\nassert.throws(\n () => {\n const [] = 123; // not iterable\n },\n /^TypeError: 123 is not iterable$/)\n```", "```js\nfunction move1({x=0, y=0} = {}) { // (A)\n return [x, y];\n}\nassert.deepEqual(\n move1({x: 3, y: 8}), [3, 8]);\nassert.deepEqual(\n move1({x: 3}), [3, 0]);\nassert.deepEqual(\n move1({}), [0, 0]);\nassert.deepEqual(\n move1(), [0, 0]);\n```", "```js\nfunction move2({x, y} = { x: 0, y: 0 }) {\n return [x, y];\n}\n```", "```js\nfunction func(a=0, b=0) { \u00b7\u00b7\u00b7 }\nfunc(1, 2);\n```", "```js\n[a=0, b=0] \u2190 [1, 2]\n```", "```js\n[{x, y} = { x: 0, y: 0 }] \u2190 []\n```", "```js\n{x, y} \u2190 { x: 0, y: 0 }\n```", "```js\n{x: x, y: y} \u2190 { x: 0, y: 0 }\n```", "```js\nx = 0;\ny = 0;\n```", "```js\n[{x, y} = { x: 0, y: 0 }] \u2190 [{z: 3}]\n```", "```js\n{x, y} \u2190 { z: 3 }\n```", "```js\n[{x=0, y=0} = {}] \u2190 []\n```", "```js\n{x=0, y=0} \u2190 {}\n```", "```js\n{x: x=0, y: y=0} \u2190 {}\n```", "```js\nx \u2190 0\ny \u2190 0\n```", "```js\nx = 0\ny = 0\n```", "```js\n[{x=0, y=0} = {}] \u2190 [{z: 3}]\n```", "```js\n{x=0, y=0} \u2190 {z: 3}\n```", "```js\nx = 0\ny = 0\n```"]