["```ts\nconst data: object = ['a', 'b', 'c']; // (A)\n\n// @ts-expect-error: Property 'length' does not exist on type 'object'.\ndata.length; // (B)\n\nassert.equal(\n (data as Array<string>).length, 3); // (C)\n```", "```ts\n<Array<string>>data\n```", "```ts\ninterface Named {\n name: string;\n}\nfunction getName(obj: object): string {\n if (typeof (obj as Named).name === 'string') { // (A)\n return (obj as Named).name; // (B)\n }\n return '(Unnamed)';\n}\n```", "```ts\ntype Dict = {[k:string]: any};\n\nfunction getPropertyValue(dict: unknown, key: string): any {\n if (typeof dict === 'object' && dict !== null && key in dict) {\n // %inferred-type: object\n dict;\n\n // @ts-expect-error: Element implicitly has an 'any' type because\n // expression of type 'string' can't be used to index type '{}'.\n // [...]\n dict[key];\n\n return (dict as Dict)[key]; // (A)\n } else {\n throw new Error();\n }\n}\n```", "```ts\nconst theName = 'Jane' as (null | string);\n\n// @ts-expect-error: Object is possibly 'null'.\ntheName.length;\n\nassert.equal(\n theName!.length, 4); // OK\n```", "```ts\nfunction getLength(strMap: Map<string, string>, key: string): number {\n if (strMap.has(key)) {\n // We are sure x is not undefined:\n const value = strMap.get(key)!; // (A)\n return value.length;\n }\n return -1;\n}\n```", "```ts\nfunction getLength(strMap: Map<string, string>, key: string): number {\n // %inferred-type: string | undefined\n const value = strMap.get(key);\n if (value === undefined) { // (A)\n return -1;\n }\n\n // %inferred-type: string\n value;\n\n return value.length;\n}\n```", "```ts\nclass Point1 {\n // @ts-expect-error: Property 'x' has no initializer and is not definitely\n // assigned in the constructor.\n x: number;\n\n // @ts-expect-error: Property 'y' has no initializer and is not definitely\n // assigned in the constructor.\n y: number;\n\n constructor() {\n this.initProperties();\n }\n initProperties() {\n this.x = 0;\n this.y = 0;\n }\n}\n```", "```ts\nclass Point2 {\n x!: number; // (A)\n y!: number; // (B)\n constructor() {\n this.initProperties();\n }\n initProperties() {\n this.x = 0;\n this.y = 0;\n }\n}\n```"]