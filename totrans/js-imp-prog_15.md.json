["```js\nconst str = 'abc';\nassert.equal(str.length, 3);\nassert.throws(\n () => { str.length = 1 },\n /^TypeError: Cannot assign to read only property 'length'/\n);\n```", "```js\nconst x = 123;\nconst y = x;\n// `y` is the same as any other number 123\nassert.equal(y, 123);\n```", "```js\nassert.equal(123 === 123, true);\nassert.equal('abc' === 'abc', true);\n```", "```js\n    const obj = {\n     first: 'Jane',\n     last: 'Doe',\n    };\n    ```", "```js\n    const fruits = ['strawberry', 'apple'];\n    ```", "```js\nconst obj = {};\n\nobj.count = 2; // add a property\nassert.equal(obj.count, 2);\n\nobj.count = 3; // change a property\nassert.equal(obj.count, 3);\n```", "```js\nconst a = {}; // fresh empty object\n// Pass the identity in `a` to `b`:\nconst b = a;\n\n// Now `a` and `b` point to the same object\n// (they \u201cshare\u201d that object):\nassert.equal(a === b, true);\n\n// Changing `a` also changes `b`:\na.name = 'Tessa';\nassert.equal(b.name, 'Tessa');\n```", "```js\nlet obj = { prop: 'value' };\nobj = {};\n```", "```js\nconst obj = {}; // fresh empty object\nassert.equal(obj === obj, true); // same identity\nassert.equal({} === {}, false); // different identities, same content\n```", "```js\nif (typeof x === 'string') \u00b7\u00b7\u00b7\nif (x instanceof Array) \u00b7\u00b7\u00b7\n```", "```js\n> typeof undefined\n'undefined'\n> typeof 123n\n'bigint'\n> typeof 'abc'\n'string'\n> typeof {}\n'object'\n```", "```js\nx instanceof C\n```", "```js\n> (function() {}) instanceof Function\ntrue\n> ({}) instanceof Object\ntrue\n> [] instanceof Array\ntrue\n```", "```js\n> 123 instanceof Number\nfalse\n> '' instanceof String\nfalse\n> '' instanceof Object\nfalse\n```", "```js\n    assert.equal(Number('123'), 123);\n    ```", "```js\n    assert.equal((123).toString, Number.prototype.toString);\n    ```", "```js\n    assert.equal(Number.isInteger(123), true);\n    ```", "```js\n    assert.notEqual(new Number(123), 123);\n    assert.equal(new Number(123).valueOf(), 123);\n    ```", "```js\nconst prim = true;\nassert.equal(typeof prim, 'boolean');\nassert.equal(prim instanceof Boolean, false);\n\nconst wrapped = Object(prim);\nassert.equal(typeof wrapped, 'object');\nassert.equal(wrapped instanceof Boolean, true);\n\nassert.equal(wrapped.valueOf(), prim); // unwrap\n```", "```js\n> Boolean(0)\nfalse\n> Number('123')\n123\n> String(123)\n'123'\n```", "```js\n> typeof Object(123)\n'object'\n```", "```js\n> '7' * '3'\n21\n```", "```js\n> Number.parseInt(123.45)\n123\n```"]