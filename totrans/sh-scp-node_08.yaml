- en: 6 An overview of npm (a package manager for JavaScript)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://exploringjs.com/nodejs-shell-scripting/ch_npm-overview.html](https://exploringjs.com/nodejs-shell-scripting/ch_npm-overview.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 6.1 [The npm package manager](ch_npm-overview.html#the-npm-package-manager)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 6.2 [Getting help for npm](ch_npm-overview.html#help-for-npm)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 6.2.1 [Getting help on the command line](ch_npm-overview.html#getting-help-on-the-command-line)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 6.2.2 [Getting help online](ch_npm-overview.html#getting-help-online)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 6.3 [Common npm commands](ch_npm-overview.html#common-npm-commands)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 6.4 [Abbreviations for npm commands](ch_npm-overview.html#abbreviations-for-npm-commands)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 6.1 The npm package manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *npm registry* is the de-facto standard for hosting JavaScript packages.
    Those packages have a particular format and are called *npm packages*.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, in the JavaScript ecosystem, a *package manager* is a command line
    tool for installing npm packages – from the npm registry or other sources.
  prefs: []
  type: TYPE_NORMAL
- en: The most popular package manager is called *npm* and comes bundled with Node.js.
    Its name originally stood for “Node Package Manager”. Later, when npm and the
    npm registry were used not just for Node.js packages, the definition was changed
    to “npm is not a package manager” ([source](https://en.wikipedia.org/wiki/Npm_(software)#Acronym)).
  prefs: []
  type: TYPE_NORMAL
- en: There are other popular package managers such as yarn and pnpm. All of these
    package managers use the npm registry by default.
  prefs: []
  type: TYPE_NORMAL
- en: We use npm via the shell command `npm` which provides several subcommands such
    as `npm install`.
  prefs: []
  type: TYPE_NORMAL
- en: 6.2 Getting help for npm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 6.2.1 Getting help on the command line
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We can use the `npm` command to explain itself: On one hand, there is the option
    `-h` which can be used after `npm` and after npm commands. It provides brief explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, there is the command `npm help` which provides longer explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Help topics include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`folders`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npmrc`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.json`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 6.2.2 Getting help online
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[The official npm documentation](https://docs.npmjs.com) is also available
    online.'
  prefs: []
  type: TYPE_NORMAL
- en: 6.3 Common npm commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are a few common commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`npm init` “initializes” the current directory to be a package. That is, it
    creates the file `package.json` in it. This command is explained in [§14.3.1 “Setting
    up the package’s directory”](ch_creating-shell-scripts.html#npm-init).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm install` installs npm packages globally or locally. It is explained in
    [§13 “Installing npm packages and running bin scripts”](ch_installing-packages.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm publish` publishes packages to registries: It either creates a new package
    or updates an existing package. It is explained in [§14.5.3 “`npm publish`: uploading
    packages to the npm registry”](ch_creating-shell-scripts.html#npm-publish).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run` (which is short for `npm run-script`) executes package scripts. Package
    scripts are explained in [§15 “Running cross-platform tasks via npm package scripts”](ch_package-scripts.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm uninstall` removes a package that was installed globally or locally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm version` prints the object `process.versions` which records the versions
    of various components of Node.js and npm:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`npx` lets us run bin scripts in packages without installing them. It is described
    in [§13.4 “`npx`: running bin scripts in npm packages without installing them”](ch_installing-packages.html#npx).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The npm documentation has [a list of all npm commands](https://docs.npmjs.com/cli/v8/commands).
  prefs: []
  type: TYPE_NORMAL
- en: 6.4 Abbreviations for npm commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Many npm commands have abbreviations – for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Short | Long |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `npm i` | `npm install` |'
  prefs: []
  type: TYPE_TB
- en: '| `npm rm` | `npm uninstall` |'
  prefs: []
  type: TYPE_TB
- en: '| `npm run` | `npm run-script` |'
  prefs: []
  type: TYPE_TB
- en: For each npm command it describes, [the npm documentation](https://docs.npmjs.com/cli/v8/commands)
    also lists all of its aliases (including abbreviations).
  prefs: []
  type: TYPE_NORMAL
- en: '[Comments](https://github.com/rauschma/nodejs-shell-scripting/issues/6)'
  prefs: []
  type: TYPE_NORMAL
