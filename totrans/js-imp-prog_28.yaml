- en: 23 Control flow statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://exploringjs.com/impatient-js/ch_control-flow.html](https://exploringjs.com/impatient-js/ch_control-flow.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '23.1 [Controlling loops: `break` and `continue`](ch_control-flow.html#controlling-loops-break-and-continue)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.1.1 [`break`](ch_control-flow.html#break)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '23.1.2 [`break` plus label: leaving any labeled statement](ch_control-flow.html#labels)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.1.3 [`continue`](ch_control-flow.html#continue)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.2 [Conditions of control flow statements](ch_control-flow.html#conditions-of-control-flow-statements)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.3 [`if` statements [ES1]](ch_control-flow.html#if)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.3.1 [The syntax of `if` statements](ch_control-flow.html#the-syntax-of-if-statements)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.4 [`switch` statements [ES3]](ch_control-flow.html#switch)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.4.1 [A first example of a `switch` statement](ch_control-flow.html#a-first-example-of-a-switch-statement)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.4.2 [Don’t forget to `return` or `break`!](ch_control-flow.html#dont-forget-to-return-or-break)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.4.3 [Empty case clauses](ch_control-flow.html#empty-case-clauses)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.4.4 [Checking for illegal values via a `default` clause](ch_control-flow.html#checking-for-illegal-values-via-a-default-clause)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.5 [`while` loops [ES1]](ch_control-flow.html#while)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.5.1 [Examples of `while` loops](ch_control-flow.html#examples-of-while-loops)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.6 [`do-while` loops [ES3]](ch_control-flow.html#do-while)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.7 [`for` loops [ES1]](ch_control-flow.html#for)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.7.1 [Examples of `for` loops](ch_control-flow.html#examples-of-for-loops)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.8 [`for-of` loops [ES6]](ch_control-flow.html#for-of)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '23.8.1 [`const`: `for-of` vs. `for`](ch_control-flow.html#const-for-of-vs.-for)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.8.2 [Iterating over iterables](ch_control-flow.html#iterating-over-iterables)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.8.3 [Iterating over [index, element] pairs of Arrays](ch_control-flow.html#for-of-iterating-index-element)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.9 [`for-await-of` loops [ES2018]](ch_control-flow.html#for-await-of-loops-es2018)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.10 [`for-in` loops (avoid) [ES1]](ch_control-flow.html#for-in)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.11 [Recomendations for looping](ch_control-flow.html#recomendations-for-looping)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following control flow statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`if` statement [ES1]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`switch` statement [ES3]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`while` loop [ES1]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do-while` loop [ES3]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for` loop [ES1]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for-of` loop [ES6]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for-await-of` loop [ES2018]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for-in` loop [ES1]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '23.1 Controlling loops: `break` and `continue`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The two operators `break` and `continue` can be used to control loops and other
    statements while we are inside them.
  prefs: []
  type: TYPE_NORMAL
- en: 23.1.1 `break`
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are two versions of `break`: one with an operand and one without an operand.
    The latter version works inside the following statements: `while`, `do-while`,
    `for`, `for-of`, `for-await-of`, `for-in` and `switch`. It immediately leaves
    the current statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '23.1.2 `break` plus label: leaving any labeled statement'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`break` with an operand works everywhere. Its operand is a *label*. Labels
    can be put in front of any statement, including blocks. `break my_label` leaves
    the statement whose label is `my_label`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following example, the search can either:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fail: The loop finishes without finding a `result`. That is handled directly
    after the loop (line B).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Succeed: While looping, we find a `result`. Then we use `break` plus label
    (line A) to skip the code that handles failure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 23.1.3 `continue`
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`continue` only works inside `while`, `do-while`, `for`, `for-of`, `for-await-of`,
    and `for-in`. It immediately leaves the current loop iteration and continues with
    the next one – for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 23.2 Conditions of control flow statements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`if`, `while`, and `do-while` have conditions that are, in principle, boolean.
    However, a condition only has to be *truthy* (`true` if coerced to boolean) in
    order to be accepted. In other words, the following two control flow statements
    are equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a list of all *falsy* values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`undefined`, `null`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0`, `NaN`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0n`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All other values are truthy. For more information, see [§15.2 “Falsy and truthy
    values”](ch_booleans.html#falsiness-truthiness).
  prefs: []
  type: TYPE_NORMAL
- en: 23.3 `if` statements [ES1]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are two simple `if` statements: one with just a “then” branch and one
    with both a “then” branch and an “else” branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of the block, `else` can also be followed by another `if` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can continue this chain with more `else if`s.
  prefs: []
  type: TYPE_NORMAL
- en: 23.3.1 The syntax of `if` statements
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The general syntax of `if` statements is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'So far, the `then_statement` has always been a block, but we can use any statement.
    That statement must be terminated with a semicolon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: That means that `else if` is not its own construct; it’s simply an `if` statement
    whose `else_statement` is another `if` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 23.4 `switch` statements [ES3]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A `switch` statement looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The body of `switch` consists of zero or more case clauses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And, optionally, a default clause:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'A `switch` is executed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It evaluates the switch expression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It jumps to the first case clause whose expression has the same result as the
    switch expression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, if there is no such clause, it jumps to the default clause.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, if there is no default clause, it does nothing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.4.1 A first example of a `switch` statement
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s look at an example: The following function converts a number from 1–7
    to the name of a weekday.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 23.4.2 Don’t forget to `return` or `break`!
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'At the end of a case clause, execution continues with the next case clause,
    unless we `return` or `break` – for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'That is, our implementation of `dayOfTheWeek()` only worked because we used
    `return`. We can fix `englishToFrench()` by using `break`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 23.4.3 Empty case clauses
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The statements of a case clause can be omitted, which effectively gives us
    multiple case expressions per case clause:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 23.4.4 Checking for illegal values via a `default` clause
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A `default` clause is jumped to if the `switch` expression has no other match.
    That makes it useful for error checking:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Exercises: `switch`**'
  prefs: []
  type: TYPE_NORMAL
- en: '`exercises/control-flow/number_to_month_test.mjs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bonus: `exercises/control-flow/is_object_via_switch_test.mjs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.5 `while` loops [ES1]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A `while` loop has the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Before each loop iteration, `while` evaluates `condition`:'
  prefs: []
  type: TYPE_NORMAL
- en: If the result is falsy, the loop is finished.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the result is truthy, the `while` body is executed one more time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.5.1 Examples of `while` loops
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The following code uses a `while` loop. In each loop iteration, it removes the
    first element of `arr` via `.shift()` and logs it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If the condition always evaluates to `true`, then `while` is an infinite loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 23.6 `do-while` loops [ES3]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `do-while` loop works much like `while`, but it checks its condition *after*
    each loop iteration, not before.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '`do-while` can also be viewed as a `while` loop that runs at least once.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`prompt()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)
    is a global function that is available in web browsers. It prompts the user to
    input text and returns it.'
  prefs: []
  type: TYPE_NORMAL
- en: 23.7 `for` loops [ES1]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A `for` loop has the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The first line is the *head* of the loop and controls how often the *body*
    (the remainder of the loop) is executed. It has three parts and each of them is
    optional:'
  prefs: []
  type: TYPE_NORMAL
- en: '`initialization`: sets up variables, etc. for the loop. Variables declared
    here via `let` or `const` only exist inside the loop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`condition`: This condition is checked before each loop iteration. If it is
    falsy, the loop stops.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post_iteration`: This code is executed after each loop iteration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A `for` loop is therefore roughly equivalent to the following `while` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 23.7.1 Examples of `for` loops
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As an example, this is how to count from zero to two via a `for` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how to log the contents of an Array via a `for` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If we omit all three parts of the head, we get an infinite loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 23.8 `for-of` loops [ES6]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A `for-of` loop iterates over any *iterable* – a data container that supports
    [the *iteration protocol*](ch_sync-iteration.html). Each iterated value is stored
    in a variable, as specified in the head:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The iteration variable is usually created via a variable declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'But we can also use a (mutable) variable that already exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '23.8.1 `const`: `for-of` vs. `for`'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note that in `for-of` loops we can use `const`. The iteration variable can still
    be different for each iteration (it just can’t change during the iteration). Think
    of it as a new `const` declaration being executed each time in a fresh scope.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, in `for` loops we must declare variables via `let` or `var` if
    their values change.
  prefs: []
  type: TYPE_NORMAL
- en: 23.8.2 Iterating over iterables
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As mentioned before, `for-of` works with any iterable object, not just with
    Arrays – for example, with Sets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 23.8.3 Iterating over [index, element] pairs of Arrays
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Lastly, we can also use `for-of` to iterate over the [index, element] entries
    of Arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: With `[index, element]`, we are using [*destructuring*](ch_destructuring.html)
    to access Array elements.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/90f73f1851c5b1baf43cb746913c09e6.png)  **Exercise: `for-of`**'
  prefs: []
  type: TYPE_NORMAL
- en: '`exercises/control-flow/array_to_string_test.mjs`'
  prefs: []
  type: TYPE_NORMAL
- en: 23.9 `for-await-of` loops [ES2018]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`for-await-of` is like `for-of`, but it works with asynchronous iterables instead
    of synchronous ones. And it can only be used inside async functions and async
    generators.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '`for-await-of` is described in detail [in the chapter on asynchronous iteration](ch_async-iteration.html#for-await-of).'
  prefs: []
  type: TYPE_NORMAL
- en: 23.10 `for-in` loops (avoid) [ES1]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `for-in` loop visits all (own and inherited) enumerable property keys of
    an object. When looping over an Array, it is rarely a good choice:'
  prefs: []
  type: TYPE_NORMAL
- en: It visits property keys, not values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As property keys, the indices of Array elements are strings, not numbers ([more
    information on how Array elements work](ch_arrays.html#array-indices)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It visits all enumerable property keys (both own and inherited ones), not just
    those of Array elements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code demonstrates these points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 23.11 Recomendations for looping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to loop over an [asynchronous iterable](ch_async-iteration.html)
    (in ES2018+), you must use `for-await-of`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For looping over a synchronous iterable (in ES6+), you must use `for-of`. Note
    that Arrays are iterables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For looping over an Array in ES5+, you can use [the Array method `.forEach()`](ch_arrays.html#Array.prototype.forEach).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before ES5, you can use a plain `for` loop to loop over an Array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t use `for-in` to loop over an Array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/4ca05ad97a693bee61e4fd6459232e60.png)  **Quiz**'
  prefs: []
  type: TYPE_NORMAL
- en: See [quiz app](ch_quizzes-exercises.html#quizzes).
  prefs: []
  type: TYPE_NORMAL
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/16)'
  prefs: []
  type: TYPE_NORMAL
