["```ts\n// Each Array element has the type `string`:\nconst myStringArray: string[] = ['fee', 'fi', 'fo', 'fum'];\n```", "```ts\nconst myStringArray: Array<string> = ['fee', 'fi', 'fo', 'fum'];\n```", "```ts\n(number|string)[]\n(() => boolean)[]\n```", "```ts\nArray<number|string>\nArray<() => boolean>\n```", "```ts\nconst yes: [string, string, boolean] = ['oui', 's\u00ed', true];\n```", "```ts\ninterface StringArray {\n [index: number]: string;\n}\nconst strArr: StringArray = ['Huey', 'Dewey', 'Louie'];\n```", "```ts\ninterface FirstNamesAndLastName {\n [index: number]: string;\n lastName: string;\n}\n\nconst ducks: FirstNamesAndLastName = {\n 0: 'Huey',\n 1: 'Dewey',\n 2: 'Louie',\n lastName: 'Duck',\n};\n```", "```ts\nconst fields: Fields = [\n ['first', 'string', true],\n ['last', 'string', true],\n ['age', 'number', false],\n];\n```", "```ts\ntype Fields = Array<[string, string, boolean]>;\n```", "```ts\ntype Fields = Array<[string, ('string'|'number'), boolean]>;\n```", "```ts\ntype Fields = Array<Array<string|boolean>>;\n```", "```ts\ntype Fields = [\n [string, string, boolean],\n [string, string, boolean],\n [string, string, boolean],\n];\n```", "```ts\ntype Fields = [\n [string, 'string', boolean],\n [string, 'string', boolean],\n [string, 'number', boolean],\n];\n```", "```ts\ntype Fields = [\n Array<string|boolean>,\n Array<string|boolean>,\n Array<string|boolean>,\n];\n```", "```ts\n// %inferred-type: (string | number)[]\nconst arr = [123, 'abc'];\n```", "```ts\nfunction func(p: [number, number]) {\n return p;\n}\n// %inferred-type: number[]\nconst pair1 = [1, 2];\n\n// @ts-expect-error: Argument of type 'number[]' is not assignable to\n// parameter of type '[number, number]'. [...]\nfunc(pair1);\n```", "```ts\nconst pair2: [number, number] = [1, 2];\nfunc(pair2); // OK\n```", "```ts\n// %inferred-type: any[]\nconst arr1 = [];\n\narr1.push(123);\n// %inferred-type: number[]\narr1;\n\narr1.push('abc');\n// %inferred-type: (string | number)[]\narr1;\n```", "```ts\n// %inferred-type: any[]\nconst arr1 = [];\n\narr1[0] = 123;\n// %inferred-type: number[]\narr1;\n\narr1[1] = 'abc';\n// %inferred-type: (string | number)[]\narr1;\n```", "```ts\n// %inferred-type: number[]\nconst arr = [123];\n\n// @ts-expect-error: Argument of type '\"abc\"' is not assignable to\n// parameter of type 'number'. (2345)\narr.push('abc');\n```", "```ts\n// %inferred-type: readonly [\"igneous\", \"metamorphic\", \"sedimentary\"]\nconst rockCategories =\n ['igneous', 'metamorphic', 'sedimentary'] as const;\n```", "```ts\n    // @ts-expect-error: Property 'push' does not exist on type\n    // 'readonly [\"igneous\", \"metamorphic\", \"sedimentary\"]'. (2339)\n    rockCategories.push('sand');\n    ```", "```ts\n    // %inferred-type: string[]\n    const rockCategories2 = ['igneous', 'metamorphic', 'sedimentary'];\n    ```", "```ts\n// %inferred-type: readonly [1, 2, 3, 4]\nconst numbers1 = [1, 2, 3, 4] as const;\n// %inferred-type: number[]\nconst numbers2 = [1, 2, 3, 4];\n\n// %inferred-type: readonly [true, \"abc\"]\nconst booleanAndString1 = [true, 'abc'] as const;\n// %inferred-type: (string | boolean)[]\nconst booleanAndString2 = [true, 'abc'];\n```", "```ts\nlet arr = [1, 2] as const;\n\narr = [1, 2]; // OK\n\n// @ts-expect-error: Type '3' is not assignable to type '2'. (2322)\narr = [1, 3];\n```", "```ts\nlet arr = [1, 2] as const;\n\n// @ts-expect-error: Cannot assign to '1' because it is a read-only\n// property. (2540)\narr[1] = 3;\n```", "```ts\nconst messages: string[] = ['Hello'];\n\n// %inferred-type: string\nconst message = messages[3]; // (A)\n```", "```ts\nconst messages: [string] = ['Hello'];\n\n// @ts-expect-error: Tuple type '[string]' of length '1' has no element\n// at index '1'. (2493)\nconst message = messages[1];\n```"]