- en: '12 TypeScript enums: How do they work? What can they be used for?'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12 TypeScript枚举：它们是如何工作的？可以用于什么？
- en: 原文：[https://exploringjs.com/tackling-ts/ch_enums.html](https://exploringjs.com/tackling-ts/ch_enums.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://exploringjs.com/tackling-ts/ch_enums.html](https://exploringjs.com/tackling-ts/ch_enums.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 12.1 [The basics](ch_enums.html#the-basics)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.1 基础知识
- en: 12.1.1 [Numeric enums](ch_enums.html#numeric-enums)
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.1.1 数字枚举
- en: 12.1.2 [String-based enums](ch_enums.html#string-based-enums)
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.1.2 基于字符串的枚举
- en: 12.1.3 [Heterogeneous enums](ch_enums.html#heterogeneous-enums)
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.1.3 异构枚举
- en: 12.1.4 [Omitting initializers](ch_enums.html#omitting-initializers)
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.1.4 省略初始化器
- en: 12.1.5 [Casing of enum member names](ch_enums.html#casing-of-enum-member-names)
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.1.5 枚举成员名称的大小写
- en: 12.1.6 [Quoting enum member names](ch_enums.html#quoting-enum-member-names)
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.1.6 枚举成员名称加引号
- en: 12.2 [Specifying enum member values (advanced)](ch_enums.html#specifying-enum-member-values-advanced)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.2 指定枚举成员的值（高级）
- en: 12.2.1 [Literal enum members](ch_enums.html#literal-enum-members)
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.2.1 字面量枚举成员
- en: 12.2.2 [Constant enum members](ch_enums.html#constant-enum-members)
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.2.2 常量枚举成员
- en: 12.2.3 [Computed enum members](ch_enums.html#computed-enum-members)
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.2.3 计算的枚举成员
- en: 12.3 [Downsides of numeric enums](ch_enums.html#downsides-of-numeric-enums)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.3 数字枚举的缺点
- en: '12.3.1 [Downside: logging](ch_enums.html#downside-logging)'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.3.1 缺点：日志记录
- en: '12.3.2 [Downside: loose type-checking](ch_enums.html#downside-loose-type-checking)'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.3.2 缺点：松散的类型检查
- en: '12.3.3 [Recommendation: prefer string-based enums](ch_enums.html#recommendation-prefer-string-based-enums)'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.3.3 建议：优先使用基于字符串的枚举
- en: 12.4 [Use cases for enums](ch_enums.html#use-cases-for-enums)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.4 枚举的用例
- en: '12.4.1 [Use case: bit patterns](ch_enums.html#use-case-bit-patterns)'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.4.1 用例：位模式
- en: '12.4.2 [Use case: multiple constants](ch_enums.html#use-case-multiple-constants)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.4.2 用例：多个常量
- en: '12.4.3 [Use case: more self-descriptive than booleans](ch_enums.html#use-case-more-self-descriptive-than-booleans)'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.4.3 用例：比布尔值更自描述
- en: '12.4.4 [Use case: better string constants](ch_enums.html#use-case-better-string-constants)'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.4.4 用例：更好的字符串常量
- en: 12.5 [Enums at runtime](ch_enums.html#enums-at-runtime)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.5 运行时的枚举
- en: 12.5.1 [Reverse mappings](ch_enums.html#reverse-mappings)
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.5.1 反向映射
- en: 12.5.2 [String-based enums at runtime](ch_enums.html#string-based-enums-at-runtime)
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.5.2 运行时的基于字符串的枚举
- en: 12.6 [`const` enums](ch_enums.html#const-enums)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.6 `const`枚举
- en: 12.6.1 [Compiling non-const enums](ch_enums.html#compiling-non-const-enums)
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.6.1 编译非常量枚举
- en: 12.6.2 [Compiling const enums](ch_enums.html#compiling-const-enums)
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.6.2 编译常量枚举
- en: 12.7 [Enums at compile time](ch_enums.html#enums-at-compile-time)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.7 编译时的枚举
- en: 12.7.1 [Enums are objects](ch_enums.html#enums-are-objects)
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.7.1 枚举是对象
- en: 12.7.2 [Safety checks for literal enums](ch_enums.html#safety-checks-for-literal-enums)
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.7.2 字面量枚举的安全检查
- en: 12.7.3 [`keyof` and enums](ch_enums.html#keyof-and-enums)
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.7.3 [`keyof`和枚举](ch_enums.html#keyof-and-enums)
- en: 12.8 [Acknowledgment](ch_enums.html#acknowledgment)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.8 致谢
- en: '* * *'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'This chapter answers the following two questions:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 本章回答以下两个问题：
- en: How do TypeScript’s enums work?
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript的枚举是如何工作的？
- en: What can they be used for?
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可以用于什么？
- en: In [the next chapter](ch_enum-alternatives.html), we take a look at alternatives
    to enums.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在[下一章](ch_enum-alternatives.html)中，我们将看看枚举的替代方案。
- en: 12.1 The basics
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.1 基础知识
- en: '`boolean` is a type with a finite amount of values: `false` and `true`. With
    enums, TypeScript lets us define similar types ourselves.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`boolean`是一个具有有限值的类型：`false`和`true`。使用枚举，TypeScript允许我们自己定义类似的类型。'
- en: 12.1.1 Numeric enums
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.1.1 数字枚举
- en: 'This is a numeric enum:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个数字枚举：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Explanations:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 解释：
- en: The entries `No` and `Yes` are called the *members* of the enum `NoYes`.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`No`和`Yes`被称为枚举`NoYes`的*成员*。'
- en: Each enum member has a *name* and a *value*. For example, the first member has
    the name `No` and the value `0`.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个枚举成员都有一个*名称*和一个*值*。例如，第一个成员的名称是`No`，值是`0`。
- en: The part of a member definition that starts with an equals sign and specifies
    a value is called an *initializer*.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以等号开头并指定值的成员定义部分称为*初始化器*。
- en: As in object literals, trailing commas are allowed and ignored.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与对象文字一样，允许并忽略尾随逗号。
- en: 'We can use members as if they were literals such as `true`, `123`, or `''abc''`
    – for example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将成员用作字面量，例如`true`，`123`或`'abc'`。例如：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 12.1.2 String-based enums
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.1.2 基于字符串的枚举
- en: 'Instead of numbers, we can also use strings as enum member values:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用字符串作为枚举成员的值：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 12.1.3 Heterogeneous enums
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.1.3 异构枚举
- en: 'The last kind of enums is called *heterogeneous*. The member values of a heterogeneous
    enum are a mix of numbers and strings:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一种枚举称为*异构*。异构枚举的成员值是数字和字符串的混合：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Heterogeneous enums are not used often because they have few applications.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 异构枚举很少使用，因为它们的应用很少。
- en: Alas, TypeScript only supports numbers and strings as enum member values. Other
    values, such as symbols, are not allowed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，TypeScript只支持数字和字符串作为枚举成员的值。不允许其他值，比如符号。
- en: 12.1.4 Omitting initializers
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.1.4 省略初始化器
- en: 'We can omit initializers in two cases:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在两种情况下省略初始化器：
- en: We can omit the initializer of the first member. Then that member has the value
    0 (zero).
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以省略第一个成员的初始化器。然后该成员的值为0（零）。
- en: We can omit the initializer of a member if the previous member has a number
    value. Then the current member has that value plus one.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果前一个成员有数字值，则可以省略成员的初始化器。然后当前成员的值为前一个成员的值加一。
- en: 'This is a numeric enum without any initializers:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个没有任何初始化程序的数字枚举：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is a heterogeneous enum where some initializers are omitted:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个异构枚举，其中省略了一些初始化程序：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that we can’t omit the initializer in line A because the value of the preceding
    member is not a number.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们不能省略行 A 中的初始化程序，因为前一个成员的值不是数字。
- en: 12.1.5 Casing of enum member names
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.1.5 枚举成员名称的大小写
- en: 'There are several precedents for naming constants (in enums or elsewhere):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个命名常量的先例（在枚举或其他地方）：
- en: 'Traditionally, JavaScript has used all-caps names, which is a convention it
    inherited from Java and C:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传统上，JavaScript 使用全大写的名称，这是它从 Java 和 C 继承的约定：
- en: '`Number.MAX_VALUE`'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Number.MAX_VALUE`'
- en: '`Math.SQRT2`'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Math.SQRT2`'
- en: 'Well-known symbols are camel-cased and start with lowercase letters because
    they are related to property names:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 众所周知的符号是以小写字母开头的驼峰命名，因为它们与属性名称相关：
- en: '`Symbol.asyncIterator`'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Symbol.asyncIterator`'
- en: The TypeScript manual uses camel-cased names that start with uppercase letters.
    This is the standard TypeScript style and we used it for the `NoYes` enum.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript 手册使用以大写字母开头的驼峰命名。这是标准的 TypeScript 风格，我们在 `NoYes` 枚举中使用了它。
- en: 12.1.6 Quoting enum member names
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.1.6 引用枚举成员名称
- en: 'Similar to JavaScript objects, we can quote the names of enum members:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 与 JavaScript 对象类似，我们可以引用枚举成员的名称：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There is no way to compute the names of enum members. Object literals support
    computed property keys via square brackets.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 没有办法计算枚举成员的名称。对象文字支持通过方括号进行计算属性键。
- en: 12.2 Specifying enum member values (advanced)
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.2 指定枚举成员值（高级）
- en: 'TypeScript distinguishes three kinds of enum members, by how they are initialized:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 通过初始化方式区分三种枚举成员：
- en: 'A *literal enum member*:'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*文字枚举成员*：'
- en: either has no initializer
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要么没有初始化程序
- en: or is initialized via a number literal or a string literal.
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者通过数字文字或字符串文字初始化。
- en: A *constant enum member* is initialized via an expression whose result can be
    computed at compile time.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*常量枚举成员* 是通过在编译时可以计算结果的表达式初始化的。'
- en: A *computed enum member* is initialized via an arbitrary expression.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*计算的枚举成员* 是通过任意表达式初始化的。'
- en: So far, we have only used literal members.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只使用了文字成员。
- en: In the previous list, members that are mentioned earlier are less flexible but
    support more features. Read on for more information.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的列表中，提到的成员不太灵活，但支持更多功能。继续阅读以获取更多信息。
- en: 12.2.1 Literal enum members
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.2.1 文字枚举成员
- en: 'An enum member is *literal* if its value is specified:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果枚举成员的值已指定，则该枚举成员是*文字*：
- en: either implicitly
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐式地
- en: or via a number literal (incl. negated number literals)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或通过数字文字（包括否定的数字文字）
- en: or via a string literal.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或通过字符串文字。
- en: 'If an enum has only literal members, we can use those members as types (similar
    to how, e.g., number literals can be used as types):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果枚举只有文字成员，我们可以将这些成员用作类型（类似于如何使用数字文字作为类型）：
- en: '[PRE7]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`NoYes.No` in line A is an *enum member type*.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 行 A 中的 `NoYes.No` 是*枚举成员类型*。
- en: Additionally, literal enums support exhaustiveness checks (which we’ll look
    at later).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，文字枚举支持完整性检查（稍后我们将详细介绍）。
- en: 12.2.2 Constant enum members
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.2.2 常量枚举成员
- en: 'An enum member is constant if its value can be computed at compile time. Therefore,
    we can either specify its value implicitly (that is, we let TypeScript specify
    it for us). Or we can specify it explicitly and are only allowed to use the following
    syntax:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果枚举成员的值可以在编译时计算，则该枚举成员是常量。因此，我们可以隐式地指定其值（也就是说，我们让 TypeScript 为我们指定它）。或者我们可以明确指定它，并且只允许使用以下语法：
- en: Number literals or string literals
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字文字或字符串文字
- en: A reference to a previously defined constant enum member (in the current enum
    or in a previous enum)
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对先前定义的常量枚举成员的引用（在当前枚举或以前的枚举中）
- en: Parentheses
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 括号
- en: The unary operators `+`, `-`, `~`
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一元运算符 `+`、`-`、`~`
- en: The binary operators `+`, `-`, `*`, `/`, `%`, `<<`, `>>`, `>>>`, `&`, `|`, `^`
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制运算符 `+`、`-`、`*`、`/`、`%`、`<<`、`>>`、`>>>`、`&`、`|`、`^`
- en: 'This is an example of an enum whose members are all constant (we’ll see later
    how that enum is used):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个枚举的例子，其成员都是常量（稍后我们将看到该枚举的用法）：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In general, constant members can’t be used as types. However, exhaustiveness
    checks are still performed.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，常量成员不能用作类型。但是，仍然执行完整性检查。
- en: 12.2.3 Computed enum members
  id: totrans-108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.2.3 计算的枚举成员
- en: 'The values of *computed enum members* can be specified via arbitrary expressions.
    For example:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*计算的枚举成员* 的值可以通过任意表达式指定。例如：'
- en: '[PRE9]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This was a numeric enum. String-based enums and heterogeneous enums are more
    limited. For example, we cannot use method invocations to specify member values:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个数字枚举。基于字符串的枚举和异构枚举更受限制。例如，我们不能使用方法调用来指定成员值：
- en: '[PRE10]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: TypeScript does not do exhaustiveness checks for computed enum members.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 不会对计算的枚举成员执行完整性检查。
- en: 12.3 Downsides of numeric enums
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.3 数字枚举的缺点
- en: '12.3.1 Downside: logging'
  id: totrans-115
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.3.1 缺点：记录
- en: 'When logging members of numeric enums, we only see numbers:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在记录数字枚举的成员时，我们只看到数字：
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '12.3.2 Downside: loose type-checking'
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.3.2 缺点：松散的类型检查
- en: 'When using the enum as a type, the values that are allowed statically are not
    just those of the enum members – any number is accepted:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在将枚举用作类型时，静态允许的值不仅仅是枚举成员的值-任何数字都被接受：
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Why aren’t there stricter static checks? [Daniel Rosenwasser explains](https://github.com/microsoft/TypeScript/issues/26362#issuecomment-412198938):'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么没有更严格的静态检查？[Daniel Rosenwasser 解释](https://github.com/microsoft/TypeScript/issues/26362#issuecomment-412198938)：
- en: The behavior is motivated by bitwise operations. There are times when `SomeFlag.Foo
    | SomeFlag.Bar` is intended to produce another `SomeFlag`. Instead you end up
    with `number`, and you don’t want to have to cast back to `SomeFlag`.
  id: totrans-122
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这种行为是由位操作驱动的。有时候 `SomeFlag.Foo | SomeFlag.Bar` 旨在产生另一个 `SomeFlag`。而不是得到 `number`，你不想要强制转换回
    `SomeFlag`。
- en: ''
  id: totrans-123
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I think if we did TypeScript over again and still had enums, we’d have made
    a separate construct for bit flags.
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我认为如果我们重新使用 TypeScript 并且仍然有枚举，我们会为位标志制定一个单独的构造。
- en: How enums are used for bit patterns is demonstrated soon in more detail.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 很快我们将更详细地演示枚举如何用于位模式。
- en: '12.3.3 Recommendation: prefer string-based enums'
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.3.3 建议：更喜欢基于字符串的枚举
- en: 'My recommendation is to prefer string-based enums (for brevity’s sake, this
    chapter doesn’t always follow this recommendation):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我的建议是更喜欢基于字符串的枚举（为了简洁起见，本章并不总是遵循此建议）：
- en: '[PRE13]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'On one hand, logging output is more useful for humans:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一方面，日志输出对人类更有用：
- en: '[PRE14]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'On the other hand, we get stricter type checking:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们获得了更严格的类型检查：
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Not even strings that are equal to values of members are allowed (line A).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至不允许等于成员值的字符串（行A）。
- en: 12.4 Use cases for enums
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.4 枚举的用例
- en: '12.4.1 Use case: bit patterns'
  id: totrans-135
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.4.1 用例：位模式
- en: 'In [the Node.js file system module](https://nodejs.org/api/fs.html), several
    functions have the parameter `mode`. It specifies file permissions, via a numeric
    encoding that is a holdover from Unix:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Node.js文件系统模块](https://nodejs.org/api/fs.html)中，有几个函数具有参数`mode`。它通过数字编码指定文件权限，这是Unix的遗留物：
- en: 'Permissions are specified for three categories of users:'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 权限指定了三类用户的权限：
- en: 'User: the owner of the file'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户：文件的所有者
- en: 'Group: the members of the group associated with the file'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组：与文件关联的组的成员
- en: 'All: everyone'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有人：所有人
- en: 'Per category, the following permissions can be granted:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按类别，可以授予以下权限：
- en: 'r (read): the users in the category are allowed to read the file'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: r（读取）：允许类别中的用户读取文件
- en: 'w (write): the users in the category are allowed to change the file'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: w（写入）：允许类别中的用户更改文件
- en: 'x (execute): the users in the category are allowed to run the file'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: x（执行）：允许类别中的用户运行文件
- en: 'That means that permissions can be represented by 9 bits (3 categories with
    3 permissions each):'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着权限可以由9位表示（每个类别有3个权限）：
- en: '|  | User | Group | All |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '|  | 用户 | 组 | 所有人 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Permissions | r, w, x | r, w, x | r, w, x |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 权限 | r，w，x | r，w，x | r，w，x |'
- en: '| Bit | 8, 7, 6 | 5, 4, 3 | 2, 1, 0 |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 位 | 8, 7, 6 | 5, 4, 3 | 2, 1, 0 |'
- en: 'Node.js doesn’t do this, but we could use an enum to work with these flags:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js不这样做，但我们可以使用枚举来处理这些标志：
- en: '[PRE16]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Bit patterns are combined via [bitwise Or](https://exploringjs.com/impatient-js/ch_numbers.html#binary-bitwise-operators):'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 位模式通过[按位或](https://exploringjs.com/impatient-js/ch_numbers.html#binary-bitwise-operators)进行组合：
- en: '[PRE17]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 12.4.1.1 An alternative to bit patterns
  id: totrans-154
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 12.4.1.1 位模式的替代方案
- en: The main idea behind bit patterns is that there is a set of flags and that any
    subset of those flags can be chosen.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 位模式的主要思想是有一组标志，可以选择这些标志的任何子集。
- en: 'Therefore, using real sets to choose subsets is a more straightforward way
    of performing the same task:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用真实集合来选择子集是执行相同任务的更直接的方式：
- en: '[PRE18]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '12.4.2 Use case: multiple constants'
  id: totrans-158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.4.2 用例：多个常量
- en: 'Sometimes, we have sets of constants that belong together:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们有一组属于一起的常量：
- en: '[PRE19]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This is a good use case for an enum:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是枚举的一个很好的用例：
- en: '[PRE20]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: One benefit of the enum is that the constant names are grouped and nested inside
    the namespace `LogLevel`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举的一个好处是常量名称被分组并嵌套在命名空间`LogLevel`中。
- en: 'Another one is that we automatically get the type `LogLevel` for them. If we
    want such a type for the constants, we need more work:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个是我们自动获得了类型`LogLevel`。如果我们想要这样的类型用于常量，我们需要更多的工作：
- en: '[PRE21]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: For more information on this approach, see [§13.1.3 “Unions of symbol singleton
    types”](ch_enum-alternatives.html#unions-of-symbol-singleton-types).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此方法的更多信息，请参见[§13.1.3“符号单例类型的联合”](ch_enum-alternatives.html#unions-of-symbol-singleton-types)。
- en: '12.4.3 Use case: more self-descriptive than booleans'
  id: totrans-167
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.4.3 用例：比布尔值更具自描述性
- en: When booleans are used to represent alternatives, enums are usually more self-descriptive.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当布尔值用于表示替代方案时，枚举通常更具自描述性。
- en: '12.4.3.1 Boolean-ish example: ordered vs. unordered lists'
  id: totrans-169
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 12.4.3.1 布尔示例：有序vs. 无序列表
- en: 'For example, to represent whether a list is ordered or not, we can use a boolean:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要表示列表是否有序，我们可以使用布尔值：
- en: '[PRE22]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: However, an enum is more self-descriptive and has the additional benefit that
    we can add more alternatives later if we need to.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，枚举更具自描述性，并且具有额外的好处，即如果需要，我们可以随后添加更多的替代方案。
- en: '[PRE23]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '12.4.3.2 Boolean-ish example: error handling modes'
  id: totrans-174
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 12.4.3.2 布尔示例：错误处理模式
- en: 'Similarly, we can specify how to handle errors via a boolean value:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以通过布尔值指定如何处理错误：
- en: '[PRE24]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Or we can do so via an enum value:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们可以通过枚举值来实现：
- en: '[PRE25]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '12.4.4 Use case: better string constants'
  id: totrans-179
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.4.4 用例：更好的字符串常量
- en: Consider the following function that creates regular expressions.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下创建正则表达式的函数。
- en: '[PRE26]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Instead of the string constants, we can use an enum:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用枚举而不是字符串常量：
- en: '[PRE27]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: What are the benefits of this approach?
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的好处是什么？
- en: It is more concise.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它更简洁。
- en: 'It is slightly safer: The type `Globalness` only accepts member names, not
    strings.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它稍微更安全：类型`Globalness`只接受成员名称，而不是字符串。
- en: 12.5 Enums at runtime
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.5 运行时的枚举
- en: 'TypeScript compiles enums to JavaScript objects. As an example, take the following
    enum:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript将枚举编译为JavaScript对象。例如，考虑以下枚举：
- en: '[PRE28]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'TypeScript compiles this enum to:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript将此枚举编译为：
- en: '[PRE29]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In this code, the following assignments are made:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，进行了以下赋值：
- en: '[PRE30]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'There are two groups of assignments:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 有两组赋值：
- en: The first two assignments map enum member names to values.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前两个赋值将枚举成员名称映射到值。
- en: The second two assignments map values to names. That enables *reverse mappings*,
    which we will look at next.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来的两个赋值将值映射到名称。这使得*反向映射*成为可能，接下来我们将看一下。
- en: 12.5.1 Reverse mappings
  id: totrans-197
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.5.1 反向映射
- en: 'Given a numeric enum:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个数字枚举：
- en: '[PRE31]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The normal mapping is from member names to member values:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 正常映射是从成员名称到成员值：
- en: '[PRE32]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Numeric enums also support a *reverse mapping* from member values to member
    names:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 数字枚举还支持从成员值到成员名称的*反向映射*：
- en: '[PRE33]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'One use case for reverse mappings is printing the name of an enum member:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 反向映射的一个用例是打印枚举成员的名称：
- en: '[PRE34]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 12.5.2 String-based enums at runtime
  id: totrans-206
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.5.2 运行时的基于字符串的枚举
- en: String-based enums have a simpler representation at runtime.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 基于字符串的枚举在运行时具有更简单的表示。
- en: Consider the following enum.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下枚举。
- en: '[PRE35]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'It is compiled to this JavaScript code:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 它编译为以下JavaScript代码：
- en: '[PRE36]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: TypeScript does not support reverse mappings for string-based enums.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript不支持基于字符串的枚举的反向映射。
- en: 12.6 `const` enums
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.6 `const`枚举
- en: If an enum is prefixed with the keyword `const`, it doesn’t have a representation
    at runtime. Instead, the values of its member are used directly.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果枚举以关键字`const`为前缀，则在运行时没有表示。相反，直接使用其成员的值。
- en: 12.6.1 Compiling non-const enums
  id: totrans-215
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.6.1 编译非const枚举
- en: 'To observe this effect, let us first examine the following non-const enum:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 要观察这种效果，让我们首先检查以下非const枚举：
- en: '[PRE37]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'TypeScript compiles this code to:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript将此代码编译为：
- en: '[PRE38]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 12.6.2 Compiling const enums
  id: totrans-220
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.6.2 编译const枚举
- en: 'This is the same code as previously, but now the enum is const:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这与以前的代码相同，但现在枚举是const：
- en: '[PRE39]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now the representation of the enum as a construct disappears and only the values
    of its members remain:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，枚举的表示作为构造体消失了，只剩下其成员的值：
- en: '[PRE40]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 12.7 Enums at compile time
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.7 编译时的枚举
- en: 12.7.1 Enums are objects
  id: totrans-226
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.7.1 枚举是对象
- en: 'TypeScript treats (non-const) enums as if they were objects:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript将（非const）枚举视为对象：
- en: '[PRE41]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 12.7.2 Safety checks for literal enums
  id: totrans-229
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.7.2 对文字枚举的安全检查
- en: 'When we accept an enum member value, we often want to make sure that:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们接受枚举成员的值时，通常希望确保：
- en: We don’t receive illegal values.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不会收到非法值。
- en: We don’t forget to consider any enum member values. This is especially relevant
    if we add members later.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不会忘记考虑任何枚举成员的值。如果我们稍后添加成员，这一点尤其重要。
- en: 'Read on for more information. We will be working with the following enum:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 继续阅读以获取更多信息。我们将使用以下枚举进行工作：
- en: '[PRE42]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 12.7.2.1 Protecting against illegal values
  id: totrans-235
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 12.7.2.1 防止非法值
- en: 'In the following code, we take two measures against illegal values:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们采取了两项措施防止非法值：
- en: '[PRE43]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The measures are:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 措施是：
- en: At compile time, the type `NoYes` prevents illegal values being passed to the
    parameter `value`.
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在编译时，类型`NoYes`防止非法值传递给参数`value`。
- en: At runtime, the `default` case is used to throw an exception if there is an
    unexpected value.
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行时，如果出现意外值，将使用`default`情况抛出异常。
- en: 12.7.2.2 Protecting against forgetting cases via exhaustiveness checks
  id: totrans-241
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 12.7.2.2 通过完整性检查防止遗漏情况
- en: 'We can take one more measure. The following code performs an *exhaustiveness
    check*: TypeScript will warn us if we forget to consider all enum members.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以采取更多措施。以下代码执行*完整性检查*：如果我们忘记考虑所有枚举成员，TypeScript将警告我们。
- en: '[PRE44]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'How does the exhaustiveness check work? For every case, TypeScript infers the
    type of `value`:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 完整性检查是如何工作的？对于每种情况，TypeScript推断`value`的类型：
- en: '[PRE45]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In the default case, TypeScript infers the type `never` for `value` because
    we never get there. If however, we add a member `.Maybe` to `NoYes`, then the
    inferred type of `value` is `NoYes.Maybe`. And that type is statically incompatible
    with the type `never` of the parameter of `new UnsupportedValueError()`. That’s
    why we get the following error message at compile time:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认情况下，TypeScript推断`value`的类型为`never`，因为我们永远不会到达那里。但是，如果我们向`NoYes`添加一个成员`.Maybe`，那么`value`的推断类型将是`NoYes.Maybe`。而该类型在编译时与`new
    UnsupportedValueError()`的参数的类型`never`静态不兼容。这就是为什么我们在编译时会得到以下错误消息：
- en: '[PRE46]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Conveniently, this kind of exhaustiveness check also works with `if` statements:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 方便的是，这种完整性检查也适用于`if`语句：
- en: '[PRE47]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 12.7.2.3 An alternative way of checking exhaustiveness
  id: totrans-250
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 12.7.2.3 检查完整性的另一种方法
- en: 'Alternatively, we also get an exhaustiveness check if we specify a return type:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果我们指定返回类型，还可以获得完整性检查：
- en: '[PRE48]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: If we add a member to `NoYes`, then TypeScript complains that `toGerman4()`
    may return `undefined`.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们向`NoYes`添加一个成员，那么TypeScript会抱怨`toGerman4()`可能会返回`undefined`。
- en: '**Downsides of this approach:**'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '**这种方法的缺点：**'
- en: This approach does not work with `if` statements ([more information](https://github.com/microsoft/TypeScript/issues/17358)).
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种方法不适用于`if`语句（[更多信息](https://github.com/microsoft/TypeScript/issues/17358)）。
- en: No checks are performed at runtime.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不会在运行时执行检查。
- en: 12.7.3 `keyof` and enums
  id: totrans-257
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.7.3 `keyof`和枚举
- en: 'We can use the `keyof` type operator to create the type whose elements are
    the keys of the enum members. When we do so, we need to combine `keyof` with `typeof`:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`keyof`类型运算符来创建元素为枚举成员键的类型。当我们这样做时，我们需要将`keyof`与`typeof`结合使用：
- en: '[PRE49]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 12.7.3.1 Using `keyof` without `typeof`
  id: totrans-260
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 12.7.3.1 在没有`typeof`的情况下使用`keyof`
- en: 'If we use `keyof` without `typeof`, we get a different, less useful, type:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在没有`typeof`的情况下使用`keyof`，则会得到不同且不太有用的类型：
- en: '[PRE50]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '`keyof HttpRequestKeyEnum` is the same as `keyof number`.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`keyof HttpRequestKeyEnum`与`keyof number`相同。'
- en: 12.8 Acknowledgment
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.8 致谢
- en: Thanks to Disqus user `@spira_mirabilis` for their feedback to this chapter.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 感谢Disqus用户`@spira_mirabilis`对本章的反馈。
- en: '[Comments](https://github.com/rauschma/tackling-ts/issues/12)'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/tackling-ts/issues/12)'
