- en: '8 Consoles: interactive JavaScript command lines'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://exploringjs.com/impatient-js/ch_console.html](https://exploringjs.com/impatient-js/ch_console.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 8.1 [Trying out JavaScript code](ch_console.html#trying-out-code)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.1.1 [Browser consoles](ch_console.html#browser-consoles)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.1.2 [The Node.js REPL](ch_console.html#the-node.js-repl)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.1.3 [Other options](ch_console.html#other-options)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '8.2 [The `console.*` API: printing data and more](ch_console.html#the-console.-api-printing-data-and-more)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '8.2.1 [Printing values: `console.log()` (stdout)](ch_console.html#printing-values-console.log-stdout)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '8.2.2 [Printing error information: `console.error()` (stderr)](ch_console.html#printing-error-information-console.error-stderr)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.2.3 [Printing nested objects via `JSON.stringify()`](ch_console.html#printing-nested-objects-via-json.stringify)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 8.1 Trying out JavaScript code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You have many options for quickly running pieces of JavaScript code. The following
    subsections describe a few of them.
  prefs: []
  type: TYPE_NORMAL
- en: 8.1.1 Browser consoles
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Web browsers have so-called *consoles*: interactive command lines to which
    you can print text via `console.log()` and where you can run pieces of code. How
    to open the console differs from browser to browser. Fig. [3](#fig:chrome-console)
    shows the console of Google Chrome.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out how to open the console in your web browser, you can do a web search
    for “console «name-of-your-browser»”. These are pages for a few commonly used
    web browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Apple Safari](https://developer.apple.com/safari/tools/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Google Chrome](https://developers.google.com/web/tools/chrome-devtools/console/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Microsoft Edge](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide/console)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Mozilla Firefox](https://developer.mozilla.org/en-US/docs/Tools/Web_Console/Opening_the_Web_Console)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3: The console of the web browser “Google Chrome” is open (in the
    bottom half of window) while visiting a web page.](../Images/fead23a762b5aeb667d96f2eb031f30e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: The console of the web browser “Google Chrome” is open (in the bottom
    half of window) while visiting a web page.'
  prefs: []
  type: TYPE_NORMAL
- en: 8.1.2 The Node.js REPL
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*REPL* stands for *read-eval-print loop* and basically means *command line*.
    To use it, you must first start Node.js from an operating system command line,
    via the command `node`. Then an interaction with it looks as depicted in fig. [4](#fig:nodejs-repl):
    The text after `>` is input from the user; everything else is output from Node.js.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4: Starting and using the Node.js REPL (interactive command line).](../Images/649a038584b3c5f7eb584c7b80b1476b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: Starting and using the Node.js REPL (interactive command line).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ec8e6930fbe484fc519f3aa7b812c3fd.png)  **Reading: REPL interactions**'
  prefs: []
  type: TYPE_NORMAL
- en: 'I occasionally demonstrate JavaScript via REPL interactions. Then I also use
    greater-than symbols (`>`) to mark input – for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 8.1.3 Other options
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Other options include:'
  prefs: []
  type: TYPE_NORMAL
- en: There are many web apps that let you experiment with JavaScript in web browsers
    – for example, [Babel’s REPL](https://babeljs.io/repl).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are also native apps and IDE plugins for running JavaScript.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/0ac255e56dc93a43365d8502301c8688.png)  **Consoles often run in
    non-strict mode**'
  prefs: []
  type: TYPE_NORMAL
- en: In modern JavaScript, most code (e.g., modules) is executed in [strict mode](ch_syntax.html#strict-mode).
    However, consoles often run in non-strict mode. Therefore, you may occasionally
    get slightly different results when using a console to execute code from this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: '8.2 The `console.*` API: printing data and more'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In browsers, the console is something you can bring up that is normally hidden.
    For Node.js, the console is the terminal that Node.js is currently running in.
  prefs: []
  type: TYPE_NORMAL
- en: The full `console.*` API is documented [on MDN web docs](https://developer.mozilla.org/en-US/docs/Web/API/console)
    and [on the Node.js website](https://nodejs.org/api/console.html). It is not part
    of the JavaScript language standard, but much functionality is supported by both
    browsers and Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we only look at the following two methods for printing data
    (“printing” means displaying in the console):'
  prefs: []
  type: TYPE_NORMAL
- en: '`console.log()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`console.error()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '8.2.1 Printing values: `console.log()` (stdout)'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are two variants of this operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 8.2.1.1 Printing multiple values
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The first variant prints (text representations of) values on the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: At the end, `console.log()` always prints a newline. Therefore, if you call
    it with zero arguments, it just prints a newline.
  prefs: []
  type: TYPE_NORMAL
- en: 8.2.1.2 Printing a string with substitutions
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The second variant performs string substitution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'These are some of the directives you can use for substitutions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`%s` converts the corresponding value to a string and inserts it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`%o` inserts a string representation of an object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`%j` converts a value to a JSON string and inserts it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`%%` inserts a single `%`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '8.2.2 Printing error information: `console.error()` (stderr)'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`console.error()` works the same as `console.log()`, but what it logs is considered
    error information. For Node.js, that means that the output goes to stderr instead
    of stdout on Unix.'
  prefs: []
  type: TYPE_NORMAL
- en: 8.2.3 Printing nested objects via `JSON.stringify()`
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`JSON.stringify()`](ch_json.html#JSON.stringify) is occasionally useful for
    printing nested objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[Comments](https://github.com/rauschma/impatient-js/issues/48)'
  prefs: []
  type: TYPE_NORMAL
