- en: 23 An overview of computing with types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://exploringjs.com/tackling-ts/ch_computing-with-types-overview.html](https://exploringjs.com/tackling-ts/ch_computing-with-types-overview.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 23.1 [Types as metavalues](ch_computing-with-types-overview.html#types-as-metavalues)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '23.2 [Generic types: factories for types](ch_computing-with-types-overview.html#generic-types-factories-for-types)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.3 [Union types and intersection types](ch_computing-with-types-overview.html#union-types-and-intersection-types)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.3.1 [Union types (`|`)](ch_computing-with-types-overview.html#union-types-1)
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.3.2 [Intersection types (`&`)](ch_computing-with-types-overview.html#intersection-types)
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.4 [Control flow](ch_computing-with-types-overview.html#control-flow)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.4.1 [Conditional types](ch_computing-with-types-overview.html#conditional-types)
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.4.2 [Mapped types](ch_computing-with-types-overview.html#mapped-types-1)
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.5 [Various other operators](ch_computing-with-types-overview.html#various-other-operators)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.5.1 [The index type query operator `keyof`](ch_computing-with-types-overview.html#the-index-type-query-operator-keyof)
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.5.2 [The indexed access operator `T[K]`](ch_computing-with-types-overview.html#the-indexed-access-operator-tk)
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 23.5.3 [The type query operator `typeof`](ch_computing-with-types-overview.html#the-type-query-operator-typeof)
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explore how we can compute with types at compile time in
    TypeScript.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Note that the focus of this chapter is on learning how to compute with types.
    Therefore, we’ll use literal types a lot and the examples are less practically
    relevant.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 23.1 Types as metavalues
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Consider the following two levels of TypeScript code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Program level: At runtime, we can use values and functions.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Type level: At compile time, we can use specific types and generic types.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The type level is a metalevel of the program level.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '| Level | Available at | Operands | Operations |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
- en: '| Program level | Runtime | Values | Functions |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
- en: '| Type level | Compile time | Specific types | Generic types |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
- en: 'What does it mean that we can compute with types? The following code is an
    example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In line A, we are taking the following steps:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: The input of our computation is the type `ObjectLiteralType`, an object literal
    type.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We apply the operation `keyof` to the input. It lists the property keys of an
    object type.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We give the output of `keyof` the name `Result`.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At the type level we can compute with the following “values”:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '23.2 Generic types: factories for types'
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Generic types are functions at the metalevel – for example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The generic type `Wrap<>` has the parameter `T`. Its result is `T`, wrapped
    in a tuple type. This is how we use this metafunction:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We pass the parameter `string` to `Wrap<>` and give the result the alias `Wrapped`.
    The result is a tuple type with a single component – the type `string`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 23.3 Union types and intersection types
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 23.3.1 Union types (`|`)
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The type operator `|` is used to create union types:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we view type `A` and type `B` as sets, then `A | B` is the set-theoretic
    union of these sets. Put differently: The members of the result are members of
    at least one of the operands.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntactically, we can also put a `|` in front of the first component of a union
    type. That is convenient when a type definition spans multiple lines:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 23.3.1.1 Unions as collections of metavalues
  id: totrans-48
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'TypeScript represents collections of metavalues as unions of literal types.
    We have already seen an example of that:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We’ll soon see type-level operations for looping over such collections.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 23.3.1.2 Unions of object types
  id: totrans-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Due to each member of a union type being a member of *at least* one of the
    component types, we can only safely access properties that are shared by all component
    types (line A). To access any other property, we need a type guard (line B):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 23.3.2 Intersection types (`&`)
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The type operator `&` is used to create intersection types:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If we view type `A` and type `B` as sets, then `A & B` is the set-theoretic
    intersection of these sets. Put differently: The members of the result are members
    of both operands.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将类型`A`和类型`B`视为集合，则`A & B`是这些集合的集合论交集。换句话说：结果的成员是两个操作数的成员。
- en: 23.3.2.1 Intersections of object types
  id: totrans-59
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 23.3.2.1 对象类型的交集
- en: 'The intersection of two object types has the properties of both types:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 两个对象类型的交集具有两种类型的属性：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: (The generic type `IsAssignableTo<>` is explained later.)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: （泛型类型 `IsAssignableTo<>` 将在后面解释。）
- en: 23.3.2.2 Using intersection types for mixins
  id: totrans-63
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 23.3.2.2 使用交集类型进行混合
- en: 'If we are mixin in an object type `Named` into another type `Obj`, then we
    need an intersection type (line A):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将对象类型 `Named` 混入另一个类型 `Obj` 中，那么我们需要一个交集类型（行A）：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 23.4 Control flow
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 23.4 控制流
- en: 23.4.1 Conditional types
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 23.4.1 条件类型
- en: 'A *conditional type* has the following syntax:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*条件类型* 有以下语法：'
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If `Type2` is assignable to `Type1`, then the result of this type expression
    is `ThenType`. Otherwise, it is `ElseType`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `Type2` 可分配给 `Type1`，则此类型表达式的结果是 `ThenType`。否则，它是 `ElseType`。
- en: '23.4.1.1 Example: only wrapping types that have the property `.length`'
  id: totrans-71
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 23.4.1.1 例子：只包装具有属性`.length`的类型
- en: 'In the following example, `Wrap<>` only wraps types in one-element tuples if
    they have the property `.length` whose values are numbers:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，`Wrap<>`仅在具有属性`.length`且其值为数字的一元元组中包装类型：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '23.4.1.2 Example: checking assignability'
  id: totrans-74
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 23.4.1.2 例子：检查可分配性
- en: 'We can use a conditional type to implement an assignability check:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用条件类型来实现可分配性检查：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: For more information on the type relationship *assignability*, see [[content
    not included]](ch_missing-chapters-online.html).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有关类型关系*可分配性*的更多信息，请参见[[content not included]](ch_missing-chapters-online.html)。
- en: 23.4.1.3 Conditional types are distributive
  id: totrans-78
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 23.4.1.3 条件类型是可分配的
- en: 'Conditional types are [*distributive*](https://en.wikipedia.org/wiki/Distributive_property):
    Applying a conditional type `C` to a union type `U` is the same as the union of
    applying `C` to each component of `U`. This is an example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 条件类型是[*可分配的*](https://en.wikipedia.org/wiki/Distributive_property)：将条件类型 `C`
    应用于联合类型 `U` 等同于将 `C` 应用于 `U` 的每个组件的并集。这是一个例子：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In other words, distributivity enables us to “loop” over the components of a
    union type.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，可分配性使我们能够“循环”遍历联合类型的组件。
- en: 'This is another example of distributivity:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是可分配性的另一个例子：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 23.4.1.4 With distributive conditional types, we use type `never` to ignore
    things
  id: totrans-84
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 23.4.1.4 使用可分配条件类型，我们使用类型`never`来忽略事物
- en: 'Interpreted as a set, type `never` is empty. Therefore, if it appears in a
    union type, it is ignored:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 将`never`类型解释为集合时，它是空的。因此，如果它出现在联合类型中，它将被忽略：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'That means we can use `never` to ignore components of a union type:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以使用 `never` 来忽略联合类型的组件：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This is what happens if we swap the type expressions of the then-branch and
    the else-branch:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们交换了then-branch和else-branch的类型表达式，会发生什么：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '23.4.1.5 Built-in utility type: `Exclude<T, U>`'
  id: totrans-91
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 23.4.1.5 内置实用类型：`Exclude<T, U>`
- en: 'Excluding types from a union is such a common operation that TypeScript provides
    the built-in utility type `Exclude<T, U>`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 从联合类型中排除类型是一种常见的操作，TypeScript提供了内置实用类型`Exclude<T, U>`：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '23.4.1.6 Built-in utility type: `Extract<T, U>`'
  id: totrans-94
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 23.4.1.6 内置实用类型：`Extract<T, U>`
- en: 'The inverse of `Exclude<T, U>` is `Extract<T, U>`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`Exclude<T, U>` 的反操作是 `Extract<T, U>`：'
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 23.4.1.7 Chaining conditional types
  id: totrans-97
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 23.4.1.7 链接条件类型
- en: 'Similarly to JavaScript’s ternary operator, we can also chain TypeScript’s
    conditional type operator:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于JavaScript的三元运算符，我们也可以链式使用TypeScript的条件类型运算符：
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 23.4.1.8 `infer` and conditional types
  id: totrans-100
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 23.4.1.8 `infer` 和条件类型
- en: https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-inference-in-conditional-types
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-inference-in-conditional-types
- en: '**Example:**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**例子：**'
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Example:**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**例子：**'
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 23.4.2 Mapped types
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 23.4.2 映射类型
- en: 'A *mapped type* produces an object by looping over a collection of keys – for
    example:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*映射类型*通过循环遍历键的集合来生成对象-例如：'
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The operator `in` is a crucial part of a mapped type: It specifies where the
    keys for the new object literal type come from.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符 `in` 是映射类型的重要部分：它指定新对象文字类型的键来自哪里。
- en: '23.4.2.1 Built-in utility type: `Pick<T, K>`'
  id: totrans-110
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 23.4.2.1 内置实用类型：`Pick<T, K>`
- en: 'The following built-in utility type lets us create a new object by specifying
    which properties of an existing object type we want to keep:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内置实用类型允许我们通过指定要保留的现有对象类型的属性来创建新对象：
- en: '[PRE25]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'It is used as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 它的使用方式如下：
- en: '[PRE26]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '23.4.2.2 Built-in utility type: `Omit<T, K>`'
  id: totrans-115
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 23.4.2.2 内置实用类型：`Omit<T, K>`
- en: 'The following built-in utility type lets us create a new object type by specifying
    which properties of an existing object type we want to omit:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内置实用类型允许我们通过指定要省略的现有对象类型的属性来创建新的对象类型：
- en: '[PRE27]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Explanations:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 解释：
- en: '`K extends keyof any` means that `K` must be a subtype of the type of all property
    keys:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`K extends keyof any` 意味着 `K` 必须是所有属性键类型的子类型：'
- en: '[PRE28]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`Exclude<keyof T, K>>` means: take the keys of `T` and remove all “values”
    mentioned in `K`.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exclude<keyof T, K>>` 的意思是：取出 `T` 的键并移除所有在 `K` 中提到的“值”。'
- en: '`Omit<>` is used as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`Omit<>`的使用方式如下：'
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 23.5 Various other operators
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 23.5 其他各种运算符
- en: 23.5.1 The index type query operator `keyof`
  id: totrans-125
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 23.5.1 索引类型查询运算符 `keyof`
- en: 'We have already encountered the type operator `keyof`. It lists the property
    keys of an object type:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经遇到了类型运算符`keyof`。它列出了对象类型的属性键：
- en: '[PRE30]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Applying `keyof` to a tuple type has a result that may be somewhat unexpected:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 将`keyof`应用于元组类型会产生一个可能有些意外的结果：
- en: '[PRE31]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The result includes:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 结果包括：
- en: 'The indices of the tuple elements, as strings: `"0" | "1" | "2"`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元组元素的索引，作为字符串："0" | "1" | "2"
- en: The type `number` of index property keys
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引属性键的类型`number`
- en: The name of the special instance property `.length`
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特殊实例属性`.length`的名称
- en: 'The names of all `Array` methods: `"pop" | "push" | ···`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有`Array`方法的名称："pop" | "push" | ···
- en: 'The property keys of an empty object literal type are the empty set `never`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 空对象文字类型的属性键是空集`never`：
- en: '[PRE32]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This is how `keyof` handles intersection types and union types:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`keyof`处理交集类型和联合类型的方式：
- en: '[PRE33]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This makes sense if we remember that `A & B` has the properties of *both* type
    `A` and type `B`. `A` and `B` only have property `.shared` in common, which explains
    `Result2`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们记得`A & B`具有类型`A`和类型`B`的*共同*属性，这就有意义了。`A`和`B`只有`.shared`属性是共同的，这解释了`Result2`。
- en: 23.5.2 The indexed access operator `T[K]`
  id: totrans-140
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 23.5.2 索引访问操作符`T[K]`
- en: The indexed access operator `T[K]` returns the types of all properties of `T`
    whose keys are assignable to type `K`. `T[K]` is also called a *lookup type*.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 索引访问操作符`T[K]`返回`T`的所有属性的类型，这些属性的键可以赋值给类型`K`。`T[K]`也被称为*查找类型*。
- en: 'These are examples of the operator being used:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是使用该操作符的例子：
- en: '[PRE34]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The type in brackets must be assignable to the type of all property keys (as
    computed by `keyof`). That’s why `Obj[number]` and `Obj[string]` are not allowed.
    However, we can use `number` and `string` as index types if the indexed type has
    an index signature (line A):'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 括号中的类型必须可以赋值给所有属性键的类型（由`keyof`计算得出）。这就是为什么`Obj[number]`和`Obj[string]`是不允许的。然而，如果索引类型有一个索引签名（行A），我们可以使用`number`和`string`作为索引类型：
- en: '[PRE35]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`KeysOfObj` includes the type `number` because number keys are a subset of
    string keys in JavaScript (and therefore in TypeScript).'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`KeysOfObj`包括类型`number`，因为数字键是JavaScript（因此也是TypeScript）中字符串键的子集。'
- en: 'Tuple types also support indexed access:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 元组类型也支持索引访问：
- en: '[PRE36]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The bracket operator is also distributive:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 括号操作符也是分布式的：
- en: '[PRE37]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 23.5.3 The type query operator `typeof`
  id: totrans-151
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 23.5.3 类型查询操作符`typeof`
- en: 'The type operator `typeof` converts a (JavaScript) value to its (TypeScript)
    type. Its operand must be an identifier or a sequence of dot-separated identifiers:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 类型操作符`typeof`将（JavaScript）值转换为其（TypeScript）类型。它的操作数必须是标识符或一系列用点分隔的标识符：
- en: '[PRE38]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The first `'abc'` is a value, while the second `"abc"` is its type, a string
    literal type.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`'abc'`是一个值，而第二个`"abc"`是它的类型，一个字符串字面类型。
- en: 'This is another example of using `typeof`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用`typeof`的另一个例子：
- en: '[PRE39]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[§14.1.2 “Adding a symbol to a type”](ch_special-values.html#adding-symbol-to-type)
    describes an interesting use case for `typeof`.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[§14.1.2 “向类型添加符号”](ch_special-values.html#adding-symbol-to-type)描述了`typeof`的一个有趣用例。'
- en: '[Comments](https://github.com/rauschma/tackling-ts/issues/25)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](https://github.com/rauschma/tackling-ts/issues/25)'
